
adc_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ff8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004104  08004104  00014104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041c8  080041c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080041c8  080041c8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041c8  080041c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041c8  080041c8  000141c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041cc  080041cc  000141cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080041d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000070  08004240  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08004240  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd3a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002249  00000000  00000000  0002ddd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00030020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00030de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187d3  00000000  00000000  00031ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec2e  00000000  00000000  0004a29b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fcf3  00000000  00000000  00058ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8bbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d38  00000000  00000000  000e8c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080040ec 	.word	0x080040ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080040ec 	.word	0x080040ec

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800015e:	b08b      	sub	sp, #44	; 0x2c
 8000160:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fc93 	bl	8000a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f8dd 	bl	8000324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 fa27 	bl	80005bc <MX_GPIO_Init>
  MX_DMA_Init();
 800016e:	f000 fa07 	bl	8000580 <MX_DMA_Init>
  MX_ADC1_Init();
 8000172:	f000 f933 	bl	80003dc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000176:	f000 f9d9 	bl	800052c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800017a:	f000 f97d 	bl	8000478 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ENABLE);
 800017e:	2201      	movs	r2, #1
 8000180:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000184:	485c      	ldr	r0, [pc, #368]	; (80002f8 <main+0x19c>)
 8000186:	f001 ff47 	bl	8002018 <HAL_GPIO_WritePin>
  sprintf (msg_UART_TX, "%lu, %lu, %lu, %lu\r\n", HAL_RCC_GetSysClockFreq(), HAL_RCC_GetHCLKFreq(), HAL_RCC_GetPCLK1Freq(), HAL_RCC_GetPCLK2Freq());
 800018a:	f002 fae1 	bl	8002750 <HAL_RCC_GetSysClockFreq>
 800018e:	4605      	mov	r5, r0
 8000190:	f002 fb3e 	bl	8002810 <HAL_RCC_GetHCLKFreq>
 8000194:	4606      	mov	r6, r0
 8000196:	f002 fb45 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 800019a:	4604      	mov	r4, r0
 800019c:	f002 fb56 	bl	800284c <HAL_RCC_GetPCLK2Freq>
 80001a0:	4603      	mov	r3, r0
 80001a2:	9301      	str	r3, [sp, #4]
 80001a4:	9400      	str	r4, [sp, #0]
 80001a6:	4633      	mov	r3, r6
 80001a8:	462a      	mov	r2, r5
 80001aa:	4954      	ldr	r1, [pc, #336]	; (80002fc <main+0x1a0>)
 80001ac:	4854      	ldr	r0, [pc, #336]	; (8000300 <main+0x1a4>)
 80001ae:	f003 fb63 	bl	8003878 <siprintf>
  HAL_UART_Transmit (&huart1, (uint8_t*)msg_UART_TX, strlen(msg_UART_TX), 0xFF); //отправим тактовые частоты МК
 80001b2:	4853      	ldr	r0, [pc, #332]	; (8000300 <main+0x1a4>)
 80001b4:	f7ff ffca 	bl	800014c <strlen>
 80001b8:	4603      	mov	r3, r0
 80001ba:	b29a      	uxth	r2, r3
 80001bc:	23ff      	movs	r3, #255	; 0xff
 80001be:	4950      	ldr	r1, [pc, #320]	; (8000300 <main+0x1a4>)
 80001c0:	4850      	ldr	r0, [pc, #320]	; (8000304 <main+0x1a8>)
 80001c2:	f003 f9bc 	bl	800353e <HAL_UART_Transmit>

  sprintf (msg_UART_TX, "adc_DMA_start\r\n");
 80001c6:	4950      	ldr	r1, [pc, #320]	; (8000308 <main+0x1ac>)
 80001c8:	484d      	ldr	r0, [pc, #308]	; (8000300 <main+0x1a4>)
 80001ca:	f003 fb55 	bl	8003878 <siprintf>
  HAL_UART_Transmit (&huart1, (uint8_t*)msg_UART_TX, strlen(msg_UART_TX), 0xFF);
 80001ce:	484c      	ldr	r0, [pc, #304]	; (8000300 <main+0x1a4>)
 80001d0:	f7ff ffbc 	bl	800014c <strlen>
 80001d4:	4603      	mov	r3, r0
 80001d6:	b29a      	uxth	r2, r3
 80001d8:	23ff      	movs	r3, #255	; 0xff
 80001da:	4949      	ldr	r1, [pc, #292]	; (8000300 <main+0x1a4>)
 80001dc:	4849      	ldr	r0, [pc, #292]	; (8000304 <main+0x1a8>)
 80001de:	f003 f9ae 	bl	800353e <HAL_UART_Transmit>

  HAL_ADCEx_Calibration_Start(&hadc1); //калибровка adc1
 80001e2:	484a      	ldr	r0, [pc, #296]	; (800030c <main+0x1b0>)
 80001e4:	f001 f9a8 	bl	8001538 <HAL_ADCEx_Calibration_Start>
  sprintf (msg_UART_TX, "adc_calibrate\r\n");
 80001e8:	4949      	ldr	r1, [pc, #292]	; (8000310 <main+0x1b4>)
 80001ea:	4845      	ldr	r0, [pc, #276]	; (8000300 <main+0x1a4>)
 80001ec:	f003 fb44 	bl	8003878 <siprintf>
  HAL_UART_Transmit (&huart1, (uint8_t*)msg_UART_TX, strlen(msg_UART_TX), 0xFF);
 80001f0:	4843      	ldr	r0, [pc, #268]	; (8000300 <main+0x1a4>)
 80001f2:	f7ff ffab 	bl	800014c <strlen>
 80001f6:	4603      	mov	r3, r0
 80001f8:	b29a      	uxth	r2, r3
 80001fa:	23ff      	movs	r3, #255	; 0xff
 80001fc:	4940      	ldr	r1, [pc, #256]	; (8000300 <main+0x1a4>)
 80001fe:	4841      	ldr	r0, [pc, #260]	; (8000304 <main+0x1a8>)
 8000200:	f003 f99d 	bl	800353e <HAL_UART_Transmit>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 2); // стартуем АЦП с DMA
 8000204:	2202      	movs	r2, #2
 8000206:	4943      	ldr	r1, [pc, #268]	; (8000314 <main+0x1b8>)
 8000208:	4840      	ldr	r0, [pc, #256]	; (800030c <main+0x1b0>)
 800020a:	f000 fd9d 	bl	8000d48 <HAL_ADC_Start_DMA>

  TIM_OC_InitTypeDef myConfigOC = {0}; //инициализируем структуру с настройками ШИМ
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
 800021a:	611a      	str	r2, [r3, #16]
 800021c:	615a      	str	r2, [r3, #20]
 800021e:	619a      	str	r2, [r3, #24]
  myConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000220:	2360      	movs	r3, #96	; 0x60
 8000222:	607b      	str	r3, [r7, #4]
  myConfigOC.Pulse = 0;
 8000224:	2300      	movs	r3, #0
 8000226:	60bb      	str	r3, [r7, #8]
  myConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
  myConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800022c:	2300      	movs	r3, #0
 800022e:	617b      	str	r3, [r7, #20]
  HAL_TIM_PWM_ConfigChannel (&htim3, &myConfigOC, TIM_CHANNEL_2);
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	2204      	movs	r2, #4
 8000234:	4619      	mov	r1, r3
 8000236:	4838      	ldr	r0, [pc, #224]	; (8000318 <main+0x1bc>)
 8000238:	f002 fe0a 	bl	8002e50 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //запуск канала 2 таймера ШИМ
 800023c:	2104      	movs	r1, #4
 800023e:	4836      	ldr	r0, [pc, #216]	; (8000318 <main+0x1bc>)
 8000240:	f002 fd00 	bl	8002c44 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

 if (flag)
 8000244:	4b35      	ldr	r3, [pc, #212]	; (800031c <main+0x1c0>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	b2db      	uxtb	r3, r3
 800024a:	2b00      	cmp	r3, #0
 800024c:	d0fa      	beq.n	8000244 <main+0xe8>
 {
	 flag = 0;
 800024e:	4b33      	ldr	r3, [pc, #204]	; (800031c <main+0x1c0>)
 8000250:	2200      	movs	r2, #0
 8000252:	701a      	strb	r2, [r3, #0]
	 HAL_GPIO_TogglePin (LED_GPIO_Port, LED_Pin);
 8000254:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000258:	4827      	ldr	r0, [pc, #156]	; (80002f8 <main+0x19c>)
 800025a:	f001 fef5 	bl	8002048 <HAL_GPIO_TogglePin>
	 HAL_ADC_Stop_DMA(&hadc1); // останавливаем АЦП1
 800025e:	482b      	ldr	r0, [pc, #172]	; (800030c <main+0x1b0>)
 8000260:	f000 fe50 	bl	8000f04 <HAL_ADC_Stop_DMA>
	 sprintf(msg_UART_TX,  "ADC %hd %hd\n\r", (uint16_t)adc[0], (uint16_t)adc[1]);
 8000264:	4b2b      	ldr	r3, [pc, #172]	; (8000314 <main+0x1b8>)
 8000266:	881b      	ldrh	r3, [r3, #0]
 8000268:	b29b      	uxth	r3, r3
 800026a:	461a      	mov	r2, r3
 800026c:	4b29      	ldr	r3, [pc, #164]	; (8000314 <main+0x1b8>)
 800026e:	885b      	ldrh	r3, [r3, #2]
 8000270:	b29b      	uxth	r3, r3
 8000272:	492b      	ldr	r1, [pc, #172]	; (8000320 <main+0x1c4>)
 8000274:	4822      	ldr	r0, [pc, #136]	; (8000300 <main+0x1a4>)
 8000276:	f003 faff 	bl	8003878 <siprintf>
	 HAL_UART_Transmit(&huart1, (uint8_t*)msg_UART_TX, strlen(msg_UART_TX), 1000);
 800027a:	4821      	ldr	r0, [pc, #132]	; (8000300 <main+0x1a4>)
 800027c:	f7ff ff66 	bl	800014c <strlen>
 8000280:	4603      	mov	r3, r0
 8000282:	b29a      	uxth	r2, r3
 8000284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000288:	491d      	ldr	r1, [pc, #116]	; (8000300 <main+0x1a4>)
 800028a:	481e      	ldr	r0, [pc, #120]	; (8000304 <main+0x1a8>)
 800028c:	f003 f957 	bl	800353e <HAL_UART_Transmit>
	 if (adc[1] >= adc[0])
 8000290:	4b20      	ldr	r3, [pc, #128]	; (8000314 <main+0x1b8>)
 8000292:	885b      	ldrh	r3, [r3, #2]
 8000294:	b29a      	uxth	r2, r3
 8000296:	4b1f      	ldr	r3, [pc, #124]	; (8000314 <main+0x1b8>)
 8000298:	881b      	ldrh	r3, [r3, #0]
 800029a:	b29b      	uxth	r3, r3
 800029c:	429a      	cmp	r2, r3
 800029e:	d317      	bcc.n	80002d0 <main+0x174>
	 	 {
		 HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2); //остановим ШИМ
 80002a0:	2104      	movs	r1, #4
 80002a2:	481d      	ldr	r0, [pc, #116]	; (8000318 <main+0x1bc>)
 80002a4:	f002 fd70 	bl	8002d88 <HAL_TIM_PWM_Stop>
		 myConfigOC.Pulse = adc [1] - adc [0]; //впишем в нашу настройку длительности импульса ШИМ разницу между полученными значениями
 80002a8:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <main+0x1b8>)
 80002aa:	885b      	ldrh	r3, [r3, #2]
 80002ac:	b29b      	uxth	r3, r3
 80002ae:	461a      	mov	r2, r3
 80002b0:	4b18      	ldr	r3, [pc, #96]	; (8000314 <main+0x1b8>)
 80002b2:	881b      	ldrh	r3, [r3, #0]
 80002b4:	b29b      	uxth	r3, r3
 80002b6:	1ad3      	subs	r3, r2, r3
 80002b8:	60bb      	str	r3, [r7, #8]
		 HAL_TIM_PWM_ConfigChannel (&htim3, &myConfigOC, TIM_CHANNEL_2); //запишем новую настройку
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2204      	movs	r2, #4
 80002be:	4619      	mov	r1, r3
 80002c0:	4815      	ldr	r0, [pc, #84]	; (8000318 <main+0x1bc>)
 80002c2:	f002 fdc5 	bl	8002e50 <HAL_TIM_PWM_ConfigChannel>
		 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //запустим ШИМ
 80002c6:	2104      	movs	r1, #4
 80002c8:	4813      	ldr	r0, [pc, #76]	; (8000318 <main+0x1bc>)
 80002ca:	f002 fcbb 	bl	8002c44 <HAL_TIM_PWM_Start>
 80002ce:	e003      	b.n	80002d8 <main+0x17c>
	 	 }
	 else
		 HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80002d0:	2104      	movs	r1, #4
 80002d2:	4811      	ldr	r0, [pc, #68]	; (8000318 <main+0x1bc>)
 80002d4:	f002 fd58 	bl	8002d88 <HAL_TIM_PWM_Stop>
	 adc[0] = 0; adc[1] = 0; //обнулим принятые значения АЦП
 80002d8:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <main+0x1b8>)
 80002da:	2200      	movs	r2, #0
 80002dc:	801a      	strh	r2, [r3, #0]
 80002de:	4b0d      	ldr	r3, [pc, #52]	; (8000314 <main+0x1b8>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	805a      	strh	r2, [r3, #2]
	 HAL_Delay(250);
 80002e4:	20fa      	movs	r0, #250	; 0xfa
 80002e6:	f000 fc33 	bl	8000b50 <HAL_Delay>
	 HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 2); // запускаем преобразование сигнала АЦП1
 80002ea:	2202      	movs	r2, #2
 80002ec:	4909      	ldr	r1, [pc, #36]	; (8000314 <main+0x1b8>)
 80002ee:	4807      	ldr	r0, [pc, #28]	; (800030c <main+0x1b0>)
 80002f0:	f000 fd2a 	bl	8000d48 <HAL_ADC_Start_DMA>
 if (flag)
 80002f4:	e7a6      	b.n	8000244 <main+0xe8>
 80002f6:	bf00      	nop
 80002f8:	40011000 	.word	0x40011000
 80002fc:	08004104 	.word	0x08004104
 8000300:	200001a0 	.word	0x200001a0
 8000304:	20000118 	.word	0x20000118
 8000308:	0800411c 	.word	0x0800411c
 800030c:	200000e8 	.word	0x200000e8
 8000310:	0800412c 	.word	0x0800412c
 8000314:	20000090 	.word	0x20000090
 8000318:	200000a0 	.word	0x200000a0
 800031c:	2000008c 	.word	0x2000008c
 8000320:	0800413c 	.word	0x0800413c

08000324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b094      	sub	sp, #80	; 0x50
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800032e:	2228      	movs	r2, #40	; 0x28
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f003 fa98 	bl	8003868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000338:	f107 0314 	add.w	r3, r7, #20
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	605a      	str	r2, [r3, #4]
 8000342:	609a      	str	r2, [r3, #8]
 8000344:	60da      	str	r2, [r3, #12]
 8000346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000354:	2301      	movs	r3, #1
 8000356:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800035c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000362:	2301      	movs	r3, #1
 8000364:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000366:	2302      	movs	r3, #2
 8000368:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800036a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800036e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000370:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000374:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800037a:	4618      	mov	r0, r3
 800037c:	f001 fe7e 	bl	800207c <HAL_RCC_OscConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000386:	f000 f99f 	bl	80006c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038a:	230f      	movs	r3, #15
 800038c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038e:	2302      	movs	r3, #2
 8000390:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800039a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800039c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003a0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003a2:	f107 0314 	add.w	r3, r7, #20
 80003a6:	2101      	movs	r1, #1
 80003a8:	4618      	mov	r0, r3
 80003aa:	f002 f8e7 	bl	800257c <HAL_RCC_ClockConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80003b4:	f000 f988 	bl	80006c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003b8:	2302      	movs	r3, #2
 80003ba:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	4618      	mov	r0, r3
 80003c4:	f002 fa74 	bl	80028b0 <HAL_RCCEx_PeriphCLKConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80003ce:	f000 f97b 	bl	80006c8 <Error_Handler>
  }
}
 80003d2:	bf00      	nop
 80003d4:	3750      	adds	r7, #80	; 0x50
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003ec:	4b20      	ldr	r3, [pc, #128]	; (8000470 <MX_ADC1_Init+0x94>)
 80003ee:	4a21      	ldr	r2, [pc, #132]	; (8000474 <MX_ADC1_Init+0x98>)
 80003f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003f2:	4b1f      	ldr	r3, [pc, #124]	; (8000470 <MX_ADC1_Init+0x94>)
 80003f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003fa:	4b1d      	ldr	r3, [pc, #116]	; (8000470 <MX_ADC1_Init+0x94>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000400:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <MX_ADC1_Init+0x94>)
 8000402:	2200      	movs	r2, #0
 8000404:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000406:	4b1a      	ldr	r3, [pc, #104]	; (8000470 <MX_ADC1_Init+0x94>)
 8000408:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800040c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800040e:	4b18      	ldr	r3, [pc, #96]	; (8000470 <MX_ADC1_Init+0x94>)
 8000410:	2200      	movs	r2, #0
 8000412:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000414:	4b16      	ldr	r3, [pc, #88]	; (8000470 <MX_ADC1_Init+0x94>)
 8000416:	2202      	movs	r2, #2
 8000418:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800041a:	4815      	ldr	r0, [pc, #84]	; (8000470 <MX_ADC1_Init+0x94>)
 800041c:	f000 fbbc 	bl	8000b98 <HAL_ADC_Init>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000426:	f000 f94f 	bl	80006c8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800042a:	2300      	movs	r3, #0
 800042c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800042e:	2301      	movs	r3, #1
 8000430:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000432:	2300      	movs	r3, #0
 8000434:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	4619      	mov	r1, r3
 800043a:	480d      	ldr	r0, [pc, #52]	; (8000470 <MX_ADC1_Init+0x94>)
 800043c:	f000 fe82 	bl	8001144 <HAL_ADC_ConfigChannel>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000446:	f000 f93f 	bl	80006c8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800044a:	2301      	movs	r3, #1
 800044c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800044e:	2302      	movs	r3, #2
 8000450:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	4619      	mov	r1, r3
 8000456:	4806      	ldr	r0, [pc, #24]	; (8000470 <MX_ADC1_Init+0x94>)
 8000458:	f000 fe74 	bl	8001144 <HAL_ADC_ConfigChannel>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000462:	f000 f931 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000466:	bf00      	nop
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	200000e8 	.word	0x200000e8
 8000474:	40012400 	.word	0x40012400

08000478 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08a      	sub	sp, #40	; 0x28
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800047e:	f107 0320 	add.w	r3, r7, #32
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]
 8000494:	611a      	str	r2, [r3, #16]
 8000496:	615a      	str	r2, [r3, #20]
 8000498:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800049a:	4b22      	ldr	r3, [pc, #136]	; (8000524 <MX_TIM3_Init+0xac>)
 800049c:	4a22      	ldr	r2, [pc, #136]	; (8000528 <MX_TIM3_Init+0xb0>)
 800049e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 80004a0:	4b20      	ldr	r3, [pc, #128]	; (8000524 <MX_TIM3_Init+0xac>)
 80004a2:	2204      	movs	r2, #4
 80004a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a6:	4b1f      	ldr	r3, [pc, #124]	; (8000524 <MX_TIM3_Init+0xac>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4095;
 80004ac:	4b1d      	ldr	r3, [pc, #116]	; (8000524 <MX_TIM3_Init+0xac>)
 80004ae:	f640 72ff 	movw	r2, #4095	; 0xfff
 80004b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b4:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <MX_TIM3_Init+0xac>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ba:	4b1a      	ldr	r3, [pc, #104]	; (8000524 <MX_TIM3_Init+0xac>)
 80004bc:	2200      	movs	r2, #0
 80004be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80004c0:	4818      	ldr	r0, [pc, #96]	; (8000524 <MX_TIM3_Init+0xac>)
 80004c2:	f002 fb6f 	bl	8002ba4 <HAL_TIM_PWM_Init>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80004cc:	f000 f8fc 	bl	80006c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d0:	2300      	movs	r3, #0
 80004d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d4:	2300      	movs	r3, #0
 80004d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004d8:	f107 0320 	add.w	r3, r7, #32
 80004dc:	4619      	mov	r1, r3
 80004de:	4811      	ldr	r0, [pc, #68]	; (8000524 <MX_TIM3_Init+0xac>)
 80004e0:	f002 ff82 	bl	80033e8 <HAL_TIMEx_MasterConfigSynchronization>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80004ea:	f000 f8ed 	bl	80006c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ee:	2360      	movs	r3, #96	; 0x60
 80004f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3005;
 80004f2:	f640 33bd 	movw	r3, #3005	; 0xbbd
 80004f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2204      	movs	r2, #4
 8000504:	4619      	mov	r1, r3
 8000506:	4807      	ldr	r0, [pc, #28]	; (8000524 <MX_TIM3_Init+0xac>)
 8000508:	f002 fca2 	bl	8002e50 <HAL_TIM_PWM_ConfigChannel>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000512:	f000 f8d9 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000516:	4803      	ldr	r0, [pc, #12]	; (8000524 <MX_TIM3_Init+0xac>)
 8000518:	f000 f99c 	bl	8000854 <HAL_TIM_MspPostInit>

}
 800051c:	bf00      	nop
 800051e:	3728      	adds	r7, #40	; 0x28
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	200000a0 	.word	0x200000a0
 8000528:	40000400 	.word	0x40000400

0800052c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000530:	4b11      	ldr	r3, [pc, #68]	; (8000578 <MX_USART1_UART_Init+0x4c>)
 8000532:	4a12      	ldr	r2, [pc, #72]	; (800057c <MX_USART1_UART_Init+0x50>)
 8000534:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000536:	4b10      	ldr	r3, [pc, #64]	; (8000578 <MX_USART1_UART_Init+0x4c>)
 8000538:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800053c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <MX_USART1_UART_Init+0x4c>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <MX_USART1_UART_Init+0x4c>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <MX_USART1_UART_Init+0x4c>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000550:	4b09      	ldr	r3, [pc, #36]	; (8000578 <MX_USART1_UART_Init+0x4c>)
 8000552:	220c      	movs	r2, #12
 8000554:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <MX_USART1_UART_Init+0x4c>)
 8000558:	2200      	movs	r2, #0
 800055a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <MX_USART1_UART_Init+0x4c>)
 800055e:	2200      	movs	r2, #0
 8000560:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000562:	4805      	ldr	r0, [pc, #20]	; (8000578 <MX_USART1_UART_Init+0x4c>)
 8000564:	f002 ff9e 	bl	80034a4 <HAL_UART_Init>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800056e:	f000 f8ab 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000118 	.word	0x20000118
 800057c:	40013800 	.word	0x40013800

08000580 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_DMA_Init+0x38>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <MX_DMA_Init+0x38>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_DMA_Init+0x38>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	200b      	movs	r0, #11
 80005a4:	f001 f955 	bl	8001852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005a8:	200b      	movs	r0, #11
 80005aa:	f001 f96e 	bl	800188a <HAL_NVIC_EnableIRQ>

}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000

080005bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 0310 	add.w	r3, r7, #16
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d0:	4b1e      	ldr	r3, [pc, #120]	; (800064c <MX_GPIO_Init+0x90>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a1d      	ldr	r2, [pc, #116]	; (800064c <MX_GPIO_Init+0x90>)
 80005d6:	f043 0310 	orr.w	r3, r3, #16
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b1b      	ldr	r3, [pc, #108]	; (800064c <MX_GPIO_Init+0x90>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0310 	and.w	r3, r3, #16
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e8:	4b18      	ldr	r3, [pc, #96]	; (800064c <MX_GPIO_Init+0x90>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a17      	ldr	r2, [pc, #92]	; (800064c <MX_GPIO_Init+0x90>)
 80005ee:	f043 0320 	orr.w	r3, r3, #32
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_GPIO_Init+0x90>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0320 	and.w	r3, r3, #32
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_GPIO_Init+0x90>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a11      	ldr	r2, [pc, #68]	; (800064c <MX_GPIO_Init+0x90>)
 8000606:	f043 0304 	orr.w	r3, r3, #4
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_GPIO_Init+0x90>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0304 	and.w	r3, r3, #4
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <MX_GPIO_Init+0x94>)
 8000620:	f001 fcfa 	bl	8002018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000628:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2302      	movs	r3, #2
 8000634:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	4619      	mov	r1, r3
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_GPIO_Init+0x94>)
 800063e:	f001 fb67 	bl	8001d10 <HAL_GPIO_Init>

}
 8000642:	bf00      	nop
 8000644:	3720      	adds	r7, #32
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000
 8000650:	40011000 	.word	0x40011000

08000654 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a05      	ldr	r2, [pc, #20]	; (8000678 <HAL_ADC_ConvCpltCallback+0x24>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d102      	bne.n	800066c <HAL_ADC_ConvCpltCallback+0x18>
    {
    	flag = 1;
 8000666:	4b05      	ldr	r3, [pc, #20]	; (800067c <HAL_ADC_ConvCpltCallback+0x28>)
 8000668:	2201      	movs	r2, #1
 800066a:	701a      	strb	r2, [r3, #0]
    }
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40012400 	.word	0x40012400
 800067c:	2000008c 	.word	0x2000008c

08000680 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <HAL_ADC_ErrorCallback+0x38>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d10e      	bne.n	80006b0 <HAL_ADC_ErrorCallback+0x30>
	    {
		sprintf (msg_UART_TX, "ADC1_error\n\r");
 8000692:	490a      	ldr	r1, [pc, #40]	; (80006bc <HAL_ADC_ErrorCallback+0x3c>)
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <HAL_ADC_ErrorCallback+0x40>)
 8000696:	f003 f8ef 	bl	8003878 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg_UART_TX, strlen(msg_UART_TX), 1000);
 800069a:	4809      	ldr	r0, [pc, #36]	; (80006c0 <HAL_ADC_ErrorCallback+0x40>)
 800069c:	f7ff fd56 	bl	800014c <strlen>
 80006a0:	4603      	mov	r3, r0
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a8:	4905      	ldr	r1, [pc, #20]	; (80006c0 <HAL_ADC_ErrorCallback+0x40>)
 80006aa:	4806      	ldr	r0, [pc, #24]	; (80006c4 <HAL_ADC_ErrorCallback+0x44>)
 80006ac:	f002 ff47 	bl	800353e <HAL_UART_Transmit>
	    }
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40012400 	.word	0x40012400
 80006bc:	0800414c 	.word	0x0800414c
 80006c0:	200001a0 	.word	0x200001a0
 80006c4:	20000118 	.word	0x20000118

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <Error_Handler+0x8>
	...

080006d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <HAL_MspInit+0x5c>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	4a14      	ldr	r2, [pc, #80]	; (8000730 <HAL_MspInit+0x5c>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6193      	str	r3, [r2, #24]
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_MspInit+0x5c>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <HAL_MspInit+0x5c>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	4a0e      	ldr	r2, [pc, #56]	; (8000730 <HAL_MspInit+0x5c>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fc:	61d3      	str	r3, [r2, #28]
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <HAL_MspInit+0x5c>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <HAL_MspInit+0x60>)
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	4a04      	ldr	r2, [pc, #16]	; (8000734 <HAL_MspInit+0x60>)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	40021000 	.word	0x40021000
 8000734:	40010000 	.word	0x40010000

08000738 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a2c      	ldr	r2, [pc, #176]	; (8000804 <HAL_ADC_MspInit+0xcc>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d151      	bne.n	80007fc <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000758:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <HAL_ADC_MspInit+0xd0>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a2a      	ldr	r2, [pc, #168]	; (8000808 <HAL_ADC_MspInit+0xd0>)
 800075e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b28      	ldr	r3, [pc, #160]	; (8000808 <HAL_ADC_MspInit+0xd0>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000770:	4b25      	ldr	r3, [pc, #148]	; (8000808 <HAL_ADC_MspInit+0xd0>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4a24      	ldr	r2, [pc, #144]	; (8000808 <HAL_ADC_MspInit+0xd0>)
 8000776:	f043 0304 	orr.w	r3, r3, #4
 800077a:	6193      	str	r3, [r2, #24]
 800077c:	4b22      	ldr	r3, [pc, #136]	; (8000808 <HAL_ADC_MspInit+0xd0>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f003 0304 	and.w	r3, r3, #4
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000788:	2303      	movs	r3, #3
 800078a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800078c:	2303      	movs	r3, #3
 800078e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	4619      	mov	r1, r3
 8000796:	481d      	ldr	r0, [pc, #116]	; (800080c <HAL_ADC_MspInit+0xd4>)
 8000798:	f001 faba 	bl	8001d10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800079c:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <HAL_ADC_MspInit+0xd8>)
 800079e:	4a1d      	ldr	r2, [pc, #116]	; (8000814 <HAL_ADC_MspInit+0xdc>)
 80007a0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007a2:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <HAL_ADC_MspInit+0xd8>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007a8:	4b19      	ldr	r3, [pc, #100]	; (8000810 <HAL_ADC_MspInit+0xd8>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <HAL_ADC_MspInit+0xd8>)
 80007b0:	2280      	movs	r2, #128	; 0x80
 80007b2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <HAL_ADC_MspInit+0xd8>)
 80007b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007ba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <HAL_ADC_MspInit+0xd8>)
 80007be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007c2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <HAL_ADC_MspInit+0xd8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <HAL_ADC_MspInit+0xd8>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007d0:	480f      	ldr	r0, [pc, #60]	; (8000810 <HAL_ADC_MspInit+0xd8>)
 80007d2:	f001 f875 	bl	80018c0 <HAL_DMA_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80007dc:	f7ff ff74 	bl	80006c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a0b      	ldr	r2, [pc, #44]	; (8000810 <HAL_ADC_MspInit+0xd8>)
 80007e4:	621a      	str	r2, [r3, #32]
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <HAL_ADC_MspInit+0xd8>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	2012      	movs	r0, #18
 80007f2:	f001 f82e 	bl	8001852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007f6:	2012      	movs	r0, #18
 80007f8:	f001 f847 	bl	800188a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007fc:	bf00      	nop
 80007fe:	3720      	adds	r7, #32
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40012400 	.word	0x40012400
 8000808:	40021000 	.word	0x40021000
 800080c:	40010800 	.word	0x40010800
 8000810:	2000015c 	.word	0x2000015c
 8000814:	40020008 	.word	0x40020008

08000818 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a09      	ldr	r2, [pc, #36]	; (800084c <HAL_TIM_PWM_MspInit+0x34>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d10b      	bne.n	8000842 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <HAL_TIM_PWM_MspInit+0x38>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	4a08      	ldr	r2, [pc, #32]	; (8000850 <HAL_TIM_PWM_MspInit+0x38>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	61d3      	str	r3, [r2, #28]
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_TIM_PWM_MspInit+0x38>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000842:	bf00      	nop
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	40000400 	.word	0x40000400
 8000850:	40021000 	.word	0x40021000

08000854 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a0f      	ldr	r2, [pc, #60]	; (80008ac <HAL_TIM_MspPostInit+0x58>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d117      	bne.n	80008a4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <HAL_TIM_MspPostInit+0x5c>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a0d      	ldr	r2, [pc, #52]	; (80008b0 <HAL_TIM_MspPostInit+0x5c>)
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <HAL_TIM_MspPostInit+0x5c>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f003 0304 	and.w	r3, r3, #4
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2302      	movs	r3, #2
 8000896:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	4619      	mov	r1, r3
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <HAL_TIM_MspPostInit+0x60>)
 80008a0:	f001 fa36 	bl	8001d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008a4:	bf00      	nop
 80008a6:	3720      	adds	r7, #32
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40000400 	.word	0x40000400
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40010800 	.word	0x40010800

080008b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <HAL_UART_MspInit+0x8c>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d131      	bne.n	800093c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008d8:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <HAL_UART_MspInit+0x90>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a1a      	ldr	r2, [pc, #104]	; (8000948 <HAL_UART_MspInit+0x90>)
 80008de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b18      	ldr	r3, [pc, #96]	; (8000948 <HAL_UART_MspInit+0x90>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <HAL_UART_MspInit+0x90>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	4a14      	ldr	r2, [pc, #80]	; (8000948 <HAL_UART_MspInit+0x90>)
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <HAL_UART_MspInit+0x90>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f003 0304 	and.w	r3, r3, #4
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800090c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 0310 	add.w	r3, r7, #16
 800091a:	4619      	mov	r1, r3
 800091c:	480b      	ldr	r0, [pc, #44]	; (800094c <HAL_UART_MspInit+0x94>)
 800091e:	f001 f9f7 	bl	8001d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000926:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	4619      	mov	r1, r3
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <HAL_UART_MspInit+0x94>)
 8000938:	f001 f9ea 	bl	8001d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800093c:	bf00      	nop
 800093e:	3720      	adds	r7, #32
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40013800 	.word	0x40013800
 8000948:	40021000 	.word	0x40021000
 800094c:	40010800 	.word	0x40010800

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr

0800097a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr

08000986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr

08000992 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000996:	f000 f8bf 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <DMA1_Channel1_IRQHandler+0x10>)
 80009a6:	f001 f87f 	bl	8001aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000015c 	.word	0x2000015c

080009b4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <ADC1_2_IRQHandler+0x10>)
 80009ba:	f000 faee 	bl	8000f9a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200000e8 	.word	0x200000e8

080009c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d0:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <_sbrk+0x5c>)
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <_sbrk+0x60>)
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d102      	bne.n	80009ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <_sbrk+0x64>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <_sbrk+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <_sbrk+0x64>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d207      	bcs.n	8000a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f8:	f002 ff0c 	bl	8003814 <__errno>
 80009fc:	4603      	mov	r3, r0
 80009fe:	220c      	movs	r2, #12
 8000a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	e009      	b.n	8000a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <_sbrk+0x64>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a0e:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <_sbrk+0x64>)
 8000a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20005000 	.word	0x20005000
 8000a28:	00000400 	.word	0x00000400
 8000a2c:	20000094 	.word	0x20000094
 8000a30:	200001f0 	.word	0x200001f0

08000a34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a42:	490d      	ldr	r1, [pc, #52]	; (8000a78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a44:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a58:	4c0a      	ldr	r4, [pc, #40]	; (8000a84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a66:	f7ff ffe5 	bl	8000a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f002 fed9 	bl	8003820 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a6e:	f7ff fb75 	bl	800015c <main>
  bx lr
 8000a72:	4770      	bx	lr
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a7c:	080041d0 	.word	0x080041d0
  ldr r2, =_sbss
 8000a80:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a84:	200001ec 	.word	0x200001ec

08000a88 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <CAN1_RX1_IRQHandler>
	...

08000a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_Init+0x28>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_Init+0x28>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 fecd 	bl	800183c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f000 f808 	bl	8000ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f7ff fe14 	bl	80006d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40022000 	.word	0x40022000

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x54>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x58>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 fee5 	bl	80018a6 <HAL_SYSTICK_Config>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00e      	b.n	8000b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d80a      	bhi.n	8000b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f000 fead 	bl	8001852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <HAL_InitTick+0x5c>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000004 	.word	0x20000004

08000b18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_IncTick+0x1c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <HAL_IncTick+0x20>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a03      	ldr	r2, [pc, #12]	; (8000b38 <HAL_IncTick+0x20>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	20000008 	.word	0x20000008
 8000b38:	200001d8 	.word	0x200001d8

08000b3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b02      	ldr	r3, [pc, #8]	; (8000b4c <HAL_GetTick+0x10>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	200001d8 	.word	0x200001d8

08000b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b58:	f7ff fff0 	bl	8000b3c <HAL_GetTick>
 8000b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b68:	d005      	beq.n	8000b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <HAL_Delay+0x44>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b76:	bf00      	nop
 8000b78:	f7ff ffe0 	bl	8000b3c <HAL_GetTick>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d8f7      	bhi.n	8000b78 <HAL_Delay+0x28>
  {
  }
}
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000008 	.word	0x20000008

08000b98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d101      	bne.n	8000bba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e0be      	b.n	8000d38 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d109      	bne.n	8000bdc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff fdae 	bl	8000738 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 fc03 	bl	80013e8 <ADC_ConversionStop_Disable>
 8000be2:	4603      	mov	r3, r0
 8000be4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bea:	f003 0310 	and.w	r3, r3, #16
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f040 8099 	bne.w	8000d26 <HAL_ADC_Init+0x18e>
 8000bf4:	7dfb      	ldrb	r3, [r7, #23]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f040 8095 	bne.w	8000d26 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c00:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c04:	f023 0302 	bic.w	r3, r3, #2
 8000c08:	f043 0202 	orr.w	r2, r3, #2
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c18:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	7b1b      	ldrb	r3, [r3, #12]
 8000c1e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c20:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c30:	d003      	beq.n	8000c3a <HAL_ADC_Init+0xa2>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d102      	bne.n	8000c40 <HAL_ADC_Init+0xa8>
 8000c3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c3e:	e000      	b.n	8000c42 <HAL_ADC_Init+0xaa>
 8000c40:	2300      	movs	r3, #0
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	7d1b      	ldrb	r3, [r3, #20]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d119      	bne.n	8000c84 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	7b1b      	ldrb	r3, [r3, #12]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d109      	bne.n	8000c6c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	035a      	lsls	r2, r3, #13
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	e00b      	b.n	8000c84 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c70:	f043 0220 	orr.w	r2, r3, #32
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7c:	f043 0201 	orr.w	r2, r3, #1
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	430a      	orrs	r2, r1
 8000c96:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <HAL_ADC_Init+0x1a8>)
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	6812      	ldr	r2, [r2, #0]
 8000ca6:	68b9      	ldr	r1, [r7, #8]
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cb4:	d003      	beq.n	8000cbe <HAL_ADC_Init+0x126>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d104      	bne.n	8000cc8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	051b      	lsls	r3, r3, #20
 8000cc6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cce:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <HAL_ADC_Init+0x1ac>)
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d10b      	bne.n	8000d04 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf6:	f023 0303 	bic.w	r3, r3, #3
 8000cfa:	f043 0201 	orr.w	r2, r3, #1
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d02:	e018      	b.n	8000d36 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d08:	f023 0312 	bic.w	r3, r3, #18
 8000d0c:	f043 0210 	orr.w	r2, r3, #16
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d18:	f043 0201 	orr.w	r2, r3, #1
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d24:	e007      	b.n	8000d36 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2a:	f043 0210 	orr.w	r2, r3, #16
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	ffe1f7fd 	.word	0xffe1f7fd
 8000d44:	ff1f0efe 	.word	0xff1f0efe

08000d48 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a64      	ldr	r2, [pc, #400]	; (8000ef0 <HAL_ADC_Start_DMA+0x1a8>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d004      	beq.n	8000d6c <HAL_ADC_Start_DMA+0x24>
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a63      	ldr	r2, [pc, #396]	; (8000ef4 <HAL_ADC_Start_DMA+0x1ac>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d106      	bne.n	8000d7a <HAL_ADC_Start_DMA+0x32>
 8000d6c:	4b60      	ldr	r3, [pc, #384]	; (8000ef0 <HAL_ADC_Start_DMA+0x1a8>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f040 80b3 	bne.w	8000ee0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d101      	bne.n	8000d88 <HAL_ADC_Start_DMA+0x40>
 8000d84:	2302      	movs	r3, #2
 8000d86:	e0ae      	b.n	8000ee6 <HAL_ADC_Start_DMA+0x19e>
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000d90:	68f8      	ldr	r0, [r7, #12]
 8000d92:	f000 facf 	bl	8001334 <ADC_Enable>
 8000d96:	4603      	mov	r3, r0
 8000d98:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d9a:	7dfb      	ldrb	r3, [r7, #23]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	f040 809a 	bne.w	8000ed6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000daa:	f023 0301 	bic.w	r3, r3, #1
 8000dae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a4e      	ldr	r2, [pc, #312]	; (8000ef4 <HAL_ADC_Start_DMA+0x1ac>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d105      	bne.n	8000dcc <HAL_ADC_Start_DMA+0x84>
 8000dc0:	4b4b      	ldr	r3, [pc, #300]	; (8000ef0 <HAL_ADC_Start_DMA+0x1a8>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d115      	bne.n	8000df8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d026      	beq.n	8000e34 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000df6:	e01d      	b.n	8000e34 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a39      	ldr	r2, [pc, #228]	; (8000ef0 <HAL_ADC_Start_DMA+0x1a8>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d004      	beq.n	8000e18 <HAL_ADC_Start_DMA+0xd0>
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a38      	ldr	r2, [pc, #224]	; (8000ef4 <HAL_ADC_Start_DMA+0x1ac>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d10d      	bne.n	8000e34 <HAL_ADC_Start_DMA+0xec>
 8000e18:	4b35      	ldr	r3, [pc, #212]	; (8000ef0 <HAL_ADC_Start_DMA+0x1a8>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d007      	beq.n	8000e34 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e2c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d006      	beq.n	8000e4e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e44:	f023 0206 	bic.w	r2, r3, #6
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e4c:	e002      	b.n	8000e54 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2200      	movs	r2, #0
 8000e52:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	6a1b      	ldr	r3, [r3, #32]
 8000e60:	4a25      	ldr	r2, [pc, #148]	; (8000ef8 <HAL_ADC_Start_DMA+0x1b0>)
 8000e62:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	6a1b      	ldr	r3, [r3, #32]
 8000e68:	4a24      	ldr	r2, [pc, #144]	; (8000efc <HAL_ADC_Start_DMA+0x1b4>)
 8000e6a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	6a1b      	ldr	r3, [r3, #32]
 8000e70:	4a23      	ldr	r2, [pc, #140]	; (8000f00 <HAL_ADC_Start_DMA+0x1b8>)
 8000e72:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f06f 0202 	mvn.w	r2, #2
 8000e7c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e8c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6a18      	ldr	r0, [r3, #32]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	334c      	adds	r3, #76	; 0x4c
 8000e98:	4619      	mov	r1, r3
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f000 fd69 	bl	8001974 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000eac:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000eb0:	d108      	bne.n	8000ec4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000ec0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000ec2:	e00f      	b.n	8000ee4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689a      	ldr	r2, [r3, #8]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000ed2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000ed4:	e006      	b.n	8000ee4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000ede:	e001      	b.n	8000ee4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40012400 	.word	0x40012400
 8000ef4:	40012800 	.word	0x40012800
 8000ef8:	0800146b 	.word	0x0800146b
 8000efc:	080014e7 	.word	0x080014e7
 8000f00:	08001503 	.word	0x08001503

08000f04 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d101      	bne.n	8000f1e <HAL_ADC_Stop_DMA+0x1a>
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	e039      	b.n	8000f92 <HAL_ADC_Stop_DMA+0x8e>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2201      	movs	r2, #1
 8000f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f000 fa5e 	bl	80013e8 <ADC_ConversionStop_Disable>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d128      	bne.n	8000f88 <HAL_ADC_Stop_DMA+0x84>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f44:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a1b      	ldr	r3, [r3, #32]
 8000f4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d11a      	bne.n	8000f88 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 fd6b 	bl	8001a32 <HAL_DMA_Abort>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10a      	bne.n	8000f7c <HAL_ADC_Stop_DMA+0x78>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f6e:	f023 0301 	bic.w	r3, r3, #1
 8000f72:	f043 0201 	orr.w	r2, r3, #1
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	629a      	str	r2, [r3, #40]	; 0x28
 8000f7a:	e005      	b.n	8000f88 <HAL_ADC_Stop_DMA+0x84>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0320 	and.w	r3, r3, #32
 8000fac:	2b20      	cmp	r3, #32
 8000fae:	d140      	bne.n	8001032 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d139      	bne.n	8001032 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc2:	f003 0310 	and.w	r3, r3, #16
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d105      	bne.n	8000fd6 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000fe0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000fe4:	d11d      	bne.n	8001022 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d119      	bne.n	8001022 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 0220 	bic.w	r2, r2, #32
 8000ffc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001002:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d105      	bne.n	8001022 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101a:	f043 0201 	orr.w	r2, r3, #1
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff fb16 	bl	8000654 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f06f 0212 	mvn.w	r2, #18
 8001030:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800103c:	2b80      	cmp	r3, #128	; 0x80
 800103e:	d14f      	bne.n	80010e0 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	2b04      	cmp	r3, #4
 800104c:	d148      	bne.n	80010e0 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001052:	f003 0310 	and.w	r3, r3, #16
 8001056:	2b00      	cmp	r3, #0
 8001058:	d105      	bne.n	8001066 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001070:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001074:	d012      	beq.n	800109c <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001080:	2b00      	cmp	r3, #0
 8001082:	d125      	bne.n	80010d0 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800108e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001092:	d11d      	bne.n	80010d0 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001098:	2b00      	cmp	r3, #0
 800109a:	d119      	bne.n	80010d0 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010aa:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d105      	bne.n	80010d0 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c8:	f043 0201 	orr.w	r2, r3, #1
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 fadd 	bl	8001690 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f06f 020c 	mvn.w	r2, #12
 80010de:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ea:	2b40      	cmp	r3, #64	; 0x40
 80010ec:	d114      	bne.n	8001118 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d10d      	bne.n	8001118 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001100:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 f812 	bl	8001132 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f06f 0201 	mvn.w	r2, #1
 8001116:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr

08001132 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800115c:	2b01      	cmp	r3, #1
 800115e:	d101      	bne.n	8001164 <HAL_ADC_ConfigChannel+0x20>
 8001160:	2302      	movs	r3, #2
 8001162:	e0dc      	b.n	800131e <HAL_ADC_ConfigChannel+0x1da>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b06      	cmp	r3, #6
 8001172:	d81c      	bhi.n	80011ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	3b05      	subs	r3, #5
 8001186:	221f      	movs	r2, #31
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	4019      	ands	r1, r3
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	4613      	mov	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	3b05      	subs	r3, #5
 80011a0:	fa00 f203 	lsl.w	r2, r0, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	430a      	orrs	r2, r1
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34
 80011ac:	e03c      	b.n	8001228 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b0c      	cmp	r3, #12
 80011b4:	d81c      	bhi.n	80011f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	3b23      	subs	r3, #35	; 0x23
 80011c8:	221f      	movs	r2, #31
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	4019      	ands	r1, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	6818      	ldr	r0, [r3, #0]
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	3b23      	subs	r3, #35	; 0x23
 80011e2:	fa00 f203 	lsl.w	r2, r0, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	631a      	str	r2, [r3, #48]	; 0x30
 80011ee:	e01b      	b.n	8001228 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	3b41      	subs	r3, #65	; 0x41
 8001202:	221f      	movs	r2, #31
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	4019      	ands	r1, r3
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	6818      	ldr	r0, [r3, #0]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	3b41      	subs	r3, #65	; 0x41
 800121c:	fa00 f203 	lsl.w	r2, r0, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	430a      	orrs	r2, r1
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b09      	cmp	r3, #9
 800122e:	d91c      	bls.n	800126a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	68d9      	ldr	r1, [r3, #12]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	3b1e      	subs	r3, #30
 8001242:	2207      	movs	r2, #7
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	4019      	ands	r1, r3
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	6898      	ldr	r0, [r3, #8]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	3b1e      	subs	r3, #30
 800125c:	fa00 f203 	lsl.w	r2, r0, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	430a      	orrs	r2, r1
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	e019      	b.n	800129e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6919      	ldr	r1, [r3, #16]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	2207      	movs	r2, #7
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	4019      	ands	r1, r3
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	6898      	ldr	r0, [r3, #8]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4613      	mov	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4413      	add	r3, r2
 8001292:	fa00 f203 	lsl.w	r2, r0, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b10      	cmp	r3, #16
 80012a4:	d003      	beq.n	80012ae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012aa:	2b11      	cmp	r3, #17
 80012ac:	d132      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a1d      	ldr	r2, [pc, #116]	; (8001328 <HAL_ADC_ConfigChannel+0x1e4>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d125      	bne.n	8001304 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d126      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80012d4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b10      	cmp	r3, #16
 80012dc:	d11a      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <HAL_ADC_ConfigChannel+0x1e8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a13      	ldr	r2, [pc, #76]	; (8001330 <HAL_ADC_ConfigChannel+0x1ec>)
 80012e4:	fba2 2303 	umull	r2, r3, r2, r3
 80012e8:	0c9a      	lsrs	r2, r3, #18
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012f4:	e002      	b.n	80012fc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f9      	bne.n	80012f6 <HAL_ADC_ConfigChannel+0x1b2>
 8001302:	e007      	b.n	8001314 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001308:	f043 0220 	orr.w	r2, r3, #32
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800131c:	7bfb      	ldrb	r3, [r7, #15]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	40012400 	.word	0x40012400
 800132c:	20000000 	.word	0x20000000
 8001330:	431bde83 	.word	0x431bde83

08001334 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b01      	cmp	r3, #1
 8001350:	d040      	beq.n	80013d4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f042 0201 	orr.w	r2, r2, #1
 8001360:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001362:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <ADC_Enable+0xac>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a1f      	ldr	r2, [pc, #124]	; (80013e4 <ADC_Enable+0xb0>)
 8001368:	fba2 2303 	umull	r2, r3, r2, r3
 800136c:	0c9b      	lsrs	r3, r3, #18
 800136e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001370:	e002      	b.n	8001378 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	3b01      	subs	r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f9      	bne.n	8001372 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800137e:	f7ff fbdd 	bl	8000b3c <HAL_GetTick>
 8001382:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001384:	e01f      	b.n	80013c6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001386:	f7ff fbd9 	bl	8000b3c <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d918      	bls.n	80013c6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d011      	beq.n	80013c6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a6:	f043 0210 	orr.w	r2, r3, #16
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b2:	f043 0201 	orr.w	r2, r3, #1
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e007      	b.n	80013d6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d1d8      	bne.n	8001386 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000000 	.word	0x20000000
 80013e4:	431bde83 	.word	0x431bde83

080013e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d12e      	bne.n	8001460 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0201 	bic.w	r2, r2, #1
 8001410:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001412:	f7ff fb93 	bl	8000b3c <HAL_GetTick>
 8001416:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001418:	e01b      	b.n	8001452 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800141a:	f7ff fb8f 	bl	8000b3c <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d914      	bls.n	8001452 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b01      	cmp	r3, #1
 8001434:	d10d      	bne.n	8001452 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143a:	f043 0210 	orr.w	r2, r3, #16
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001446:	f043 0201 	orr.w	r2, r3, #1
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e007      	b.n	8001462 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b01      	cmp	r3, #1
 800145e:	d0dc      	beq.n	800141a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b084      	sub	sp, #16
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001480:	2b00      	cmp	r3, #0
 8001482:	d127      	bne.n	80014d4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001488:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800149a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800149e:	d115      	bne.n	80014cc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d111      	bne.n	80014cc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d105      	bne.n	80014cc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	f043 0201 	orr.w	r2, r3, #1
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f7ff f8c1 	bl	8000654 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80014d2:	e004      	b.n	80014de <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	4798      	blx	r3
}
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f7ff fe13 	bl	8001120 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b084      	sub	sp, #16
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001514:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001520:	f043 0204 	orr.w	r2, r3, #4
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f7ff f8a9 	bl	8000680 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800154e:	2b01      	cmp	r3, #1
 8001550:	d101      	bne.n	8001556 <HAL_ADCEx_Calibration_Start+0x1e>
 8001552:	2302      	movs	r3, #2
 8001554:	e095      	b.n	8001682 <HAL_ADCEx_Calibration_Start+0x14a>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ff42 	bl	80013e8 <ADC_ConversionStop_Disable>
 8001564:	4603      	mov	r3, r0
 8001566:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001568:	7dfb      	ldrb	r3, [r7, #23]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f040 8084 	bne.w	8001678 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001578:	f023 0302 	bic.w	r3, r3, #2
 800157c:	f043 0202 	orr.w	r2, r3, #2
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001584:	4b41      	ldr	r3, [pc, #260]	; (800168c <HAL_ADCEx_Calibration_Start+0x154>)
 8001586:	681c      	ldr	r4, [r3, #0]
 8001588:	2002      	movs	r0, #2
 800158a:	f001 fa47 	bl	8002a1c <HAL_RCCEx_GetPeriphCLKFreq>
 800158e:	4603      	mov	r3, r0
 8001590:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001594:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001596:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001598:	e002      	b.n	80015a0 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	3b01      	subs	r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f9      	bne.n	800159a <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fec4 	bl	8001334 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 0208 	orr.w	r2, r2, #8
 80015ba:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80015bc:	f7ff fabe 	bl	8000b3c <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80015c2:	e01b      	b.n	80015fc <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80015c4:	f7ff faba 	bl	8000b3c <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b0a      	cmp	r3, #10
 80015d0:	d914      	bls.n	80015fc <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00d      	beq.n	80015fc <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e4:	f023 0312 	bic.w	r3, r3, #18
 80015e8:	f043 0210 	orr.w	r2, r3, #16
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e042      	b.n	8001682 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1dc      	bne.n	80015c4 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f042 0204 	orr.w	r2, r2, #4
 8001618:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800161a:	f7ff fa8f 	bl	8000b3c <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001620:	e01b      	b.n	800165a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001622:	f7ff fa8b 	bl	8000b3c <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b0a      	cmp	r3, #10
 800162e:	d914      	bls.n	800165a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00d      	beq.n	800165a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001642:	f023 0312 	bic.w	r3, r3, #18
 8001646:	f043 0210 	orr.w	r2, r3, #16
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e013      	b.n	8001682 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1dc      	bne.n	8001622 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	f023 0303 	bic.w	r3, r3, #3
 8001670:	f043 0201 	orr.w	r2, r3, #1
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001680:	7dfb      	ldrb	r3, [r7, #23]
}
 8001682:	4618      	mov	r0, r3
 8001684:	371c      	adds	r7, #28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd90      	pop	{r4, r7, pc}
 800168a:	bf00      	nop
 800168c:	20000000 	.word	0x20000000

08001690 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
	...

080016a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d6:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	60d3      	str	r3, [r2, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <__NVIC_GetPriorityGrouping+0x18>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	f003 0307 	and.w	r3, r3, #7
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	2b00      	cmp	r3, #0
 8001718:	db0b      	blt.n	8001732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	f003 021f 	and.w	r2, r3, #31
 8001720:	4906      	ldr	r1, [pc, #24]	; (800173c <__NVIC_EnableIRQ+0x34>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	2001      	movs	r0, #1
 800172a:	fa00 f202 	lsl.w	r2, r0, r2
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	e000e100 	.word	0xe000e100

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	; (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	; (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
         );
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	; 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001808:	d301      	bcc.n	800180e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180a:	2301      	movs	r3, #1
 800180c:	e00f      	b.n	800182e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <SysTick_Config+0x40>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001816:	210f      	movs	r1, #15
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	f7ff ff90 	bl	8001740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <SysTick_Config+0x40>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001826:	4b04      	ldr	r3, [pc, #16]	; (8001838 <SysTick_Config+0x40>)
 8001828:	2207      	movs	r2, #7
 800182a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	e000e010 	.word	0xe000e010

0800183c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ff2d 	bl	80016a4 <__NVIC_SetPriorityGrouping>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001864:	f7ff ff42 	bl	80016ec <__NVIC_GetPriorityGrouping>
 8001868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f7ff ff90 	bl	8001794 <NVIC_EncodePriority>
 8001874:	4602      	mov	r2, r0
 8001876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff5f 	bl	8001740 <__NVIC_SetPriority>
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff35 	bl	8001708 <__NVIC_EnableIRQ>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ffa2 	bl	80017f8 <SysTick_Config>
 80018b4:	4603      	mov	r3, r0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e043      	b.n	800195e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	4b22      	ldr	r3, [pc, #136]	; (8001968 <HAL_DMA_Init+0xa8>)
 80018de:	4413      	add	r3, r2
 80018e0:	4a22      	ldr	r2, [pc, #136]	; (800196c <HAL_DMA_Init+0xac>)
 80018e2:	fba2 2303 	umull	r2, r3, r2, r3
 80018e6:	091b      	lsrs	r3, r3, #4
 80018e8:	009a      	lsls	r2, r3, #2
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a1f      	ldr	r2, [pc, #124]	; (8001970 <HAL_DMA_Init+0xb0>)
 80018f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2202      	movs	r2, #2
 80018f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800190a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800190e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001918:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001924:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001930:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	4313      	orrs	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	bffdfff8 	.word	0xbffdfff8
 800196c:	cccccccd 	.word	0xcccccccd
 8001970:	40020000 	.word	0x40020000

08001974 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
 8001980:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <HAL_DMA_Start_IT+0x20>
 8001990:	2302      	movs	r3, #2
 8001992:	e04a      	b.n	8001a2a <HAL_DMA_Start_IT+0xb6>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d13a      	bne.n	8001a1c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2202      	movs	r2, #2
 80019aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0201 	bic.w	r2, r2, #1
 80019c2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 f972 	bl	8001cb4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d008      	beq.n	80019ea <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 020e 	orr.w	r2, r2, #14
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	e00f      	b.n	8001a0a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0204 	bic.w	r2, r2, #4
 80019f8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f042 020a 	orr.w	r2, r2, #10
 8001a08:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f042 0201 	orr.w	r2, r2, #1
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	e005      	b.n	8001a28 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a24:	2302      	movs	r3, #2
 8001a26:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d008      	beq.n	8001a5a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e020      	b.n	8001a9c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 020e 	bic.w	r2, r2, #14
 8001a68:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0201 	bic.w	r2, r2, #1
 8001a78:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a82:	2101      	movs	r1, #1
 8001a84:	fa01 f202 	lsl.w	r2, r1, r2
 8001a88:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
	...

08001aa8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d04f      	beq.n	8001b70 <HAL_DMA_IRQHandler+0xc8>
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d04a      	beq.n	8001b70 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0320 	and.w	r3, r3, #32
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d107      	bne.n	8001af8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0204 	bic.w	r2, r2, #4
 8001af6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a66      	ldr	r2, [pc, #408]	; (8001c98 <HAL_DMA_IRQHandler+0x1f0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d029      	beq.n	8001b56 <HAL_DMA_IRQHandler+0xae>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a65      	ldr	r2, [pc, #404]	; (8001c9c <HAL_DMA_IRQHandler+0x1f4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d022      	beq.n	8001b52 <HAL_DMA_IRQHandler+0xaa>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a63      	ldr	r2, [pc, #396]	; (8001ca0 <HAL_DMA_IRQHandler+0x1f8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d01a      	beq.n	8001b4c <HAL_DMA_IRQHandler+0xa4>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a62      	ldr	r2, [pc, #392]	; (8001ca4 <HAL_DMA_IRQHandler+0x1fc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d012      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x9e>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a60      	ldr	r2, [pc, #384]	; (8001ca8 <HAL_DMA_IRQHandler+0x200>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00a      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x98>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a5f      	ldr	r2, [pc, #380]	; (8001cac <HAL_DMA_IRQHandler+0x204>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d102      	bne.n	8001b3a <HAL_DMA_IRQHandler+0x92>
 8001b34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b38:	e00e      	b.n	8001b58 <HAL_DMA_IRQHandler+0xb0>
 8001b3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b3e:	e00b      	b.n	8001b58 <HAL_DMA_IRQHandler+0xb0>
 8001b40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b44:	e008      	b.n	8001b58 <HAL_DMA_IRQHandler+0xb0>
 8001b46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b4a:	e005      	b.n	8001b58 <HAL_DMA_IRQHandler+0xb0>
 8001b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b50:	e002      	b.n	8001b58 <HAL_DMA_IRQHandler+0xb0>
 8001b52:	2340      	movs	r3, #64	; 0x40
 8001b54:	e000      	b.n	8001b58 <HAL_DMA_IRQHandler+0xb0>
 8001b56:	2304      	movs	r3, #4
 8001b58:	4a55      	ldr	r2, [pc, #340]	; (8001cb0 <HAL_DMA_IRQHandler+0x208>)
 8001b5a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 8094 	beq.w	8001c8e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b6e:	e08e      	b.n	8001c8e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	2202      	movs	r2, #2
 8001b76:	409a      	lsls	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d056      	beq.n	8001c2e <HAL_DMA_IRQHandler+0x186>
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d051      	beq.n	8001c2e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0320 	and.w	r3, r3, #32
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10b      	bne.n	8001bb0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 020a 	bic.w	r2, r2, #10
 8001ba6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a38      	ldr	r2, [pc, #224]	; (8001c98 <HAL_DMA_IRQHandler+0x1f0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d029      	beq.n	8001c0e <HAL_DMA_IRQHandler+0x166>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a37      	ldr	r2, [pc, #220]	; (8001c9c <HAL_DMA_IRQHandler+0x1f4>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d022      	beq.n	8001c0a <HAL_DMA_IRQHandler+0x162>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a35      	ldr	r2, [pc, #212]	; (8001ca0 <HAL_DMA_IRQHandler+0x1f8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d01a      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x15c>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a34      	ldr	r2, [pc, #208]	; (8001ca4 <HAL_DMA_IRQHandler+0x1fc>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d012      	beq.n	8001bfe <HAL_DMA_IRQHandler+0x156>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a32      	ldr	r2, [pc, #200]	; (8001ca8 <HAL_DMA_IRQHandler+0x200>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d00a      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0x150>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a31      	ldr	r2, [pc, #196]	; (8001cac <HAL_DMA_IRQHandler+0x204>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d102      	bne.n	8001bf2 <HAL_DMA_IRQHandler+0x14a>
 8001bec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bf0:	e00e      	b.n	8001c10 <HAL_DMA_IRQHandler+0x168>
 8001bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bf6:	e00b      	b.n	8001c10 <HAL_DMA_IRQHandler+0x168>
 8001bf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bfc:	e008      	b.n	8001c10 <HAL_DMA_IRQHandler+0x168>
 8001bfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c02:	e005      	b.n	8001c10 <HAL_DMA_IRQHandler+0x168>
 8001c04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c08:	e002      	b.n	8001c10 <HAL_DMA_IRQHandler+0x168>
 8001c0a:	2320      	movs	r3, #32
 8001c0c:	e000      	b.n	8001c10 <HAL_DMA_IRQHandler+0x168>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	4a27      	ldr	r2, [pc, #156]	; (8001cb0 <HAL_DMA_IRQHandler+0x208>)
 8001c12:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d034      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c2c:	e02f      	b.n	8001c8e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	2208      	movs	r2, #8
 8001c34:	409a      	lsls	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d028      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x1e8>
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d023      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 020e 	bic.w	r2, r2, #14
 8001c56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c60:	2101      	movs	r1, #1
 8001c62:	fa01 f202 	lsl.w	r2, r1, r2
 8001c66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d004      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	4798      	blx	r3
    }
  }
  return;
 8001c8e:	bf00      	nop
 8001c90:	bf00      	nop
}
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40020008 	.word	0x40020008
 8001c9c:	4002001c 	.word	0x4002001c
 8001ca0:	40020030 	.word	0x40020030
 8001ca4:	40020044 	.word	0x40020044
 8001ca8:	40020058 	.word	0x40020058
 8001cac:	4002006c 	.word	0x4002006c
 8001cb0:	40020000 	.word	0x40020000

08001cb4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cca:	2101      	movs	r1, #1
 8001ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b10      	cmp	r3, #16
 8001ce0:	d108      	bne.n	8001cf4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cf2:	e007      	b.n	8001d04 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	60da      	str	r2, [r3, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
	...

08001d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b08b      	sub	sp, #44	; 0x2c
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d22:	e169      	b.n	8001ff8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d24:	2201      	movs	r2, #1
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	f040 8158 	bne.w	8001ff2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	4a9a      	ldr	r2, [pc, #616]	; (8001fb0 <HAL_GPIO_Init+0x2a0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d05e      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d4c:	4a98      	ldr	r2, [pc, #608]	; (8001fb0 <HAL_GPIO_Init+0x2a0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d875      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d52:	4a98      	ldr	r2, [pc, #608]	; (8001fb4 <HAL_GPIO_Init+0x2a4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d058      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d58:	4a96      	ldr	r2, [pc, #600]	; (8001fb4 <HAL_GPIO_Init+0x2a4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d86f      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d5e:	4a96      	ldr	r2, [pc, #600]	; (8001fb8 <HAL_GPIO_Init+0x2a8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d052      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d64:	4a94      	ldr	r2, [pc, #592]	; (8001fb8 <HAL_GPIO_Init+0x2a8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d869      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d6a:	4a94      	ldr	r2, [pc, #592]	; (8001fbc <HAL_GPIO_Init+0x2ac>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d04c      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d70:	4a92      	ldr	r2, [pc, #584]	; (8001fbc <HAL_GPIO_Init+0x2ac>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d863      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d76:	4a92      	ldr	r2, [pc, #584]	; (8001fc0 <HAL_GPIO_Init+0x2b0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d046      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
 8001d7c:	4a90      	ldr	r2, [pc, #576]	; (8001fc0 <HAL_GPIO_Init+0x2b0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d85d      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d82:	2b12      	cmp	r3, #18
 8001d84:	d82a      	bhi.n	8001ddc <HAL_GPIO_Init+0xcc>
 8001d86:	2b12      	cmp	r3, #18
 8001d88:	d859      	bhi.n	8001e3e <HAL_GPIO_Init+0x12e>
 8001d8a:	a201      	add	r2, pc, #4	; (adr r2, 8001d90 <HAL_GPIO_Init+0x80>)
 8001d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d90:	08001e0b 	.word	0x08001e0b
 8001d94:	08001de5 	.word	0x08001de5
 8001d98:	08001df7 	.word	0x08001df7
 8001d9c:	08001e39 	.word	0x08001e39
 8001da0:	08001e3f 	.word	0x08001e3f
 8001da4:	08001e3f 	.word	0x08001e3f
 8001da8:	08001e3f 	.word	0x08001e3f
 8001dac:	08001e3f 	.word	0x08001e3f
 8001db0:	08001e3f 	.word	0x08001e3f
 8001db4:	08001e3f 	.word	0x08001e3f
 8001db8:	08001e3f 	.word	0x08001e3f
 8001dbc:	08001e3f 	.word	0x08001e3f
 8001dc0:	08001e3f 	.word	0x08001e3f
 8001dc4:	08001e3f 	.word	0x08001e3f
 8001dc8:	08001e3f 	.word	0x08001e3f
 8001dcc:	08001e3f 	.word	0x08001e3f
 8001dd0:	08001e3f 	.word	0x08001e3f
 8001dd4:	08001ded 	.word	0x08001ded
 8001dd8:	08001e01 	.word	0x08001e01
 8001ddc:	4a79      	ldr	r2, [pc, #484]	; (8001fc4 <HAL_GPIO_Init+0x2b4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d013      	beq.n	8001e0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001de2:	e02c      	b.n	8001e3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	623b      	str	r3, [r7, #32]
          break;
 8001dea:	e029      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	3304      	adds	r3, #4
 8001df2:	623b      	str	r3, [r7, #32]
          break;
 8001df4:	e024      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	3308      	adds	r3, #8
 8001dfc:	623b      	str	r3, [r7, #32]
          break;
 8001dfe:	e01f      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	330c      	adds	r3, #12
 8001e06:	623b      	str	r3, [r7, #32]
          break;
 8001e08:	e01a      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d102      	bne.n	8001e18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e12:	2304      	movs	r3, #4
 8001e14:	623b      	str	r3, [r7, #32]
          break;
 8001e16:	e013      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d105      	bne.n	8001e2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e20:	2308      	movs	r3, #8
 8001e22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69fa      	ldr	r2, [r7, #28]
 8001e28:	611a      	str	r2, [r3, #16]
          break;
 8001e2a:	e009      	b.n	8001e40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69fa      	ldr	r2, [r7, #28]
 8001e34:	615a      	str	r2, [r3, #20]
          break;
 8001e36:	e003      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
          break;
 8001e3c:	e000      	b.n	8001e40 <HAL_GPIO_Init+0x130>
          break;
 8001e3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2bff      	cmp	r3, #255	; 0xff
 8001e44:	d801      	bhi.n	8001e4a <HAL_GPIO_Init+0x13a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	e001      	b.n	8001e4e <HAL_GPIO_Init+0x13e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2bff      	cmp	r3, #255	; 0xff
 8001e54:	d802      	bhi.n	8001e5c <HAL_GPIO_Init+0x14c>
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	e002      	b.n	8001e62 <HAL_GPIO_Init+0x152>
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	3b08      	subs	r3, #8
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	210f      	movs	r1, #15
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	401a      	ands	r2, r3
 8001e74:	6a39      	ldr	r1, [r7, #32]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 80b1 	beq.w	8001ff2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e90:	4b4d      	ldr	r3, [pc, #308]	; (8001fc8 <HAL_GPIO_Init+0x2b8>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a4c      	ldr	r2, [pc, #304]	; (8001fc8 <HAL_GPIO_Init+0x2b8>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b4a      	ldr	r3, [pc, #296]	; (8001fc8 <HAL_GPIO_Init+0x2b8>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ea8:	4a48      	ldr	r2, [pc, #288]	; (8001fcc <HAL_GPIO_Init+0x2bc>)
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	3302      	adds	r3, #2
 8001eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a40      	ldr	r2, [pc, #256]	; (8001fd0 <HAL_GPIO_Init+0x2c0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d013      	beq.n	8001efc <HAL_GPIO_Init+0x1ec>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a3f      	ldr	r2, [pc, #252]	; (8001fd4 <HAL_GPIO_Init+0x2c4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d00d      	beq.n	8001ef8 <HAL_GPIO_Init+0x1e8>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a3e      	ldr	r2, [pc, #248]	; (8001fd8 <HAL_GPIO_Init+0x2c8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d007      	beq.n	8001ef4 <HAL_GPIO_Init+0x1e4>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a3d      	ldr	r2, [pc, #244]	; (8001fdc <HAL_GPIO_Init+0x2cc>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d101      	bne.n	8001ef0 <HAL_GPIO_Init+0x1e0>
 8001eec:	2303      	movs	r3, #3
 8001eee:	e006      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	e004      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e002      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <HAL_GPIO_Init+0x1ee>
 8001efc:	2300      	movs	r3, #0
 8001efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f00:	f002 0203 	and.w	r2, r2, #3
 8001f04:	0092      	lsls	r2, r2, #2
 8001f06:	4093      	lsls	r3, r2
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f0e:	492f      	ldr	r1, [pc, #188]	; (8001fcc <HAL_GPIO_Init+0x2bc>)
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	3302      	adds	r3, #2
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d006      	beq.n	8001f36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f28:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	492c      	ldr	r1, [pc, #176]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f36:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	4928      	ldr	r1, [pc, #160]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f50:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	4922      	ldr	r1, [pc, #136]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f5e:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	491e      	ldr	r1, [pc, #120]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d006      	beq.n	8001f86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f78:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	4918      	ldr	r1, [pc, #96]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	608b      	str	r3, [r1, #8]
 8001f84:	e006      	b.n	8001f94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	4914      	ldr	r1, [pc, #80]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d021      	beq.n	8001fe4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	490e      	ldr	r1, [pc, #56]	; (8001fe0 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60cb      	str	r3, [r1, #12]
 8001fac:	e021      	b.n	8001ff2 <HAL_GPIO_Init+0x2e2>
 8001fae:	bf00      	nop
 8001fb0:	10320000 	.word	0x10320000
 8001fb4:	10310000 	.word	0x10310000
 8001fb8:	10220000 	.word	0x10220000
 8001fbc:	10210000 	.word	0x10210000
 8001fc0:	10120000 	.word	0x10120000
 8001fc4:	10110000 	.word	0x10110000
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40010000 	.word	0x40010000
 8001fd0:	40010800 	.word	0x40010800
 8001fd4:	40010c00 	.word	0x40010c00
 8001fd8:	40011000 	.word	0x40011000
 8001fdc:	40011400 	.word	0x40011400
 8001fe0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_GPIO_Init+0x304>)
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	4909      	ldr	r1, [pc, #36]	; (8002014 <HAL_GPIO_Init+0x304>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	f47f ae8e 	bne.w	8001d24 <HAL_GPIO_Init+0x14>
  }
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	372c      	adds	r7, #44	; 0x2c
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	40010400 	.word	0x40010400

08002018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	807b      	strh	r3, [r7, #2]
 8002024:	4613      	mov	r3, r2
 8002026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002028:	787b      	ldrb	r3, [r7, #1]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800202e:	887a      	ldrh	r2, [r7, #2]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002034:	e003      	b.n	800203e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002036:	887b      	ldrh	r3, [r7, #2]
 8002038:	041a      	lsls	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	611a      	str	r2, [r3, #16]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800205a:	887a      	ldrh	r2, [r7, #2]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4013      	ands	r3, r2
 8002060:	041a      	lsls	r2, r3, #16
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	43d9      	mvns	r1, r3
 8002066:	887b      	ldrh	r3, [r7, #2]
 8002068:	400b      	ands	r3, r1
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	611a      	str	r2, [r3, #16]
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
	...

0800207c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e26c      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 8087 	beq.w	80021aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800209c:	4b92      	ldr	r3, [pc, #584]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d00c      	beq.n	80020c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020a8:	4b8f      	ldr	r3, [pc, #572]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 030c 	and.w	r3, r3, #12
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d112      	bne.n	80020da <HAL_RCC_OscConfig+0x5e>
 80020b4:	4b8c      	ldr	r3, [pc, #560]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c0:	d10b      	bne.n	80020da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c2:	4b89      	ldr	r3, [pc, #548]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d06c      	beq.n	80021a8 <HAL_RCC_OscConfig+0x12c>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d168      	bne.n	80021a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e246      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e2:	d106      	bne.n	80020f2 <HAL_RCC_OscConfig+0x76>
 80020e4:	4b80      	ldr	r3, [pc, #512]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a7f      	ldr	r2, [pc, #508]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	e02e      	b.n	8002150 <HAL_RCC_OscConfig+0xd4>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10c      	bne.n	8002114 <HAL_RCC_OscConfig+0x98>
 80020fa:	4b7b      	ldr	r3, [pc, #492]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a7a      	ldr	r2, [pc, #488]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	4b78      	ldr	r3, [pc, #480]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a77      	ldr	r2, [pc, #476]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800210c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	e01d      	b.n	8002150 <HAL_RCC_OscConfig+0xd4>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800211c:	d10c      	bne.n	8002138 <HAL_RCC_OscConfig+0xbc>
 800211e:	4b72      	ldr	r3, [pc, #456]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a71      	ldr	r2, [pc, #452]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b6f      	ldr	r3, [pc, #444]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a6e      	ldr	r2, [pc, #440]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e00b      	b.n	8002150 <HAL_RCC_OscConfig+0xd4>
 8002138:	4b6b      	ldr	r3, [pc, #428]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a6a      	ldr	r2, [pc, #424]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800213e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	4b68      	ldr	r3, [pc, #416]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a67      	ldr	r2, [pc, #412]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800214a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d013      	beq.n	8002180 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7fe fcf0 	bl	8000b3c <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002160:	f7fe fcec 	bl	8000b3c <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b64      	cmp	r3, #100	; 0x64
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e1fa      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	4b5d      	ldr	r3, [pc, #372]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0xe4>
 800217e:	e014      	b.n	80021aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7fe fcdc 	bl	8000b3c <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002188:	f7fe fcd8 	bl	8000b3c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	; 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e1e6      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219a:	4b53      	ldr	r3, [pc, #332]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x10c>
 80021a6:	e000      	b.n	80021aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d063      	beq.n	800227e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021b6:	4b4c      	ldr	r3, [pc, #304]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00b      	beq.n	80021da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021c2:	4b49      	ldr	r3, [pc, #292]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d11c      	bne.n	8002208 <HAL_RCC_OscConfig+0x18c>
 80021ce:	4b46      	ldr	r3, [pc, #280]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d116      	bne.n	8002208 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021da:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d005      	beq.n	80021f2 <HAL_RCC_OscConfig+0x176>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e1ba      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f2:	4b3d      	ldr	r3, [pc, #244]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4939      	ldr	r1, [pc, #228]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002206:	e03a      	b.n	800227e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d020      	beq.n	8002252 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002210:	4b36      	ldr	r3, [pc, #216]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 8002212:	2201      	movs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7fe fc91 	bl	8000b3c <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800221e:	f7fe fc8d 	bl	8000b3c <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e19b      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002230:	4b2d      	ldr	r3, [pc, #180]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223c:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4927      	ldr	r1, [pc, #156]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800224c:	4313      	orrs	r3, r2
 800224e:	600b      	str	r3, [r1, #0]
 8002250:	e015      	b.n	800227e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002252:	4b26      	ldr	r3, [pc, #152]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7fe fc70 	bl	8000b3c <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002260:	f7fe fc6c 	bl	8000b3c <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e17a      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002272:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d03a      	beq.n	8002300 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d019      	beq.n	80022c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002292:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <HAL_RCC_OscConfig+0x274>)
 8002294:	2201      	movs	r2, #1
 8002296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002298:	f7fe fc50 	bl	8000b3c <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a0:	f7fe fc4c 	bl	8000b3c <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e15a      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022be:	2001      	movs	r0, #1
 80022c0:	f000 fad8 	bl	8002874 <RCC_Delay>
 80022c4:	e01c      	b.n	8002300 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c6:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <HAL_RCC_OscConfig+0x274>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022cc:	f7fe fc36 	bl	8000b3c <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d2:	e00f      	b.n	80022f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d4:	f7fe fc32 	bl	8000b3c <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d908      	bls.n	80022f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e140      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
 80022e6:	bf00      	nop
 80022e8:	40021000 	.word	0x40021000
 80022ec:	42420000 	.word	0x42420000
 80022f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f4:	4b9e      	ldr	r3, [pc, #632]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1e9      	bne.n	80022d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80a6 	beq.w	800245a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002312:	4b97      	ldr	r3, [pc, #604]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10d      	bne.n	800233a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800231e:	4b94      	ldr	r3, [pc, #592]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	4a93      	ldr	r2, [pc, #588]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002328:	61d3      	str	r3, [r2, #28]
 800232a:	4b91      	ldr	r3, [pc, #580]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002336:	2301      	movs	r3, #1
 8002338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233a:	4b8e      	ldr	r3, [pc, #568]	; (8002574 <HAL_RCC_OscConfig+0x4f8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d118      	bne.n	8002378 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002346:	4b8b      	ldr	r3, [pc, #556]	; (8002574 <HAL_RCC_OscConfig+0x4f8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a8a      	ldr	r2, [pc, #552]	; (8002574 <HAL_RCC_OscConfig+0x4f8>)
 800234c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002352:	f7fe fbf3 	bl	8000b3c <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235a:	f7fe fbef 	bl	8000b3c <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b64      	cmp	r3, #100	; 0x64
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0fd      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	4b81      	ldr	r3, [pc, #516]	; (8002574 <HAL_RCC_OscConfig+0x4f8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x312>
 8002380:	4b7b      	ldr	r3, [pc, #492]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4a7a      	ldr	r2, [pc, #488]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6213      	str	r3, [r2, #32]
 800238c:	e02d      	b.n	80023ea <HAL_RCC_OscConfig+0x36e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x334>
 8002396:	4b76      	ldr	r3, [pc, #472]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	4a75      	ldr	r2, [pc, #468]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	6213      	str	r3, [r2, #32]
 80023a2:	4b73      	ldr	r3, [pc, #460]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4a72      	ldr	r2, [pc, #456]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	f023 0304 	bic.w	r3, r3, #4
 80023ac:	6213      	str	r3, [r2, #32]
 80023ae:	e01c      	b.n	80023ea <HAL_RCC_OscConfig+0x36e>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d10c      	bne.n	80023d2 <HAL_RCC_OscConfig+0x356>
 80023b8:	4b6d      	ldr	r3, [pc, #436]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	4a6c      	ldr	r2, [pc, #432]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80023be:	f043 0304 	orr.w	r3, r3, #4
 80023c2:	6213      	str	r3, [r2, #32]
 80023c4:	4b6a      	ldr	r3, [pc, #424]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4a69      	ldr	r2, [pc, #420]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6213      	str	r3, [r2, #32]
 80023d0:	e00b      	b.n	80023ea <HAL_RCC_OscConfig+0x36e>
 80023d2:	4b67      	ldr	r3, [pc, #412]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4a66      	ldr	r2, [pc, #408]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6213      	str	r3, [r2, #32]
 80023de:	4b64      	ldr	r3, [pc, #400]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4a63      	ldr	r2, [pc, #396]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	f023 0304 	bic.w	r3, r3, #4
 80023e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d015      	beq.n	800241e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f2:	f7fe fba3 	bl	8000b3c <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f8:	e00a      	b.n	8002410 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fa:	f7fe fb9f 	bl	8000b3c <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	; 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e0ab      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002410:	4b57      	ldr	r3, [pc, #348]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0ee      	beq.n	80023fa <HAL_RCC_OscConfig+0x37e>
 800241c:	e014      	b.n	8002448 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241e:	f7fe fb8d 	bl	8000b3c <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002424:	e00a      	b.n	800243c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f7fe fb89 	bl	8000b3c <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	; 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e095      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243c:	4b4c      	ldr	r3, [pc, #304]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1ee      	bne.n	8002426 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d105      	bne.n	800245a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244e:	4b48      	ldr	r3, [pc, #288]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4a47      	ldr	r2, [pc, #284]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002458:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 8081 	beq.w	8002566 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002464:	4b42      	ldr	r3, [pc, #264]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 030c 	and.w	r3, r3, #12
 800246c:	2b08      	cmp	r3, #8
 800246e:	d061      	beq.n	8002534 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d146      	bne.n	8002506 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002478:	4b3f      	ldr	r3, [pc, #252]	; (8002578 <HAL_RCC_OscConfig+0x4fc>)
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247e:	f7fe fb5d 	bl	8000b3c <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002486:	f7fe fb59 	bl	8000b3c <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e067      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002498:	4b35      	ldr	r3, [pc, #212]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f0      	bne.n	8002486 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ac:	d108      	bne.n	80024c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024ae:	4b30      	ldr	r3, [pc, #192]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	492d      	ldr	r1, [pc, #180]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c0:	4b2b      	ldr	r3, [pc, #172]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a19      	ldr	r1, [r3, #32]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	430b      	orrs	r3, r1
 80024d2:	4927      	ldr	r1, [pc, #156]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d8:	4b27      	ldr	r3, [pc, #156]	; (8002578 <HAL_RCC_OscConfig+0x4fc>)
 80024da:	2201      	movs	r2, #1
 80024dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024de:	f7fe fb2d 	bl	8000b3c <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e6:	f7fe fb29 	bl	8000b3c <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e037      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f8:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x46a>
 8002504:	e02f      	b.n	8002566 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002506:	4b1c      	ldr	r3, [pc, #112]	; (8002578 <HAL_RCC_OscConfig+0x4fc>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7fe fb16 	bl	8000b3c <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002514:	f7fe fb12 	bl	8000b3c <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e020      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002526:	4b12      	ldr	r3, [pc, #72]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x498>
 8002532:	e018      	b.n	8002566 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e013      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	429a      	cmp	r2, r3
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000
 8002574:	40007000 	.word	0x40007000
 8002578:	42420060 	.word	0x42420060

0800257c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0d0      	b.n	8002732 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002590:	4b6a      	ldr	r3, [pc, #424]	; (800273c <HAL_RCC_ClockConfig+0x1c0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d910      	bls.n	80025c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b67      	ldr	r3, [pc, #412]	; (800273c <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 0207 	bic.w	r2, r3, #7
 80025a6:	4965      	ldr	r1, [pc, #404]	; (800273c <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ae:	4b63      	ldr	r3, [pc, #396]	; (800273c <HAL_RCC_ClockConfig+0x1c0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0b8      	b.n	8002732 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d020      	beq.n	800260e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025d8:	4b59      	ldr	r3, [pc, #356]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4a58      	ldr	r2, [pc, #352]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0308 	and.w	r3, r3, #8
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025f0:	4b53      	ldr	r3, [pc, #332]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4a52      	ldr	r2, [pc, #328]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025fc:	4b50      	ldr	r3, [pc, #320]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	494d      	ldr	r1, [pc, #308]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	4313      	orrs	r3, r2
 800260c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d040      	beq.n	800269c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d107      	bne.n	8002632 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002622:	4b47      	ldr	r3, [pc, #284]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d115      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e07f      	b.n	8002732 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263a:	4b41      	ldr	r3, [pc, #260]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e073      	b.n	8002732 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264a:	4b3d      	ldr	r3, [pc, #244]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e06b      	b.n	8002732 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265a:	4b39      	ldr	r3, [pc, #228]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f023 0203 	bic.w	r2, r3, #3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4936      	ldr	r1, [pc, #216]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	4313      	orrs	r3, r2
 800266a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800266c:	f7fe fa66 	bl	8000b3c <HAL_GetTick>
 8002670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002672:	e00a      	b.n	800268a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002674:	f7fe fa62 	bl	8000b3c <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e053      	b.n	8002732 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268a:	4b2d      	ldr	r3, [pc, #180]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 020c 	and.w	r2, r3, #12
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	429a      	cmp	r2, r3
 800269a:	d1eb      	bne.n	8002674 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800269c:	4b27      	ldr	r3, [pc, #156]	; (800273c <HAL_RCC_ClockConfig+0x1c0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d210      	bcs.n	80026cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b24      	ldr	r3, [pc, #144]	; (800273c <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 0207 	bic.w	r2, r3, #7
 80026b2:	4922      	ldr	r1, [pc, #136]	; (800273c <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ba:	4b20      	ldr	r3, [pc, #128]	; (800273c <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e032      	b.n	8002732 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d8:	4b19      	ldr	r3, [pc, #100]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	4916      	ldr	r1, [pc, #88]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d009      	beq.n	800270a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026f6:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	490e      	ldr	r1, [pc, #56]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	4313      	orrs	r3, r2
 8002708:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800270a:	f000 f821 	bl	8002750 <HAL_RCC_GetSysClockFreq>
 800270e:	4602      	mov	r2, r0
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	091b      	lsrs	r3, r3, #4
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	490a      	ldr	r1, [pc, #40]	; (8002744 <HAL_RCC_ClockConfig+0x1c8>)
 800271c:	5ccb      	ldrb	r3, [r1, r3]
 800271e:	fa22 f303 	lsr.w	r3, r2, r3
 8002722:	4a09      	ldr	r2, [pc, #36]	; (8002748 <HAL_RCC_ClockConfig+0x1cc>)
 8002724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_RCC_ClockConfig+0x1d0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe f9c4 	bl	8000ab8 <HAL_InitTick>

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40022000 	.word	0x40022000
 8002740:	40021000 	.word	0x40021000
 8002744:	0800417c 	.word	0x0800417c
 8002748:	20000000 	.word	0x20000000
 800274c:	20000004 	.word	0x20000004

08002750 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002750:	b490      	push	{r4, r7}
 8002752:	b08a      	sub	sp, #40	; 0x28
 8002754:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002756:	4b2a      	ldr	r3, [pc, #168]	; (8002800 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002758:	1d3c      	adds	r4, r7, #4
 800275a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800275c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002760:	f240 2301 	movw	r3, #513	; 0x201
 8002764:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	2300      	movs	r3, #0
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800277a:	4b22      	ldr	r3, [pc, #136]	; (8002804 <HAL_RCC_GetSysClockFreq+0xb4>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b04      	cmp	r3, #4
 8002788:	d002      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0x40>
 800278a:	2b08      	cmp	r3, #8
 800278c:	d003      	beq.n	8002796 <HAL_RCC_GetSysClockFreq+0x46>
 800278e:	e02d      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002790:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002792:	623b      	str	r3, [r7, #32]
      break;
 8002794:	e02d      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	0c9b      	lsrs	r3, r3, #18
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027a2:	4413      	add	r3, r2
 80027a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d013      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027b4:	4b13      	ldr	r3, [pc, #76]	; (8002804 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	0c5b      	lsrs	r3, r3, #17
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027c2:	4413      	add	r3, r2
 80027c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	4a0e      	ldr	r2, [pc, #56]	; (8002808 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ce:	fb02 f203 	mul.w	r2, r2, r3
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
 80027da:	e004      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	4a0b      	ldr	r2, [pc, #44]	; (800280c <HAL_RCC_GetSysClockFreq+0xbc>)
 80027e0:	fb02 f303 	mul.w	r3, r2, r3
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	623b      	str	r3, [r7, #32]
      break;
 80027ea:	e002      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ee:	623b      	str	r3, [r7, #32]
      break;
 80027f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027f2:	6a3b      	ldr	r3, [r7, #32]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3728      	adds	r7, #40	; 0x28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc90      	pop	{r4, r7}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	0800415c 	.word	0x0800415c
 8002804:	40021000 	.word	0x40021000
 8002808:	007a1200 	.word	0x007a1200
 800280c:	003d0900 	.word	0x003d0900

08002810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002814:	4b02      	ldr	r3, [pc, #8]	; (8002820 <HAL_RCC_GetHCLKFreq+0x10>)
 8002816:	681b      	ldr	r3, [r3, #0]
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	20000000 	.word	0x20000000

08002824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002828:	f7ff fff2 	bl	8002810 <HAL_RCC_GetHCLKFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	0a1b      	lsrs	r3, r3, #8
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	4903      	ldr	r1, [pc, #12]	; (8002848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40021000 	.word	0x40021000
 8002848:	0800418c 	.word	0x0800418c

0800284c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002850:	f7ff ffde 	bl	8002810 <HAL_RCC_GetHCLKFreq>
 8002854:	4602      	mov	r2, r0
 8002856:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	0adb      	lsrs	r3, r3, #11
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	4903      	ldr	r1, [pc, #12]	; (8002870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002862:	5ccb      	ldrb	r3, [r1, r3]
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002868:	4618      	mov	r0, r3
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000
 8002870:	0800418c 	.word	0x0800418c

08002874 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800287c:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <RCC_Delay+0x34>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <RCC_Delay+0x38>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	0a5b      	lsrs	r3, r3, #9
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	fb02 f303 	mul.w	r3, r2, r3
 800288e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002890:	bf00      	nop
  }
  while (Delay --);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1e5a      	subs	r2, r3, #1
 8002896:	60fa      	str	r2, [r7, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f9      	bne.n	8002890 <RCC_Delay+0x1c>
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	20000000 	.word	0x20000000
 80028ac:	10624dd3 	.word	0x10624dd3

080028b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d07d      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80028cc:	2300      	movs	r3, #0
 80028ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d0:	4b4f      	ldr	r3, [pc, #316]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10d      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028dc:	4b4c      	ldr	r3, [pc, #304]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	4a4b      	ldr	r2, [pc, #300]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e6:	61d3      	str	r3, [r2, #28]
 80028e8:	4b49      	ldr	r3, [pc, #292]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f4:	2301      	movs	r3, #1
 80028f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f8:	4b46      	ldr	r3, [pc, #280]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d118      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002904:	4b43      	ldr	r3, [pc, #268]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a42      	ldr	r2, [pc, #264]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800290a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002910:	f7fe f914 	bl	8000b3c <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002916:	e008      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002918:	f7fe f910 	bl	8000b3c <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b64      	cmp	r3, #100	; 0x64
 8002924:	d901      	bls.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e06d      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292a:	4b3a      	ldr	r3, [pc, #232]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002936:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800293e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d02e      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	429a      	cmp	r2, r3
 8002952:	d027      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002954:	4b2e      	ldr	r3, [pc, #184]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800295c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800295e:	4b2e      	ldr	r3, [pc, #184]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002960:	2201      	movs	r2, #1
 8002962:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002964:	4b2c      	ldr	r3, [pc, #176]	; (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800296a:	4a29      	ldr	r2, [pc, #164]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d014      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297a:	f7fe f8df 	bl	8000b3c <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002980:	e00a      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002982:	f7fe f8db 	bl	8000b3c <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002990:	4293      	cmp	r3, r2
 8002992:	d901      	bls.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e036      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002998:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0ee      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029a4:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	4917      	ldr	r1, [pc, #92]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d105      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029bc:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	4a13      	ldr	r2, [pc, #76]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	490b      	ldr	r1, [pc, #44]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d008      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029f2:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	4904      	ldr	r1, [pc, #16]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40007000 	.word	0x40007000
 8002a18:	42420440 	.word	0x42420440

08002a1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002a1c:	b590      	push	{r4, r7, lr}
 8002a1e:	b08d      	sub	sp, #52	; 0x34
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a24:	4b5a      	ldr	r3, [pc, #360]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002a26:	f107 040c 	add.w	r4, r7, #12
 8002a2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a30:	f240 2301 	movw	r3, #513	; 0x201
 8002a34:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a3e:	2300      	movs	r3, #0
 8002a40:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	2300      	movs	r3, #0
 8002a48:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b10      	cmp	r3, #16
 8002a4e:	d00a      	beq.n	8002a66 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b10      	cmp	r3, #16
 8002a54:	f200 8091 	bhi.w	8002b7a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d04c      	beq.n	8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d07c      	beq.n	8002b5e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002a64:	e089      	b.n	8002b7a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8002a66:	4b4b      	ldr	r3, [pc, #300]	; (8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002a6c:	4b49      	ldr	r3, [pc, #292]	; (8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 8082 	beq.w	8002b7e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	0c9b      	lsrs	r3, r3, #18
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002a86:	4413      	add	r3, r2
 8002a88:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a8c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d018      	beq.n	8002aca <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a98:	4b3e      	ldr	r3, [pc, #248]	; (8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	0c5b      	lsrs	r3, r3, #17
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00d      	beq.n	8002ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002ab8:	4a37      	ldr	r2, [pc, #220]	; (8002b98 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	fb02 f303 	mul.w	r3, r2, r3
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac8:	e004      	b.n	8002ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	4a33      	ldr	r2, [pc, #204]	; (8002b9c <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002ad4:	4b2f      	ldr	r3, [pc, #188]	; (8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002adc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ae0:	d102      	bne.n	8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8002ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ae6:	e04a      	b.n	8002b7e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8002ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4a2c      	ldr	r2, [pc, #176]	; (8002ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	085b      	lsrs	r3, r3, #1
 8002af4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002af6:	e042      	b.n	8002b7e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8002af8:	4b26      	ldr	r3, [pc, #152]	; (8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b08:	d108      	bne.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8002b14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b1a:	e01f      	b.n	8002b5c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b26:	d109      	bne.n	8002b3c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002b28:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8002b34:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b3a:	e00f      	b.n	8002b5c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b46:	d11c      	bne.n	8002b82 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002b48:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d016      	beq.n	8002b82 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8002b54:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002b58:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b5a:	e012      	b.n	8002b82 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002b5c:	e011      	b.n	8002b82 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002b5e:	f7ff fe75 	bl	800284c <HAL_RCC_GetPCLK2Freq>
 8002b62:	4602      	mov	r2, r0
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	0b9b      	lsrs	r3, r3, #14
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b78:	e004      	b.n	8002b84 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002b7a:	bf00      	nop
 8002b7c:	e002      	b.n	8002b84 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002b7e:	bf00      	nop
 8002b80:	e000      	b.n	8002b84 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002b82:	bf00      	nop
    }
  }
  return (frequency);
 8002b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3734      	adds	r7, #52	; 0x34
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd90      	pop	{r4, r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	0800416c 	.word	0x0800416c
 8002b94:	40021000 	.word	0x40021000
 8002b98:	007a1200 	.word	0x007a1200
 8002b9c:	003d0900 	.word	0x003d0900
 8002ba0:	aaaaaaab 	.word	0xaaaaaaab

08002ba4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e041      	b.n	8002c3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d106      	bne.n	8002bd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7fd fe24 	bl	8000818 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3304      	adds	r3, #4
 8002be0:	4619      	mov	r1, r3
 8002be2:	4610      	mov	r0, r2
 8002be4:	f000 f9f2 	bl	8002fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d109      	bne.n	8002c68 <HAL_TIM_PWM_Start+0x24>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	bf14      	ite	ne
 8002c60:	2301      	movne	r3, #1
 8002c62:	2300      	moveq	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	e022      	b.n	8002cae <HAL_TIM_PWM_Start+0x6a>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d109      	bne.n	8002c82 <HAL_TIM_PWM_Start+0x3e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	bf14      	ite	ne
 8002c7a:	2301      	movne	r3, #1
 8002c7c:	2300      	moveq	r3, #0
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	e015      	b.n	8002cae <HAL_TIM_PWM_Start+0x6a>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d109      	bne.n	8002c9c <HAL_TIM_PWM_Start+0x58>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	bf14      	ite	ne
 8002c94:	2301      	movne	r3, #1
 8002c96:	2300      	moveq	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e008      	b.n	8002cae <HAL_TIM_PWM_Start+0x6a>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	bf14      	ite	ne
 8002ca8:	2301      	movne	r3, #1
 8002caa:	2300      	moveq	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e05e      	b.n	8002d74 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d104      	bne.n	8002cc6 <HAL_TIM_PWM_Start+0x82>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cc4:	e013      	b.n	8002cee <HAL_TIM_PWM_Start+0xaa>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d104      	bne.n	8002cd6 <HAL_TIM_PWM_Start+0x92>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cd4:	e00b      	b.n	8002cee <HAL_TIM_PWM_Start+0xaa>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d104      	bne.n	8002ce6 <HAL_TIM_PWM_Start+0xa2>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ce4:	e003      	b.n	8002cee <HAL_TIM_PWM_Start+0xaa>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2202      	movs	r2, #2
 8002cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	6839      	ldr	r1, [r7, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fb52 	bl	80033a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a1e      	ldr	r2, [pc, #120]	; (8002d7c <HAL_TIM_PWM_Start+0x138>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d107      	bne.n	8002d16 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a18      	ldr	r2, [pc, #96]	; (8002d7c <HAL_TIM_PWM_Start+0x138>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d00e      	beq.n	8002d3e <HAL_TIM_PWM_Start+0xfa>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d28:	d009      	beq.n	8002d3e <HAL_TIM_PWM_Start+0xfa>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a14      	ldr	r2, [pc, #80]	; (8002d80 <HAL_TIM_PWM_Start+0x13c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d004      	beq.n	8002d3e <HAL_TIM_PWM_Start+0xfa>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a12      	ldr	r2, [pc, #72]	; (8002d84 <HAL_TIM_PWM_Start+0x140>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d111      	bne.n	8002d62 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2b06      	cmp	r3, #6
 8002d4e:	d010      	beq.n	8002d72 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0201 	orr.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d60:	e007      	b.n	8002d72 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 0201 	orr.w	r2, r2, #1
 8002d70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40012c00 	.word	0x40012c00
 8002d80:	40000400 	.word	0x40000400
 8002d84:	40000800 	.word	0x40000800

08002d88 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2200      	movs	r2, #0
 8002d98:	6839      	ldr	r1, [r7, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fb00 	bl	80033a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a29      	ldr	r2, [pc, #164]	; (8002e4c <HAL_TIM_PWM_Stop+0xc4>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d117      	bne.n	8002dda <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6a1a      	ldr	r2, [r3, #32]
 8002db0:	f241 1311 	movw	r3, #4369	; 0x1111
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10f      	bne.n	8002dda <HAL_TIM_PWM_Stop+0x52>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6a1a      	ldr	r2, [r3, #32]
 8002dc0:	f240 4344 	movw	r3, #1092	; 0x444
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d107      	bne.n	8002dda <HAL_TIM_PWM_Stop+0x52>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6a1a      	ldr	r2, [r3, #32]
 8002de0:	f241 1311 	movw	r3, #4369	; 0x1111
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10f      	bne.n	8002e0a <HAL_TIM_PWM_Stop+0x82>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6a1a      	ldr	r2, [r3, #32]
 8002df0:	f240 4344 	movw	r3, #1092	; 0x444
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d107      	bne.n	8002e0a <HAL_TIM_PWM_Stop+0x82>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0201 	bic.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d104      	bne.n	8002e1a <HAL_TIM_PWM_Stop+0x92>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e18:	e013      	b.n	8002e42 <HAL_TIM_PWM_Stop+0xba>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d104      	bne.n	8002e2a <HAL_TIM_PWM_Stop+0xa2>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e28:	e00b      	b.n	8002e42 <HAL_TIM_PWM_Stop+0xba>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d104      	bne.n	8002e3a <HAL_TIM_PWM_Stop+0xb2>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e38:	e003      	b.n	8002e42 <HAL_TIM_PWM_Stop+0xba>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40012c00 	.word	0x40012c00

08002e50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e0ac      	b.n	8002fc4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b0c      	cmp	r3, #12
 8002e76:	f200 809f 	bhi.w	8002fb8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002e7a:	a201      	add	r2, pc, #4	; (adr r2, 8002e80 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e80:	08002eb5 	.word	0x08002eb5
 8002e84:	08002fb9 	.word	0x08002fb9
 8002e88:	08002fb9 	.word	0x08002fb9
 8002e8c:	08002fb9 	.word	0x08002fb9
 8002e90:	08002ef5 	.word	0x08002ef5
 8002e94:	08002fb9 	.word	0x08002fb9
 8002e98:	08002fb9 	.word	0x08002fb9
 8002e9c:	08002fb9 	.word	0x08002fb9
 8002ea0:	08002f37 	.word	0x08002f37
 8002ea4:	08002fb9 	.word	0x08002fb9
 8002ea8:	08002fb9 	.word	0x08002fb9
 8002eac:	08002fb9 	.word	0x08002fb9
 8002eb0:	08002f77 	.word	0x08002f77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 f8e8 	bl	8003090 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699a      	ldr	r2, [r3, #24]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0208 	orr.w	r2, r2, #8
 8002ece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0204 	bic.w	r2, r2, #4
 8002ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6999      	ldr	r1, [r3, #24]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	619a      	str	r2, [r3, #24]
      break;
 8002ef2:	e062      	b.n	8002fba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 f92e 	bl	800315c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699a      	ldr	r2, [r3, #24]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6999      	ldr	r1, [r3, #24]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	021a      	lsls	r2, r3, #8
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	619a      	str	r2, [r3, #24]
      break;
 8002f34:	e041      	b.n	8002fba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 f977 	bl	8003230 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	69da      	ldr	r2, [r3, #28]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0208 	orr.w	r2, r2, #8
 8002f50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69da      	ldr	r2, [r3, #28]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0204 	bic.w	r2, r2, #4
 8002f60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69d9      	ldr	r1, [r3, #28]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	61da      	str	r2, [r3, #28]
      break;
 8002f74:	e021      	b.n	8002fba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 f9c1 	bl	8003304 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69da      	ldr	r2, [r3, #28]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69da      	ldr	r2, [r3, #28]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69d9      	ldr	r1, [r3, #28]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	021a      	lsls	r2, r3, #8
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	61da      	str	r2, [r3, #28]
      break;
 8002fb6:	e000      	b.n	8002fba <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002fb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a29      	ldr	r2, [pc, #164]	; (8003084 <TIM_Base_SetConfig+0xb8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00b      	beq.n	8002ffc <TIM_Base_SetConfig+0x30>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fea:	d007      	beq.n	8002ffc <TIM_Base_SetConfig+0x30>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a26      	ldr	r2, [pc, #152]	; (8003088 <TIM_Base_SetConfig+0xbc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d003      	beq.n	8002ffc <TIM_Base_SetConfig+0x30>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a25      	ldr	r2, [pc, #148]	; (800308c <TIM_Base_SetConfig+0xc0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d108      	bne.n	800300e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <TIM_Base_SetConfig+0xb8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00b      	beq.n	800302e <TIM_Base_SetConfig+0x62>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301c:	d007      	beq.n	800302e <TIM_Base_SetConfig+0x62>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a19      	ldr	r2, [pc, #100]	; (8003088 <TIM_Base_SetConfig+0xbc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d003      	beq.n	800302e <TIM_Base_SetConfig+0x62>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a18      	ldr	r2, [pc, #96]	; (800308c <TIM_Base_SetConfig+0xc0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d108      	bne.n	8003040 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a07      	ldr	r2, [pc, #28]	; (8003084 <TIM_Base_SetConfig+0xb8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d103      	bne.n	8003074 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	615a      	str	r2, [r3, #20]
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr
 8003084:	40012c00 	.word	0x40012c00
 8003088:	40000400 	.word	0x40000400
 800308c:	40000800 	.word	0x40000800

08003090 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	f023 0201 	bic.w	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0303 	bic.w	r3, r3, #3
 80030c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f023 0302 	bic.w	r3, r3, #2
 80030d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a1c      	ldr	r2, [pc, #112]	; (8003158 <TIM_OC1_SetConfig+0xc8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d10c      	bne.n	8003106 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f023 0308 	bic.w	r3, r3, #8
 80030f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f023 0304 	bic.w	r3, r3, #4
 8003104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a13      	ldr	r2, [pc, #76]	; (8003158 <TIM_OC1_SetConfig+0xc8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d111      	bne.n	8003132 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800311c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	621a      	str	r2, [r3, #32]
}
 800314c:	bf00      	nop
 800314e:	371c      	adds	r7, #28
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40012c00 	.word	0x40012c00

0800315c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	f023 0210 	bic.w	r2, r3, #16
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800318a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f023 0320 	bic.w	r3, r3, #32
 80031a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a1d      	ldr	r2, [pc, #116]	; (800322c <TIM_OC2_SetConfig+0xd0>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d10d      	bne.n	80031d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a14      	ldr	r2, [pc, #80]	; (800322c <TIM_OC2_SetConfig+0xd0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d113      	bne.n	8003208 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	621a      	str	r2, [r3, #32]
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr
 800322c:	40012c00 	.word	0x40012c00

08003230 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0303 	bic.w	r3, r3, #3
 8003266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	021b      	lsls	r3, r3, #8
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	4313      	orrs	r3, r2
 8003284:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a1d      	ldr	r2, [pc, #116]	; (8003300 <TIM_OC3_SetConfig+0xd0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d10d      	bne.n	80032aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003294:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	4313      	orrs	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a14      	ldr	r2, [pc, #80]	; (8003300 <TIM_OC3_SetConfig+0xd0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d113      	bne.n	80032da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	621a      	str	r2, [r3, #32]
}
 80032f4:	bf00      	nop
 80032f6:	371c      	adds	r7, #28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40012c00 	.word	0x40012c00

08003304 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	021b      	lsls	r3, r3, #8
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800334e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	031b      	lsls	r3, r3, #12
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a0f      	ldr	r2, [pc, #60]	; (800339c <TIM_OC4_SetConfig+0x98>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d109      	bne.n	8003378 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800336a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	019b      	lsls	r3, r3, #6
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	621a      	str	r2, [r3, #32]
}
 8003392:	bf00      	nop
 8003394:	371c      	adds	r7, #28
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	40012c00 	.word	0x40012c00

080033a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f003 031f 	and.w	r3, r3, #31
 80033b2:	2201      	movs	r2, #1
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a1a      	ldr	r2, [r3, #32]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	401a      	ands	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a1a      	ldr	r2, [r3, #32]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f003 031f 	and.w	r3, r3, #31
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	fa01 f303 	lsl.w	r3, r1, r3
 80033d8:	431a      	orrs	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	621a      	str	r2, [r3, #32]
}
 80033de:	bf00      	nop
 80033e0:	371c      	adds	r7, #28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr

080033e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e046      	b.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003426:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a16      	ldr	r2, [pc, #88]	; (8003498 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00e      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344c:	d009      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a12      	ldr	r2, [pc, #72]	; (800349c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d004      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a10      	ldr	r2, [pc, #64]	; (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d10c      	bne.n	800347c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003468:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	4313      	orrs	r3, r2
 8003472:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr
 8003498:	40012c00 	.word	0x40012c00
 800349c:	40000400 	.word	0x40000400
 80034a0:	40000800 	.word	0x40000800

080034a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e03f      	b.n	8003536 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fd f9f4 	bl	80008b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2224      	movs	r2, #36	; 0x24
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f905 	bl	80036f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695a      	ldr	r2, [r3, #20]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800350c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800351c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b08a      	sub	sp, #40	; 0x28
 8003542:	af02      	add	r7, sp, #8
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	603b      	str	r3, [r7, #0]
 800354a:	4613      	mov	r3, r2
 800354c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b20      	cmp	r3, #32
 800355c:	d17c      	bne.n	8003658 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d002      	beq.n	800356a <HAL_UART_Transmit+0x2c>
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e075      	b.n	800365a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <HAL_UART_Transmit+0x3e>
 8003578:	2302      	movs	r3, #2
 800357a:	e06e      	b.n	800365a <HAL_UART_Transmit+0x11c>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2221      	movs	r2, #33	; 0x21
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003592:	f7fd fad3 	bl	8000b3c <HAL_GetTick>
 8003596:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	88fa      	ldrh	r2, [r7, #6]
 800359c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	88fa      	ldrh	r2, [r7, #6]
 80035a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ac:	d108      	bne.n	80035c0 <HAL_UART_Transmit+0x82>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d104      	bne.n	80035c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	e003      	b.n	80035c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035d0:	e02a      	b.n	8003628 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2200      	movs	r2, #0
 80035da:	2180      	movs	r1, #128	; 0x80
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 f840 	bl	8003662 <UART_WaitOnFlagUntilTimeout>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e036      	b.n	800365a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10b      	bne.n	800360a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003600:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	3302      	adds	r3, #2
 8003606:	61bb      	str	r3, [r7, #24]
 8003608:	e007      	b.n	800361a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	781a      	ldrb	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	3301      	adds	r3, #1
 8003618:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1cf      	bne.n	80035d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2200      	movs	r2, #0
 800363a:	2140      	movs	r1, #64	; 0x40
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f810 	bl	8003662 <UART_WaitOnFlagUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e006      	b.n	800365a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	e000      	b.n	800365a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003658:	2302      	movs	r3, #2
  }
}
 800365a:	4618      	mov	r0, r3
 800365c:	3720      	adds	r7, #32
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	603b      	str	r3, [r7, #0]
 800366e:	4613      	mov	r3, r2
 8003670:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003672:	e02c      	b.n	80036ce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367a:	d028      	beq.n	80036ce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d007      	beq.n	8003692 <UART_WaitOnFlagUntilTimeout+0x30>
 8003682:	f7fd fa5b 	bl	8000b3c <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	429a      	cmp	r2, r3
 8003690:	d21d      	bcs.n	80036ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036a0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0201 	bic.w	r2, r2, #1
 80036b0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e00f      	b.n	80036ee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4013      	ands	r3, r2
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	429a      	cmp	r2, r3
 80036dc:	bf0c      	ite	eq
 80036de:	2301      	moveq	r3, #1
 80036e0:	2300      	movne	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	461a      	mov	r2, r3
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d0c3      	beq.n	8003674 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003732:	f023 030c 	bic.w	r3, r3, #12
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6812      	ldr	r2, [r2, #0]
 800373a:	68b9      	ldr	r1, [r7, #8]
 800373c:	430b      	orrs	r3, r1
 800373e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a2c      	ldr	r2, [pc, #176]	; (800380c <UART_SetConfig+0x114>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d103      	bne.n	8003768 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003760:	f7ff f874 	bl	800284c <HAL_RCC_GetPCLK2Freq>
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	e002      	b.n	800376e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003768:	f7ff f85c 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 800376c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	009a      	lsls	r2, r3, #2
 8003778:	441a      	add	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	fbb2 f3f3 	udiv	r3, r2, r3
 8003784:	4a22      	ldr	r2, [pc, #136]	; (8003810 <UART_SetConfig+0x118>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	0119      	lsls	r1, r3, #4
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	009a      	lsls	r2, r3, #2
 8003798:	441a      	add	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037a4:	4b1a      	ldr	r3, [pc, #104]	; (8003810 <UART_SetConfig+0x118>)
 80037a6:	fba3 0302 	umull	r0, r3, r3, r2
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	2064      	movs	r0, #100	; 0x64
 80037ae:	fb00 f303 	mul.w	r3, r0, r3
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	3332      	adds	r3, #50	; 0x32
 80037b8:	4a15      	ldr	r2, [pc, #84]	; (8003810 <UART_SetConfig+0x118>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037c4:	4419      	add	r1, r3
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	009a      	lsls	r2, r3, #2
 80037d0:	441a      	add	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037dc:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <UART_SetConfig+0x118>)
 80037de:	fba3 0302 	umull	r0, r3, r3, r2
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	2064      	movs	r0, #100	; 0x64
 80037e6:	fb00 f303 	mul.w	r3, r0, r3
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	3332      	adds	r3, #50	; 0x32
 80037f0:	4a07      	ldr	r2, [pc, #28]	; (8003810 <UART_SetConfig+0x118>)
 80037f2:	fba2 2303 	umull	r2, r3, r2, r3
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	f003 020f 	and.w	r2, r3, #15
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	440a      	add	r2, r1
 8003802:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003804:	bf00      	nop
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40013800 	.word	0x40013800
 8003810:	51eb851f 	.word	0x51eb851f

08003814 <__errno>:
 8003814:	4b01      	ldr	r3, [pc, #4]	; (800381c <__errno+0x8>)
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	2000000c 	.word	0x2000000c

08003820 <__libc_init_array>:
 8003820:	b570      	push	{r4, r5, r6, lr}
 8003822:	2600      	movs	r6, #0
 8003824:	4d0c      	ldr	r5, [pc, #48]	; (8003858 <__libc_init_array+0x38>)
 8003826:	4c0d      	ldr	r4, [pc, #52]	; (800385c <__libc_init_array+0x3c>)
 8003828:	1b64      	subs	r4, r4, r5
 800382a:	10a4      	asrs	r4, r4, #2
 800382c:	42a6      	cmp	r6, r4
 800382e:	d109      	bne.n	8003844 <__libc_init_array+0x24>
 8003830:	f000 fc5c 	bl	80040ec <_init>
 8003834:	2600      	movs	r6, #0
 8003836:	4d0a      	ldr	r5, [pc, #40]	; (8003860 <__libc_init_array+0x40>)
 8003838:	4c0a      	ldr	r4, [pc, #40]	; (8003864 <__libc_init_array+0x44>)
 800383a:	1b64      	subs	r4, r4, r5
 800383c:	10a4      	asrs	r4, r4, #2
 800383e:	42a6      	cmp	r6, r4
 8003840:	d105      	bne.n	800384e <__libc_init_array+0x2e>
 8003842:	bd70      	pop	{r4, r5, r6, pc}
 8003844:	f855 3b04 	ldr.w	r3, [r5], #4
 8003848:	4798      	blx	r3
 800384a:	3601      	adds	r6, #1
 800384c:	e7ee      	b.n	800382c <__libc_init_array+0xc>
 800384e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003852:	4798      	blx	r3
 8003854:	3601      	adds	r6, #1
 8003856:	e7f2      	b.n	800383e <__libc_init_array+0x1e>
 8003858:	080041c8 	.word	0x080041c8
 800385c:	080041c8 	.word	0x080041c8
 8003860:	080041c8 	.word	0x080041c8
 8003864:	080041cc 	.word	0x080041cc

08003868 <memset>:
 8003868:	4603      	mov	r3, r0
 800386a:	4402      	add	r2, r0
 800386c:	4293      	cmp	r3, r2
 800386e:	d100      	bne.n	8003872 <memset+0xa>
 8003870:	4770      	bx	lr
 8003872:	f803 1b01 	strb.w	r1, [r3], #1
 8003876:	e7f9      	b.n	800386c <memset+0x4>

08003878 <siprintf>:
 8003878:	b40e      	push	{r1, r2, r3}
 800387a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800387e:	b500      	push	{lr}
 8003880:	b09c      	sub	sp, #112	; 0x70
 8003882:	ab1d      	add	r3, sp, #116	; 0x74
 8003884:	9002      	str	r0, [sp, #8]
 8003886:	9006      	str	r0, [sp, #24]
 8003888:	9107      	str	r1, [sp, #28]
 800388a:	9104      	str	r1, [sp, #16]
 800388c:	4808      	ldr	r0, [pc, #32]	; (80038b0 <siprintf+0x38>)
 800388e:	4909      	ldr	r1, [pc, #36]	; (80038b4 <siprintf+0x3c>)
 8003890:	f853 2b04 	ldr.w	r2, [r3], #4
 8003894:	9105      	str	r1, [sp, #20]
 8003896:	6800      	ldr	r0, [r0, #0]
 8003898:	a902      	add	r1, sp, #8
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	f000 f868 	bl	8003970 <_svfiprintf_r>
 80038a0:	2200      	movs	r2, #0
 80038a2:	9b02      	ldr	r3, [sp, #8]
 80038a4:	701a      	strb	r2, [r3, #0]
 80038a6:	b01c      	add	sp, #112	; 0x70
 80038a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80038ac:	b003      	add	sp, #12
 80038ae:	4770      	bx	lr
 80038b0:	2000000c 	.word	0x2000000c
 80038b4:	ffff0208 	.word	0xffff0208

080038b8 <__ssputs_r>:
 80038b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038bc:	688e      	ldr	r6, [r1, #8]
 80038be:	4682      	mov	sl, r0
 80038c0:	429e      	cmp	r6, r3
 80038c2:	460c      	mov	r4, r1
 80038c4:	4690      	mov	r8, r2
 80038c6:	461f      	mov	r7, r3
 80038c8:	d838      	bhi.n	800393c <__ssputs_r+0x84>
 80038ca:	898a      	ldrh	r2, [r1, #12]
 80038cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038d0:	d032      	beq.n	8003938 <__ssputs_r+0x80>
 80038d2:	6825      	ldr	r5, [r4, #0]
 80038d4:	6909      	ldr	r1, [r1, #16]
 80038d6:	3301      	adds	r3, #1
 80038d8:	eba5 0901 	sub.w	r9, r5, r1
 80038dc:	6965      	ldr	r5, [r4, #20]
 80038de:	444b      	add	r3, r9
 80038e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038e8:	106d      	asrs	r5, r5, #1
 80038ea:	429d      	cmp	r5, r3
 80038ec:	bf38      	it	cc
 80038ee:	461d      	movcc	r5, r3
 80038f0:	0553      	lsls	r3, r2, #21
 80038f2:	d531      	bpl.n	8003958 <__ssputs_r+0xa0>
 80038f4:	4629      	mov	r1, r5
 80038f6:	f000 fb53 	bl	8003fa0 <_malloc_r>
 80038fa:	4606      	mov	r6, r0
 80038fc:	b950      	cbnz	r0, 8003914 <__ssputs_r+0x5c>
 80038fe:	230c      	movs	r3, #12
 8003900:	f04f 30ff 	mov.w	r0, #4294967295
 8003904:	f8ca 3000 	str.w	r3, [sl]
 8003908:	89a3      	ldrh	r3, [r4, #12]
 800390a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800390e:	81a3      	strh	r3, [r4, #12]
 8003910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003914:	464a      	mov	r2, r9
 8003916:	6921      	ldr	r1, [r4, #16]
 8003918:	f000 face 	bl	8003eb8 <memcpy>
 800391c:	89a3      	ldrh	r3, [r4, #12]
 800391e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003926:	81a3      	strh	r3, [r4, #12]
 8003928:	6126      	str	r6, [r4, #16]
 800392a:	444e      	add	r6, r9
 800392c:	6026      	str	r6, [r4, #0]
 800392e:	463e      	mov	r6, r7
 8003930:	6165      	str	r5, [r4, #20]
 8003932:	eba5 0509 	sub.w	r5, r5, r9
 8003936:	60a5      	str	r5, [r4, #8]
 8003938:	42be      	cmp	r6, r7
 800393a:	d900      	bls.n	800393e <__ssputs_r+0x86>
 800393c:	463e      	mov	r6, r7
 800393e:	4632      	mov	r2, r6
 8003940:	4641      	mov	r1, r8
 8003942:	6820      	ldr	r0, [r4, #0]
 8003944:	f000 fac6 	bl	8003ed4 <memmove>
 8003948:	68a3      	ldr	r3, [r4, #8]
 800394a:	6822      	ldr	r2, [r4, #0]
 800394c:	1b9b      	subs	r3, r3, r6
 800394e:	4432      	add	r2, r6
 8003950:	2000      	movs	r0, #0
 8003952:	60a3      	str	r3, [r4, #8]
 8003954:	6022      	str	r2, [r4, #0]
 8003956:	e7db      	b.n	8003910 <__ssputs_r+0x58>
 8003958:	462a      	mov	r2, r5
 800395a:	f000 fb7b 	bl	8004054 <_realloc_r>
 800395e:	4606      	mov	r6, r0
 8003960:	2800      	cmp	r0, #0
 8003962:	d1e1      	bne.n	8003928 <__ssputs_r+0x70>
 8003964:	4650      	mov	r0, sl
 8003966:	6921      	ldr	r1, [r4, #16]
 8003968:	f000 face 	bl	8003f08 <_free_r>
 800396c:	e7c7      	b.n	80038fe <__ssputs_r+0x46>
	...

08003970 <_svfiprintf_r>:
 8003970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003974:	4698      	mov	r8, r3
 8003976:	898b      	ldrh	r3, [r1, #12]
 8003978:	4607      	mov	r7, r0
 800397a:	061b      	lsls	r3, r3, #24
 800397c:	460d      	mov	r5, r1
 800397e:	4614      	mov	r4, r2
 8003980:	b09d      	sub	sp, #116	; 0x74
 8003982:	d50e      	bpl.n	80039a2 <_svfiprintf_r+0x32>
 8003984:	690b      	ldr	r3, [r1, #16]
 8003986:	b963      	cbnz	r3, 80039a2 <_svfiprintf_r+0x32>
 8003988:	2140      	movs	r1, #64	; 0x40
 800398a:	f000 fb09 	bl	8003fa0 <_malloc_r>
 800398e:	6028      	str	r0, [r5, #0]
 8003990:	6128      	str	r0, [r5, #16]
 8003992:	b920      	cbnz	r0, 800399e <_svfiprintf_r+0x2e>
 8003994:	230c      	movs	r3, #12
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	f04f 30ff 	mov.w	r0, #4294967295
 800399c:	e0d1      	b.n	8003b42 <_svfiprintf_r+0x1d2>
 800399e:	2340      	movs	r3, #64	; 0x40
 80039a0:	616b      	str	r3, [r5, #20]
 80039a2:	2300      	movs	r3, #0
 80039a4:	9309      	str	r3, [sp, #36]	; 0x24
 80039a6:	2320      	movs	r3, #32
 80039a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039ac:	2330      	movs	r3, #48	; 0x30
 80039ae:	f04f 0901 	mov.w	r9, #1
 80039b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80039b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003b5c <_svfiprintf_r+0x1ec>
 80039ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039be:	4623      	mov	r3, r4
 80039c0:	469a      	mov	sl, r3
 80039c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039c6:	b10a      	cbz	r2, 80039cc <_svfiprintf_r+0x5c>
 80039c8:	2a25      	cmp	r2, #37	; 0x25
 80039ca:	d1f9      	bne.n	80039c0 <_svfiprintf_r+0x50>
 80039cc:	ebba 0b04 	subs.w	fp, sl, r4
 80039d0:	d00b      	beq.n	80039ea <_svfiprintf_r+0x7a>
 80039d2:	465b      	mov	r3, fp
 80039d4:	4622      	mov	r2, r4
 80039d6:	4629      	mov	r1, r5
 80039d8:	4638      	mov	r0, r7
 80039da:	f7ff ff6d 	bl	80038b8 <__ssputs_r>
 80039de:	3001      	adds	r0, #1
 80039e0:	f000 80aa 	beq.w	8003b38 <_svfiprintf_r+0x1c8>
 80039e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039e6:	445a      	add	r2, fp
 80039e8:	9209      	str	r2, [sp, #36]	; 0x24
 80039ea:	f89a 3000 	ldrb.w	r3, [sl]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80a2 	beq.w	8003b38 <_svfiprintf_r+0x1c8>
 80039f4:	2300      	movs	r3, #0
 80039f6:	f04f 32ff 	mov.w	r2, #4294967295
 80039fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039fe:	f10a 0a01 	add.w	sl, sl, #1
 8003a02:	9304      	str	r3, [sp, #16]
 8003a04:	9307      	str	r3, [sp, #28]
 8003a06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a0a:	931a      	str	r3, [sp, #104]	; 0x68
 8003a0c:	4654      	mov	r4, sl
 8003a0e:	2205      	movs	r2, #5
 8003a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a14:	4851      	ldr	r0, [pc, #324]	; (8003b5c <_svfiprintf_r+0x1ec>)
 8003a16:	f000 fa41 	bl	8003e9c <memchr>
 8003a1a:	9a04      	ldr	r2, [sp, #16]
 8003a1c:	b9d8      	cbnz	r0, 8003a56 <_svfiprintf_r+0xe6>
 8003a1e:	06d0      	lsls	r0, r2, #27
 8003a20:	bf44      	itt	mi
 8003a22:	2320      	movmi	r3, #32
 8003a24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a28:	0711      	lsls	r1, r2, #28
 8003a2a:	bf44      	itt	mi
 8003a2c:	232b      	movmi	r3, #43	; 0x2b
 8003a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a32:	f89a 3000 	ldrb.w	r3, [sl]
 8003a36:	2b2a      	cmp	r3, #42	; 0x2a
 8003a38:	d015      	beq.n	8003a66 <_svfiprintf_r+0xf6>
 8003a3a:	4654      	mov	r4, sl
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	f04f 0c0a 	mov.w	ip, #10
 8003a42:	9a07      	ldr	r2, [sp, #28]
 8003a44:	4621      	mov	r1, r4
 8003a46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a4a:	3b30      	subs	r3, #48	; 0x30
 8003a4c:	2b09      	cmp	r3, #9
 8003a4e:	d94e      	bls.n	8003aee <_svfiprintf_r+0x17e>
 8003a50:	b1b0      	cbz	r0, 8003a80 <_svfiprintf_r+0x110>
 8003a52:	9207      	str	r2, [sp, #28]
 8003a54:	e014      	b.n	8003a80 <_svfiprintf_r+0x110>
 8003a56:	eba0 0308 	sub.w	r3, r0, r8
 8003a5a:	fa09 f303 	lsl.w	r3, r9, r3
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	46a2      	mov	sl, r4
 8003a62:	9304      	str	r3, [sp, #16]
 8003a64:	e7d2      	b.n	8003a0c <_svfiprintf_r+0x9c>
 8003a66:	9b03      	ldr	r3, [sp, #12]
 8003a68:	1d19      	adds	r1, r3, #4
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	9103      	str	r1, [sp, #12]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	bfbb      	ittet	lt
 8003a72:	425b      	neglt	r3, r3
 8003a74:	f042 0202 	orrlt.w	r2, r2, #2
 8003a78:	9307      	strge	r3, [sp, #28]
 8003a7a:	9307      	strlt	r3, [sp, #28]
 8003a7c:	bfb8      	it	lt
 8003a7e:	9204      	strlt	r2, [sp, #16]
 8003a80:	7823      	ldrb	r3, [r4, #0]
 8003a82:	2b2e      	cmp	r3, #46	; 0x2e
 8003a84:	d10c      	bne.n	8003aa0 <_svfiprintf_r+0x130>
 8003a86:	7863      	ldrb	r3, [r4, #1]
 8003a88:	2b2a      	cmp	r3, #42	; 0x2a
 8003a8a:	d135      	bne.n	8003af8 <_svfiprintf_r+0x188>
 8003a8c:	9b03      	ldr	r3, [sp, #12]
 8003a8e:	3402      	adds	r4, #2
 8003a90:	1d1a      	adds	r2, r3, #4
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	9203      	str	r2, [sp, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	bfb8      	it	lt
 8003a9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a9e:	9305      	str	r3, [sp, #20]
 8003aa0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b6c <_svfiprintf_r+0x1fc>
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	4650      	mov	r0, sl
 8003aa8:	7821      	ldrb	r1, [r4, #0]
 8003aaa:	f000 f9f7 	bl	8003e9c <memchr>
 8003aae:	b140      	cbz	r0, 8003ac2 <_svfiprintf_r+0x152>
 8003ab0:	2340      	movs	r3, #64	; 0x40
 8003ab2:	eba0 000a 	sub.w	r0, r0, sl
 8003ab6:	fa03 f000 	lsl.w	r0, r3, r0
 8003aba:	9b04      	ldr	r3, [sp, #16]
 8003abc:	3401      	adds	r4, #1
 8003abe:	4303      	orrs	r3, r0
 8003ac0:	9304      	str	r3, [sp, #16]
 8003ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ac6:	2206      	movs	r2, #6
 8003ac8:	4825      	ldr	r0, [pc, #148]	; (8003b60 <_svfiprintf_r+0x1f0>)
 8003aca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ace:	f000 f9e5 	bl	8003e9c <memchr>
 8003ad2:	2800      	cmp	r0, #0
 8003ad4:	d038      	beq.n	8003b48 <_svfiprintf_r+0x1d8>
 8003ad6:	4b23      	ldr	r3, [pc, #140]	; (8003b64 <_svfiprintf_r+0x1f4>)
 8003ad8:	bb1b      	cbnz	r3, 8003b22 <_svfiprintf_r+0x1b2>
 8003ada:	9b03      	ldr	r3, [sp, #12]
 8003adc:	3307      	adds	r3, #7
 8003ade:	f023 0307 	bic.w	r3, r3, #7
 8003ae2:	3308      	adds	r3, #8
 8003ae4:	9303      	str	r3, [sp, #12]
 8003ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ae8:	4433      	add	r3, r6
 8003aea:	9309      	str	r3, [sp, #36]	; 0x24
 8003aec:	e767      	b.n	80039be <_svfiprintf_r+0x4e>
 8003aee:	460c      	mov	r4, r1
 8003af0:	2001      	movs	r0, #1
 8003af2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003af6:	e7a5      	b.n	8003a44 <_svfiprintf_r+0xd4>
 8003af8:	2300      	movs	r3, #0
 8003afa:	f04f 0c0a 	mov.w	ip, #10
 8003afe:	4619      	mov	r1, r3
 8003b00:	3401      	adds	r4, #1
 8003b02:	9305      	str	r3, [sp, #20]
 8003b04:	4620      	mov	r0, r4
 8003b06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b0a:	3a30      	subs	r2, #48	; 0x30
 8003b0c:	2a09      	cmp	r2, #9
 8003b0e:	d903      	bls.n	8003b18 <_svfiprintf_r+0x1a8>
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0c5      	beq.n	8003aa0 <_svfiprintf_r+0x130>
 8003b14:	9105      	str	r1, [sp, #20]
 8003b16:	e7c3      	b.n	8003aa0 <_svfiprintf_r+0x130>
 8003b18:	4604      	mov	r4, r0
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b20:	e7f0      	b.n	8003b04 <_svfiprintf_r+0x194>
 8003b22:	ab03      	add	r3, sp, #12
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	462a      	mov	r2, r5
 8003b28:	4638      	mov	r0, r7
 8003b2a:	4b0f      	ldr	r3, [pc, #60]	; (8003b68 <_svfiprintf_r+0x1f8>)
 8003b2c:	a904      	add	r1, sp, #16
 8003b2e:	f3af 8000 	nop.w
 8003b32:	1c42      	adds	r2, r0, #1
 8003b34:	4606      	mov	r6, r0
 8003b36:	d1d6      	bne.n	8003ae6 <_svfiprintf_r+0x176>
 8003b38:	89ab      	ldrh	r3, [r5, #12]
 8003b3a:	065b      	lsls	r3, r3, #25
 8003b3c:	f53f af2c 	bmi.w	8003998 <_svfiprintf_r+0x28>
 8003b40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b42:	b01d      	add	sp, #116	; 0x74
 8003b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b48:	ab03      	add	r3, sp, #12
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	462a      	mov	r2, r5
 8003b4e:	4638      	mov	r0, r7
 8003b50:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <_svfiprintf_r+0x1f8>)
 8003b52:	a904      	add	r1, sp, #16
 8003b54:	f000 f87c 	bl	8003c50 <_printf_i>
 8003b58:	e7eb      	b.n	8003b32 <_svfiprintf_r+0x1c2>
 8003b5a:	bf00      	nop
 8003b5c:	08004194 	.word	0x08004194
 8003b60:	0800419e 	.word	0x0800419e
 8003b64:	00000000 	.word	0x00000000
 8003b68:	080038b9 	.word	0x080038b9
 8003b6c:	0800419a 	.word	0x0800419a

08003b70 <_printf_common>:
 8003b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b74:	4616      	mov	r6, r2
 8003b76:	4699      	mov	r9, r3
 8003b78:	688a      	ldr	r2, [r1, #8]
 8003b7a:	690b      	ldr	r3, [r1, #16]
 8003b7c:	4607      	mov	r7, r0
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	bfb8      	it	lt
 8003b82:	4613      	movlt	r3, r2
 8003b84:	6033      	str	r3, [r6, #0]
 8003b86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b8a:	460c      	mov	r4, r1
 8003b8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b90:	b10a      	cbz	r2, 8003b96 <_printf_common+0x26>
 8003b92:	3301      	adds	r3, #1
 8003b94:	6033      	str	r3, [r6, #0]
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	0699      	lsls	r1, r3, #26
 8003b9a:	bf42      	ittt	mi
 8003b9c:	6833      	ldrmi	r3, [r6, #0]
 8003b9e:	3302      	addmi	r3, #2
 8003ba0:	6033      	strmi	r3, [r6, #0]
 8003ba2:	6825      	ldr	r5, [r4, #0]
 8003ba4:	f015 0506 	ands.w	r5, r5, #6
 8003ba8:	d106      	bne.n	8003bb8 <_printf_common+0x48>
 8003baa:	f104 0a19 	add.w	sl, r4, #25
 8003bae:	68e3      	ldr	r3, [r4, #12]
 8003bb0:	6832      	ldr	r2, [r6, #0]
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	42ab      	cmp	r3, r5
 8003bb6:	dc28      	bgt.n	8003c0a <_printf_common+0x9a>
 8003bb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bbc:	1e13      	subs	r3, r2, #0
 8003bbe:	6822      	ldr	r2, [r4, #0]
 8003bc0:	bf18      	it	ne
 8003bc2:	2301      	movne	r3, #1
 8003bc4:	0692      	lsls	r2, r2, #26
 8003bc6:	d42d      	bmi.n	8003c24 <_printf_common+0xb4>
 8003bc8:	4649      	mov	r1, r9
 8003bca:	4638      	mov	r0, r7
 8003bcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bd0:	47c0      	blx	r8
 8003bd2:	3001      	adds	r0, #1
 8003bd4:	d020      	beq.n	8003c18 <_printf_common+0xa8>
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	68e5      	ldr	r5, [r4, #12]
 8003bda:	f003 0306 	and.w	r3, r3, #6
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	bf18      	it	ne
 8003be2:	2500      	movne	r5, #0
 8003be4:	6832      	ldr	r2, [r6, #0]
 8003be6:	f04f 0600 	mov.w	r6, #0
 8003bea:	68a3      	ldr	r3, [r4, #8]
 8003bec:	bf08      	it	eq
 8003bee:	1aad      	subeq	r5, r5, r2
 8003bf0:	6922      	ldr	r2, [r4, #16]
 8003bf2:	bf08      	it	eq
 8003bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	bfc4      	itt	gt
 8003bfc:	1a9b      	subgt	r3, r3, r2
 8003bfe:	18ed      	addgt	r5, r5, r3
 8003c00:	341a      	adds	r4, #26
 8003c02:	42b5      	cmp	r5, r6
 8003c04:	d11a      	bne.n	8003c3c <_printf_common+0xcc>
 8003c06:	2000      	movs	r0, #0
 8003c08:	e008      	b.n	8003c1c <_printf_common+0xac>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	4652      	mov	r2, sl
 8003c0e:	4649      	mov	r1, r9
 8003c10:	4638      	mov	r0, r7
 8003c12:	47c0      	blx	r8
 8003c14:	3001      	adds	r0, #1
 8003c16:	d103      	bne.n	8003c20 <_printf_common+0xb0>
 8003c18:	f04f 30ff 	mov.w	r0, #4294967295
 8003c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c20:	3501      	adds	r5, #1
 8003c22:	e7c4      	b.n	8003bae <_printf_common+0x3e>
 8003c24:	2030      	movs	r0, #48	; 0x30
 8003c26:	18e1      	adds	r1, r4, r3
 8003c28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c32:	4422      	add	r2, r4
 8003c34:	3302      	adds	r3, #2
 8003c36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c3a:	e7c5      	b.n	8003bc8 <_printf_common+0x58>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	4622      	mov	r2, r4
 8003c40:	4649      	mov	r1, r9
 8003c42:	4638      	mov	r0, r7
 8003c44:	47c0      	blx	r8
 8003c46:	3001      	adds	r0, #1
 8003c48:	d0e6      	beq.n	8003c18 <_printf_common+0xa8>
 8003c4a:	3601      	adds	r6, #1
 8003c4c:	e7d9      	b.n	8003c02 <_printf_common+0x92>
	...

08003c50 <_printf_i>:
 8003c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c54:	460c      	mov	r4, r1
 8003c56:	7e27      	ldrb	r7, [r4, #24]
 8003c58:	4691      	mov	r9, r2
 8003c5a:	2f78      	cmp	r7, #120	; 0x78
 8003c5c:	4680      	mov	r8, r0
 8003c5e:	469a      	mov	sl, r3
 8003c60:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c66:	d807      	bhi.n	8003c78 <_printf_i+0x28>
 8003c68:	2f62      	cmp	r7, #98	; 0x62
 8003c6a:	d80a      	bhi.n	8003c82 <_printf_i+0x32>
 8003c6c:	2f00      	cmp	r7, #0
 8003c6e:	f000 80d9 	beq.w	8003e24 <_printf_i+0x1d4>
 8003c72:	2f58      	cmp	r7, #88	; 0x58
 8003c74:	f000 80a4 	beq.w	8003dc0 <_printf_i+0x170>
 8003c78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c80:	e03a      	b.n	8003cf8 <_printf_i+0xa8>
 8003c82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c86:	2b15      	cmp	r3, #21
 8003c88:	d8f6      	bhi.n	8003c78 <_printf_i+0x28>
 8003c8a:	a001      	add	r0, pc, #4	; (adr r0, 8003c90 <_printf_i+0x40>)
 8003c8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003c90:	08003ce9 	.word	0x08003ce9
 8003c94:	08003cfd 	.word	0x08003cfd
 8003c98:	08003c79 	.word	0x08003c79
 8003c9c:	08003c79 	.word	0x08003c79
 8003ca0:	08003c79 	.word	0x08003c79
 8003ca4:	08003c79 	.word	0x08003c79
 8003ca8:	08003cfd 	.word	0x08003cfd
 8003cac:	08003c79 	.word	0x08003c79
 8003cb0:	08003c79 	.word	0x08003c79
 8003cb4:	08003c79 	.word	0x08003c79
 8003cb8:	08003c79 	.word	0x08003c79
 8003cbc:	08003e0b 	.word	0x08003e0b
 8003cc0:	08003d2d 	.word	0x08003d2d
 8003cc4:	08003ded 	.word	0x08003ded
 8003cc8:	08003c79 	.word	0x08003c79
 8003ccc:	08003c79 	.word	0x08003c79
 8003cd0:	08003e2d 	.word	0x08003e2d
 8003cd4:	08003c79 	.word	0x08003c79
 8003cd8:	08003d2d 	.word	0x08003d2d
 8003cdc:	08003c79 	.word	0x08003c79
 8003ce0:	08003c79 	.word	0x08003c79
 8003ce4:	08003df5 	.word	0x08003df5
 8003ce8:	680b      	ldr	r3, [r1, #0]
 8003cea:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003cee:	1d1a      	adds	r2, r3, #4
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	600a      	str	r2, [r1, #0]
 8003cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e0a4      	b.n	8003e46 <_printf_i+0x1f6>
 8003cfc:	6825      	ldr	r5, [r4, #0]
 8003cfe:	6808      	ldr	r0, [r1, #0]
 8003d00:	062e      	lsls	r6, r5, #24
 8003d02:	f100 0304 	add.w	r3, r0, #4
 8003d06:	d50a      	bpl.n	8003d1e <_printf_i+0xce>
 8003d08:	6805      	ldr	r5, [r0, #0]
 8003d0a:	600b      	str	r3, [r1, #0]
 8003d0c:	2d00      	cmp	r5, #0
 8003d0e:	da03      	bge.n	8003d18 <_printf_i+0xc8>
 8003d10:	232d      	movs	r3, #45	; 0x2d
 8003d12:	426d      	negs	r5, r5
 8003d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d18:	230a      	movs	r3, #10
 8003d1a:	485e      	ldr	r0, [pc, #376]	; (8003e94 <_printf_i+0x244>)
 8003d1c:	e019      	b.n	8003d52 <_printf_i+0x102>
 8003d1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d22:	6805      	ldr	r5, [r0, #0]
 8003d24:	600b      	str	r3, [r1, #0]
 8003d26:	bf18      	it	ne
 8003d28:	b22d      	sxthne	r5, r5
 8003d2a:	e7ef      	b.n	8003d0c <_printf_i+0xbc>
 8003d2c:	680b      	ldr	r3, [r1, #0]
 8003d2e:	6825      	ldr	r5, [r4, #0]
 8003d30:	1d18      	adds	r0, r3, #4
 8003d32:	6008      	str	r0, [r1, #0]
 8003d34:	0628      	lsls	r0, r5, #24
 8003d36:	d501      	bpl.n	8003d3c <_printf_i+0xec>
 8003d38:	681d      	ldr	r5, [r3, #0]
 8003d3a:	e002      	b.n	8003d42 <_printf_i+0xf2>
 8003d3c:	0669      	lsls	r1, r5, #25
 8003d3e:	d5fb      	bpl.n	8003d38 <_printf_i+0xe8>
 8003d40:	881d      	ldrh	r5, [r3, #0]
 8003d42:	2f6f      	cmp	r7, #111	; 0x6f
 8003d44:	bf0c      	ite	eq
 8003d46:	2308      	moveq	r3, #8
 8003d48:	230a      	movne	r3, #10
 8003d4a:	4852      	ldr	r0, [pc, #328]	; (8003e94 <_printf_i+0x244>)
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d52:	6866      	ldr	r6, [r4, #4]
 8003d54:	2e00      	cmp	r6, #0
 8003d56:	bfa8      	it	ge
 8003d58:	6821      	ldrge	r1, [r4, #0]
 8003d5a:	60a6      	str	r6, [r4, #8]
 8003d5c:	bfa4      	itt	ge
 8003d5e:	f021 0104 	bicge.w	r1, r1, #4
 8003d62:	6021      	strge	r1, [r4, #0]
 8003d64:	b90d      	cbnz	r5, 8003d6a <_printf_i+0x11a>
 8003d66:	2e00      	cmp	r6, #0
 8003d68:	d04d      	beq.n	8003e06 <_printf_i+0x1b6>
 8003d6a:	4616      	mov	r6, r2
 8003d6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d70:	fb03 5711 	mls	r7, r3, r1, r5
 8003d74:	5dc7      	ldrb	r7, [r0, r7]
 8003d76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d7a:	462f      	mov	r7, r5
 8003d7c:	42bb      	cmp	r3, r7
 8003d7e:	460d      	mov	r5, r1
 8003d80:	d9f4      	bls.n	8003d6c <_printf_i+0x11c>
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d10b      	bne.n	8003d9e <_printf_i+0x14e>
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	07df      	lsls	r7, r3, #31
 8003d8a:	d508      	bpl.n	8003d9e <_printf_i+0x14e>
 8003d8c:	6923      	ldr	r3, [r4, #16]
 8003d8e:	6861      	ldr	r1, [r4, #4]
 8003d90:	4299      	cmp	r1, r3
 8003d92:	bfde      	ittt	le
 8003d94:	2330      	movle	r3, #48	; 0x30
 8003d96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d9e:	1b92      	subs	r2, r2, r6
 8003da0:	6122      	str	r2, [r4, #16]
 8003da2:	464b      	mov	r3, r9
 8003da4:	4621      	mov	r1, r4
 8003da6:	4640      	mov	r0, r8
 8003da8:	f8cd a000 	str.w	sl, [sp]
 8003dac:	aa03      	add	r2, sp, #12
 8003dae:	f7ff fedf 	bl	8003b70 <_printf_common>
 8003db2:	3001      	adds	r0, #1
 8003db4:	d14c      	bne.n	8003e50 <_printf_i+0x200>
 8003db6:	f04f 30ff 	mov.w	r0, #4294967295
 8003dba:	b004      	add	sp, #16
 8003dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dc0:	4834      	ldr	r0, [pc, #208]	; (8003e94 <_printf_i+0x244>)
 8003dc2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003dc6:	680e      	ldr	r6, [r1, #0]
 8003dc8:	6823      	ldr	r3, [r4, #0]
 8003dca:	f856 5b04 	ldr.w	r5, [r6], #4
 8003dce:	061f      	lsls	r7, r3, #24
 8003dd0:	600e      	str	r6, [r1, #0]
 8003dd2:	d514      	bpl.n	8003dfe <_printf_i+0x1ae>
 8003dd4:	07d9      	lsls	r1, r3, #31
 8003dd6:	bf44      	itt	mi
 8003dd8:	f043 0320 	orrmi.w	r3, r3, #32
 8003ddc:	6023      	strmi	r3, [r4, #0]
 8003dde:	b91d      	cbnz	r5, 8003de8 <_printf_i+0x198>
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	f023 0320 	bic.w	r3, r3, #32
 8003de6:	6023      	str	r3, [r4, #0]
 8003de8:	2310      	movs	r3, #16
 8003dea:	e7af      	b.n	8003d4c <_printf_i+0xfc>
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	f043 0320 	orr.w	r3, r3, #32
 8003df2:	6023      	str	r3, [r4, #0]
 8003df4:	2378      	movs	r3, #120	; 0x78
 8003df6:	4828      	ldr	r0, [pc, #160]	; (8003e98 <_printf_i+0x248>)
 8003df8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dfc:	e7e3      	b.n	8003dc6 <_printf_i+0x176>
 8003dfe:	065e      	lsls	r6, r3, #25
 8003e00:	bf48      	it	mi
 8003e02:	b2ad      	uxthmi	r5, r5
 8003e04:	e7e6      	b.n	8003dd4 <_printf_i+0x184>
 8003e06:	4616      	mov	r6, r2
 8003e08:	e7bb      	b.n	8003d82 <_printf_i+0x132>
 8003e0a:	680b      	ldr	r3, [r1, #0]
 8003e0c:	6826      	ldr	r6, [r4, #0]
 8003e0e:	1d1d      	adds	r5, r3, #4
 8003e10:	6960      	ldr	r0, [r4, #20]
 8003e12:	600d      	str	r5, [r1, #0]
 8003e14:	0635      	lsls	r5, r6, #24
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	d501      	bpl.n	8003e1e <_printf_i+0x1ce>
 8003e1a:	6018      	str	r0, [r3, #0]
 8003e1c:	e002      	b.n	8003e24 <_printf_i+0x1d4>
 8003e1e:	0671      	lsls	r1, r6, #25
 8003e20:	d5fb      	bpl.n	8003e1a <_printf_i+0x1ca>
 8003e22:	8018      	strh	r0, [r3, #0]
 8003e24:	2300      	movs	r3, #0
 8003e26:	4616      	mov	r6, r2
 8003e28:	6123      	str	r3, [r4, #16]
 8003e2a:	e7ba      	b.n	8003da2 <_printf_i+0x152>
 8003e2c:	680b      	ldr	r3, [r1, #0]
 8003e2e:	1d1a      	adds	r2, r3, #4
 8003e30:	600a      	str	r2, [r1, #0]
 8003e32:	681e      	ldr	r6, [r3, #0]
 8003e34:	2100      	movs	r1, #0
 8003e36:	4630      	mov	r0, r6
 8003e38:	6862      	ldr	r2, [r4, #4]
 8003e3a:	f000 f82f 	bl	8003e9c <memchr>
 8003e3e:	b108      	cbz	r0, 8003e44 <_printf_i+0x1f4>
 8003e40:	1b80      	subs	r0, r0, r6
 8003e42:	6060      	str	r0, [r4, #4]
 8003e44:	6863      	ldr	r3, [r4, #4]
 8003e46:	6123      	str	r3, [r4, #16]
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e4e:	e7a8      	b.n	8003da2 <_printf_i+0x152>
 8003e50:	4632      	mov	r2, r6
 8003e52:	4649      	mov	r1, r9
 8003e54:	4640      	mov	r0, r8
 8003e56:	6923      	ldr	r3, [r4, #16]
 8003e58:	47d0      	blx	sl
 8003e5a:	3001      	adds	r0, #1
 8003e5c:	d0ab      	beq.n	8003db6 <_printf_i+0x166>
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	079b      	lsls	r3, r3, #30
 8003e62:	d413      	bmi.n	8003e8c <_printf_i+0x23c>
 8003e64:	68e0      	ldr	r0, [r4, #12]
 8003e66:	9b03      	ldr	r3, [sp, #12]
 8003e68:	4298      	cmp	r0, r3
 8003e6a:	bfb8      	it	lt
 8003e6c:	4618      	movlt	r0, r3
 8003e6e:	e7a4      	b.n	8003dba <_printf_i+0x16a>
 8003e70:	2301      	movs	r3, #1
 8003e72:	4632      	mov	r2, r6
 8003e74:	4649      	mov	r1, r9
 8003e76:	4640      	mov	r0, r8
 8003e78:	47d0      	blx	sl
 8003e7a:	3001      	adds	r0, #1
 8003e7c:	d09b      	beq.n	8003db6 <_printf_i+0x166>
 8003e7e:	3501      	adds	r5, #1
 8003e80:	68e3      	ldr	r3, [r4, #12]
 8003e82:	9903      	ldr	r1, [sp, #12]
 8003e84:	1a5b      	subs	r3, r3, r1
 8003e86:	42ab      	cmp	r3, r5
 8003e88:	dcf2      	bgt.n	8003e70 <_printf_i+0x220>
 8003e8a:	e7eb      	b.n	8003e64 <_printf_i+0x214>
 8003e8c:	2500      	movs	r5, #0
 8003e8e:	f104 0619 	add.w	r6, r4, #25
 8003e92:	e7f5      	b.n	8003e80 <_printf_i+0x230>
 8003e94:	080041a5 	.word	0x080041a5
 8003e98:	080041b6 	.word	0x080041b6

08003e9c <memchr>:
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	b510      	push	{r4, lr}
 8003ea0:	b2c9      	uxtb	r1, r1
 8003ea2:	4402      	add	r2, r0
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	d101      	bne.n	8003eae <memchr+0x12>
 8003eaa:	2000      	movs	r0, #0
 8003eac:	e003      	b.n	8003eb6 <memchr+0x1a>
 8003eae:	7804      	ldrb	r4, [r0, #0]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	428c      	cmp	r4, r1
 8003eb4:	d1f6      	bne.n	8003ea4 <memchr+0x8>
 8003eb6:	bd10      	pop	{r4, pc}

08003eb8 <memcpy>:
 8003eb8:	440a      	add	r2, r1
 8003eba:	4291      	cmp	r1, r2
 8003ebc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ec0:	d100      	bne.n	8003ec4 <memcpy+0xc>
 8003ec2:	4770      	bx	lr
 8003ec4:	b510      	push	{r4, lr}
 8003ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eca:	4291      	cmp	r1, r2
 8003ecc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ed0:	d1f9      	bne.n	8003ec6 <memcpy+0xe>
 8003ed2:	bd10      	pop	{r4, pc}

08003ed4 <memmove>:
 8003ed4:	4288      	cmp	r0, r1
 8003ed6:	b510      	push	{r4, lr}
 8003ed8:	eb01 0402 	add.w	r4, r1, r2
 8003edc:	d902      	bls.n	8003ee4 <memmove+0x10>
 8003ede:	4284      	cmp	r4, r0
 8003ee0:	4623      	mov	r3, r4
 8003ee2:	d807      	bhi.n	8003ef4 <memmove+0x20>
 8003ee4:	1e43      	subs	r3, r0, #1
 8003ee6:	42a1      	cmp	r1, r4
 8003ee8:	d008      	beq.n	8003efc <memmove+0x28>
 8003eea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003eee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ef2:	e7f8      	b.n	8003ee6 <memmove+0x12>
 8003ef4:	4601      	mov	r1, r0
 8003ef6:	4402      	add	r2, r0
 8003ef8:	428a      	cmp	r2, r1
 8003efa:	d100      	bne.n	8003efe <memmove+0x2a>
 8003efc:	bd10      	pop	{r4, pc}
 8003efe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f06:	e7f7      	b.n	8003ef8 <memmove+0x24>

08003f08 <_free_r>:
 8003f08:	b538      	push	{r3, r4, r5, lr}
 8003f0a:	4605      	mov	r5, r0
 8003f0c:	2900      	cmp	r1, #0
 8003f0e:	d043      	beq.n	8003f98 <_free_r+0x90>
 8003f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f14:	1f0c      	subs	r4, r1, #4
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	bfb8      	it	lt
 8003f1a:	18e4      	addlt	r4, r4, r3
 8003f1c:	f000 f8d0 	bl	80040c0 <__malloc_lock>
 8003f20:	4a1e      	ldr	r2, [pc, #120]	; (8003f9c <_free_r+0x94>)
 8003f22:	6813      	ldr	r3, [r2, #0]
 8003f24:	4610      	mov	r0, r2
 8003f26:	b933      	cbnz	r3, 8003f36 <_free_r+0x2e>
 8003f28:	6063      	str	r3, [r4, #4]
 8003f2a:	6014      	str	r4, [r2, #0]
 8003f2c:	4628      	mov	r0, r5
 8003f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f32:	f000 b8cb 	b.w	80040cc <__malloc_unlock>
 8003f36:	42a3      	cmp	r3, r4
 8003f38:	d90a      	bls.n	8003f50 <_free_r+0x48>
 8003f3a:	6821      	ldr	r1, [r4, #0]
 8003f3c:	1862      	adds	r2, r4, r1
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	bf01      	itttt	eq
 8003f42:	681a      	ldreq	r2, [r3, #0]
 8003f44:	685b      	ldreq	r3, [r3, #4]
 8003f46:	1852      	addeq	r2, r2, r1
 8003f48:	6022      	streq	r2, [r4, #0]
 8003f4a:	6063      	str	r3, [r4, #4]
 8003f4c:	6004      	str	r4, [r0, #0]
 8003f4e:	e7ed      	b.n	8003f2c <_free_r+0x24>
 8003f50:	461a      	mov	r2, r3
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	b10b      	cbz	r3, 8003f5a <_free_r+0x52>
 8003f56:	42a3      	cmp	r3, r4
 8003f58:	d9fa      	bls.n	8003f50 <_free_r+0x48>
 8003f5a:	6811      	ldr	r1, [r2, #0]
 8003f5c:	1850      	adds	r0, r2, r1
 8003f5e:	42a0      	cmp	r0, r4
 8003f60:	d10b      	bne.n	8003f7a <_free_r+0x72>
 8003f62:	6820      	ldr	r0, [r4, #0]
 8003f64:	4401      	add	r1, r0
 8003f66:	1850      	adds	r0, r2, r1
 8003f68:	4283      	cmp	r3, r0
 8003f6a:	6011      	str	r1, [r2, #0]
 8003f6c:	d1de      	bne.n	8003f2c <_free_r+0x24>
 8003f6e:	6818      	ldr	r0, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4401      	add	r1, r0
 8003f74:	6011      	str	r1, [r2, #0]
 8003f76:	6053      	str	r3, [r2, #4]
 8003f78:	e7d8      	b.n	8003f2c <_free_r+0x24>
 8003f7a:	d902      	bls.n	8003f82 <_free_r+0x7a>
 8003f7c:	230c      	movs	r3, #12
 8003f7e:	602b      	str	r3, [r5, #0]
 8003f80:	e7d4      	b.n	8003f2c <_free_r+0x24>
 8003f82:	6820      	ldr	r0, [r4, #0]
 8003f84:	1821      	adds	r1, r4, r0
 8003f86:	428b      	cmp	r3, r1
 8003f88:	bf01      	itttt	eq
 8003f8a:	6819      	ldreq	r1, [r3, #0]
 8003f8c:	685b      	ldreq	r3, [r3, #4]
 8003f8e:	1809      	addeq	r1, r1, r0
 8003f90:	6021      	streq	r1, [r4, #0]
 8003f92:	6063      	str	r3, [r4, #4]
 8003f94:	6054      	str	r4, [r2, #4]
 8003f96:	e7c9      	b.n	8003f2c <_free_r+0x24>
 8003f98:	bd38      	pop	{r3, r4, r5, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000098 	.word	0x20000098

08003fa0 <_malloc_r>:
 8003fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa2:	1ccd      	adds	r5, r1, #3
 8003fa4:	f025 0503 	bic.w	r5, r5, #3
 8003fa8:	3508      	adds	r5, #8
 8003faa:	2d0c      	cmp	r5, #12
 8003fac:	bf38      	it	cc
 8003fae:	250c      	movcc	r5, #12
 8003fb0:	2d00      	cmp	r5, #0
 8003fb2:	4606      	mov	r6, r0
 8003fb4:	db01      	blt.n	8003fba <_malloc_r+0x1a>
 8003fb6:	42a9      	cmp	r1, r5
 8003fb8:	d903      	bls.n	8003fc2 <_malloc_r+0x22>
 8003fba:	230c      	movs	r3, #12
 8003fbc:	6033      	str	r3, [r6, #0]
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fc2:	f000 f87d 	bl	80040c0 <__malloc_lock>
 8003fc6:	4921      	ldr	r1, [pc, #132]	; (800404c <_malloc_r+0xac>)
 8003fc8:	680a      	ldr	r2, [r1, #0]
 8003fca:	4614      	mov	r4, r2
 8003fcc:	b99c      	cbnz	r4, 8003ff6 <_malloc_r+0x56>
 8003fce:	4f20      	ldr	r7, [pc, #128]	; (8004050 <_malloc_r+0xb0>)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	b923      	cbnz	r3, 8003fde <_malloc_r+0x3e>
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	4630      	mov	r0, r6
 8003fd8:	f000 f862 	bl	80040a0 <_sbrk_r>
 8003fdc:	6038      	str	r0, [r7, #0]
 8003fde:	4629      	mov	r1, r5
 8003fe0:	4630      	mov	r0, r6
 8003fe2:	f000 f85d 	bl	80040a0 <_sbrk_r>
 8003fe6:	1c43      	adds	r3, r0, #1
 8003fe8:	d123      	bne.n	8004032 <_malloc_r+0x92>
 8003fea:	230c      	movs	r3, #12
 8003fec:	4630      	mov	r0, r6
 8003fee:	6033      	str	r3, [r6, #0]
 8003ff0:	f000 f86c 	bl	80040cc <__malloc_unlock>
 8003ff4:	e7e3      	b.n	8003fbe <_malloc_r+0x1e>
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	1b5b      	subs	r3, r3, r5
 8003ffa:	d417      	bmi.n	800402c <_malloc_r+0x8c>
 8003ffc:	2b0b      	cmp	r3, #11
 8003ffe:	d903      	bls.n	8004008 <_malloc_r+0x68>
 8004000:	6023      	str	r3, [r4, #0]
 8004002:	441c      	add	r4, r3
 8004004:	6025      	str	r5, [r4, #0]
 8004006:	e004      	b.n	8004012 <_malloc_r+0x72>
 8004008:	6863      	ldr	r3, [r4, #4]
 800400a:	42a2      	cmp	r2, r4
 800400c:	bf0c      	ite	eq
 800400e:	600b      	streq	r3, [r1, #0]
 8004010:	6053      	strne	r3, [r2, #4]
 8004012:	4630      	mov	r0, r6
 8004014:	f000 f85a 	bl	80040cc <__malloc_unlock>
 8004018:	f104 000b 	add.w	r0, r4, #11
 800401c:	1d23      	adds	r3, r4, #4
 800401e:	f020 0007 	bic.w	r0, r0, #7
 8004022:	1ac2      	subs	r2, r0, r3
 8004024:	d0cc      	beq.n	8003fc0 <_malloc_r+0x20>
 8004026:	1a1b      	subs	r3, r3, r0
 8004028:	50a3      	str	r3, [r4, r2]
 800402a:	e7c9      	b.n	8003fc0 <_malloc_r+0x20>
 800402c:	4622      	mov	r2, r4
 800402e:	6864      	ldr	r4, [r4, #4]
 8004030:	e7cc      	b.n	8003fcc <_malloc_r+0x2c>
 8004032:	1cc4      	adds	r4, r0, #3
 8004034:	f024 0403 	bic.w	r4, r4, #3
 8004038:	42a0      	cmp	r0, r4
 800403a:	d0e3      	beq.n	8004004 <_malloc_r+0x64>
 800403c:	1a21      	subs	r1, r4, r0
 800403e:	4630      	mov	r0, r6
 8004040:	f000 f82e 	bl	80040a0 <_sbrk_r>
 8004044:	3001      	adds	r0, #1
 8004046:	d1dd      	bne.n	8004004 <_malloc_r+0x64>
 8004048:	e7cf      	b.n	8003fea <_malloc_r+0x4a>
 800404a:	bf00      	nop
 800404c:	20000098 	.word	0x20000098
 8004050:	2000009c 	.word	0x2000009c

08004054 <_realloc_r>:
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	4607      	mov	r7, r0
 8004058:	4614      	mov	r4, r2
 800405a:	460e      	mov	r6, r1
 800405c:	b921      	cbnz	r1, 8004068 <_realloc_r+0x14>
 800405e:	4611      	mov	r1, r2
 8004060:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004064:	f7ff bf9c 	b.w	8003fa0 <_malloc_r>
 8004068:	b922      	cbnz	r2, 8004074 <_realloc_r+0x20>
 800406a:	f7ff ff4d 	bl	8003f08 <_free_r>
 800406e:	4625      	mov	r5, r4
 8004070:	4628      	mov	r0, r5
 8004072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004074:	f000 f830 	bl	80040d8 <_malloc_usable_size_r>
 8004078:	42a0      	cmp	r0, r4
 800407a:	d20f      	bcs.n	800409c <_realloc_r+0x48>
 800407c:	4621      	mov	r1, r4
 800407e:	4638      	mov	r0, r7
 8004080:	f7ff ff8e 	bl	8003fa0 <_malloc_r>
 8004084:	4605      	mov	r5, r0
 8004086:	2800      	cmp	r0, #0
 8004088:	d0f2      	beq.n	8004070 <_realloc_r+0x1c>
 800408a:	4631      	mov	r1, r6
 800408c:	4622      	mov	r2, r4
 800408e:	f7ff ff13 	bl	8003eb8 <memcpy>
 8004092:	4631      	mov	r1, r6
 8004094:	4638      	mov	r0, r7
 8004096:	f7ff ff37 	bl	8003f08 <_free_r>
 800409a:	e7e9      	b.n	8004070 <_realloc_r+0x1c>
 800409c:	4635      	mov	r5, r6
 800409e:	e7e7      	b.n	8004070 <_realloc_r+0x1c>

080040a0 <_sbrk_r>:
 80040a0:	b538      	push	{r3, r4, r5, lr}
 80040a2:	2300      	movs	r3, #0
 80040a4:	4d05      	ldr	r5, [pc, #20]	; (80040bc <_sbrk_r+0x1c>)
 80040a6:	4604      	mov	r4, r0
 80040a8:	4608      	mov	r0, r1
 80040aa:	602b      	str	r3, [r5, #0]
 80040ac:	f7fc fc8c 	bl	80009c8 <_sbrk>
 80040b0:	1c43      	adds	r3, r0, #1
 80040b2:	d102      	bne.n	80040ba <_sbrk_r+0x1a>
 80040b4:	682b      	ldr	r3, [r5, #0]
 80040b6:	b103      	cbz	r3, 80040ba <_sbrk_r+0x1a>
 80040b8:	6023      	str	r3, [r4, #0]
 80040ba:	bd38      	pop	{r3, r4, r5, pc}
 80040bc:	200001dc 	.word	0x200001dc

080040c0 <__malloc_lock>:
 80040c0:	4801      	ldr	r0, [pc, #4]	; (80040c8 <__malloc_lock+0x8>)
 80040c2:	f000 b811 	b.w	80040e8 <__retarget_lock_acquire_recursive>
 80040c6:	bf00      	nop
 80040c8:	200001e4 	.word	0x200001e4

080040cc <__malloc_unlock>:
 80040cc:	4801      	ldr	r0, [pc, #4]	; (80040d4 <__malloc_unlock+0x8>)
 80040ce:	f000 b80c 	b.w	80040ea <__retarget_lock_release_recursive>
 80040d2:	bf00      	nop
 80040d4:	200001e4 	.word	0x200001e4

080040d8 <_malloc_usable_size_r>:
 80040d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040dc:	1f18      	subs	r0, r3, #4
 80040de:	2b00      	cmp	r3, #0
 80040e0:	bfbc      	itt	lt
 80040e2:	580b      	ldrlt	r3, [r1, r0]
 80040e4:	18c0      	addlt	r0, r0, r3
 80040e6:	4770      	bx	lr

080040e8 <__retarget_lock_acquire_recursive>:
 80040e8:	4770      	bx	lr

080040ea <__retarget_lock_release_recursive>:
 80040ea:	4770      	bx	lr

080040ec <_init>:
 80040ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ee:	bf00      	nop
 80040f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040f2:	bc08      	pop	{r3}
 80040f4:	469e      	mov	lr, r3
 80040f6:	4770      	bx	lr

080040f8 <_fini>:
 80040f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fa:	bf00      	nop
 80040fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040fe:	bc08      	pop	{r3}
 8004100:	469e      	mov	lr, r3
 8004102:	4770      	bx	lr
