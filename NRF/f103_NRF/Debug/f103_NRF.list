
f103_NRF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003974  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08003a80  08003a80  00013a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003be4  08003be4  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08003be4  08003be4  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003be4  08003be4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be4  08003be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08003bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000080  08003c6c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000904  200001e4  08003c6c  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0ce  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001acf  00000000  00000000  0002c177  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d68  00000000  00000000  0002dc48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c90  00000000  00000000  0002e9b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017f0e  00000000  00000000  0002f640  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009cb5  00000000  00000000  0004754e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c19b  00000000  00000000  00051203  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dd39e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be0  00000000  00000000  000dd41c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a68 	.word	0x08003a68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08003a68 	.word	0x08003a68

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b590      	push	{r4, r7, lr}
 800015e:	b085      	sub	sp, #20
 8000160:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fddd 	bl	8000d20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f911 	bl	800038c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 fa01 	bl	8000570 <MX_GPIO_Init>
  MX_SPI1_Init();
 800016e:	f000 f953 	bl	8000418 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000172:	f000 f9d3 	bl	800051c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000176:	f000 f985 	bl	8000484 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  sprintf (UART_msg_TX, "start\r\n");
 800017a:	4b78      	ldr	r3, [pc, #480]	; (800035c <main+0x200>)
 800017c:	4a78      	ldr	r2, [pc, #480]	; (8000360 <main+0x204>)
 800017e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000182:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_UART_Transmit (&huart2, (unsigned char*) UART_msg_TX, strlen(UART_msg_TX), 0xFFFF);
 8000186:	4875      	ldr	r0, [pc, #468]	; (800035c <main+0x200>)
 8000188:	f7ff ffe0 	bl	800014c <strlen>
 800018c:	4603      	mov	r3, r0
 800018e:	b29a      	uxth	r2, r3
 8000190:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000194:	4971      	ldr	r1, [pc, #452]	; (800035c <main+0x200>)
 8000196:	4873      	ldr	r0, [pc, #460]	; (8000364 <main+0x208>)
 8000198:	f002 feb7 	bl	8002f0a <HAL_UART_Transmit>
  NRF24_ini ();
 800019c:	f000 fbec 	bl	8000978 <NRF24_ini>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 80001a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a4:	f000 fe1e 	bl	8000de4 <HAL_Delay>
	  sprintf (UART_msg_TX,"CONFIG: 0x%02X\r\n", NRF24_ReadReg(CONFIG));
 80001a8:	2000      	movs	r0, #0
 80001aa:	f000 faaf 	bl	800070c <NRF24_ReadReg>
 80001ae:	4603      	mov	r3, r0
 80001b0:	461a      	mov	r2, r3
 80001b2:	496d      	ldr	r1, [pc, #436]	; (8000368 <main+0x20c>)
 80001b4:	4869      	ldr	r0, [pc, #420]	; (800035c <main+0x200>)
 80001b6:	f003 f845 	bl	8003244 <siprintf>
	  HAL_UART_Transmit(&huart2, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 80001ba:	4868      	ldr	r0, [pc, #416]	; (800035c <main+0x200>)
 80001bc:	f7ff ffc6 	bl	800014c <strlen>
 80001c0:	4603      	mov	r3, r0
 80001c2:	b29a      	uxth	r2, r3
 80001c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001c8:	4964      	ldr	r1, [pc, #400]	; (800035c <main+0x200>)
 80001ca:	4866      	ldr	r0, [pc, #408]	; (8000364 <main+0x208>)
 80001cc:	f002 fe9d 	bl	8002f0a <HAL_UART_Transmit>

	  sprintf (UART_msg_TX,"EN_AA: 0x%02X\r\n", NRF24_ReadReg(EN_AA));
 80001d0:	2001      	movs	r0, #1
 80001d2:	f000 fa9b 	bl	800070c <NRF24_ReadReg>
 80001d6:	4603      	mov	r3, r0
 80001d8:	461a      	mov	r2, r3
 80001da:	4964      	ldr	r1, [pc, #400]	; (800036c <main+0x210>)
 80001dc:	485f      	ldr	r0, [pc, #380]	; (800035c <main+0x200>)
 80001de:	f003 f831 	bl	8003244 <siprintf>
	  HAL_UART_Transmit(&huart2, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 80001e2:	485e      	ldr	r0, [pc, #376]	; (800035c <main+0x200>)
 80001e4:	f7ff ffb2 	bl	800014c <strlen>
 80001e8:	4603      	mov	r3, r0
 80001ea:	b29a      	uxth	r2, r3
 80001ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001f0:	495a      	ldr	r1, [pc, #360]	; (800035c <main+0x200>)
 80001f2:	485c      	ldr	r0, [pc, #368]	; (8000364 <main+0x208>)
 80001f4:	f002 fe89 	bl	8002f0a <HAL_UART_Transmit>

	  sprintf (UART_msg_TX,"EN_RXADDR: 0x%02X\r\n", NRF24_ReadReg (EN_RXADDR));
 80001f8:	2002      	movs	r0, #2
 80001fa:	f000 fa87 	bl	800070c <NRF24_ReadReg>
 80001fe:	4603      	mov	r3, r0
 8000200:	461a      	mov	r2, r3
 8000202:	495b      	ldr	r1, [pc, #364]	; (8000370 <main+0x214>)
 8000204:	4855      	ldr	r0, [pc, #340]	; (800035c <main+0x200>)
 8000206:	f003 f81d 	bl	8003244 <siprintf>
	  HAL_UART_Transmit(&huart2, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 800020a:	4854      	ldr	r0, [pc, #336]	; (800035c <main+0x200>)
 800020c:	f7ff ff9e 	bl	800014c <strlen>
 8000210:	4603      	mov	r3, r0
 8000212:	b29a      	uxth	r2, r3
 8000214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000218:	4950      	ldr	r1, [pc, #320]	; (800035c <main+0x200>)
 800021a:	4852      	ldr	r0, [pc, #328]	; (8000364 <main+0x208>)
 800021c:	f002 fe75 	bl	8002f0a <HAL_UART_Transmit>

	  sprintf (UART_msg_TX,"STATUS: 0x%02X\r\n", NRF24_ReadReg(STATUS));
 8000220:	2007      	movs	r0, #7
 8000222:	f000 fa73 	bl	800070c <NRF24_ReadReg>
 8000226:	4603      	mov	r3, r0
 8000228:	461a      	mov	r2, r3
 800022a:	4952      	ldr	r1, [pc, #328]	; (8000374 <main+0x218>)
 800022c:	484b      	ldr	r0, [pc, #300]	; (800035c <main+0x200>)
 800022e:	f003 f809 	bl	8003244 <siprintf>
	  HAL_UART_Transmit(&huart2, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 8000232:	484a      	ldr	r0, [pc, #296]	; (800035c <main+0x200>)
 8000234:	f7ff ff8a 	bl	800014c <strlen>
 8000238:	4603      	mov	r3, r0
 800023a:	b29a      	uxth	r2, r3
 800023c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000240:	4946      	ldr	r1, [pc, #280]	; (800035c <main+0x200>)
 8000242:	4848      	ldr	r0, [pc, #288]	; (8000364 <main+0x208>)
 8000244:	f002 fe61 	bl	8002f0a <HAL_UART_Transmit>

	  sprintf (UART_msg_TX,"RF_SETUP: 0x%02X\r\n", NRF24_ReadReg(RF_SETUP));
 8000248:	2006      	movs	r0, #6
 800024a:	f000 fa5f 	bl	800070c <NRF24_ReadReg>
 800024e:	4603      	mov	r3, r0
 8000250:	461a      	mov	r2, r3
 8000252:	4949      	ldr	r1, [pc, #292]	; (8000378 <main+0x21c>)
 8000254:	4841      	ldr	r0, [pc, #260]	; (800035c <main+0x200>)
 8000256:	f002 fff5 	bl	8003244 <siprintf>
	  HAL_UART_Transmit(&huart2, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 800025a:	4840      	ldr	r0, [pc, #256]	; (800035c <main+0x200>)
 800025c:	f7ff ff76 	bl	800014c <strlen>
 8000260:	4603      	mov	r3, r0
 8000262:	b29a      	uxth	r2, r3
 8000264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000268:	493c      	ldr	r1, [pc, #240]	; (800035c <main+0x200>)
 800026a:	483e      	ldr	r0, [pc, #248]	; (8000364 <main+0x208>)
 800026c:	f002 fe4d 	bl	8002f0a <HAL_UART_Transmit>

	  NRF24_Read_Buf (TX_ADDR, buffer, TX_ADR_WIDTH);
 8000270:	2205      	movs	r2, #5
 8000272:	4942      	ldr	r1, [pc, #264]	; (800037c <main+0x220>)
 8000274:	2010      	movs	r0, #16
 8000276:	f000 fae1 	bl	800083c <NRF24_Read_Buf>
	  sprintf (UART_msg_TX,"TX_ADDR: 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X\r\n", buffer[0], buffer[1], buffer[2], buffer[3], buffer[4]);
 800027a:	4b40      	ldr	r3, [pc, #256]	; (800037c <main+0x220>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	4618      	mov	r0, r3
 8000280:	4b3e      	ldr	r3, [pc, #248]	; (800037c <main+0x220>)
 8000282:	785b      	ldrb	r3, [r3, #1]
 8000284:	461c      	mov	r4, r3
 8000286:	4b3d      	ldr	r3, [pc, #244]	; (800037c <main+0x220>)
 8000288:	789b      	ldrb	r3, [r3, #2]
 800028a:	461a      	mov	r2, r3
 800028c:	4b3b      	ldr	r3, [pc, #236]	; (800037c <main+0x220>)
 800028e:	78db      	ldrb	r3, [r3, #3]
 8000290:	4619      	mov	r1, r3
 8000292:	4b3a      	ldr	r3, [pc, #232]	; (800037c <main+0x220>)
 8000294:	791b      	ldrb	r3, [r3, #4]
 8000296:	9302      	str	r3, [sp, #8]
 8000298:	9101      	str	r1, [sp, #4]
 800029a:	9200      	str	r2, [sp, #0]
 800029c:	4623      	mov	r3, r4
 800029e:	4602      	mov	r2, r0
 80002a0:	4937      	ldr	r1, [pc, #220]	; (8000380 <main+0x224>)
 80002a2:	482e      	ldr	r0, [pc, #184]	; (800035c <main+0x200>)
 80002a4:	f002 ffce 	bl	8003244 <siprintf>
	  HAL_UART_Transmit(&huart2, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 80002a8:	482c      	ldr	r0, [pc, #176]	; (800035c <main+0x200>)
 80002aa:	f7ff ff4f 	bl	800014c <strlen>
 80002ae:	4603      	mov	r3, r0
 80002b0:	b29a      	uxth	r2, r3
 80002b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002b6:	4929      	ldr	r1, [pc, #164]	; (800035c <main+0x200>)
 80002b8:	482a      	ldr	r0, [pc, #168]	; (8000364 <main+0x208>)
 80002ba:	f002 fe26 	bl	8002f0a <HAL_UART_Transmit>

/*	  NRF24_Read_Buf (RX_ADDR_P0, buffer, 3);
	  sprintf (UART_msg_TX,"RX0_ADDR: 0x%02X, 0x%02X, 0x%02X\r\n", buffer[0], buffer[1], buffer[2]);
	  HAL_UART_Transmit(&huart2, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);*/

	  NRF24_Read_Buf (RX_ADDR_P1, buffer, TX_ADR_WIDTH);
 80002be:	2205      	movs	r2, #5
 80002c0:	492e      	ldr	r1, [pc, #184]	; (800037c <main+0x220>)
 80002c2:	200b      	movs	r0, #11
 80002c4:	f000 faba 	bl	800083c <NRF24_Read_Buf>
	  sprintf (UART_msg_TX,"RX1_ADDR: 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X\r\n", buffer[0], buffer[1], buffer[2], buffer[3], buffer[4]);
 80002c8:	4b2c      	ldr	r3, [pc, #176]	; (800037c <main+0x220>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	4618      	mov	r0, r3
 80002ce:	4b2b      	ldr	r3, [pc, #172]	; (800037c <main+0x220>)
 80002d0:	785b      	ldrb	r3, [r3, #1]
 80002d2:	461c      	mov	r4, r3
 80002d4:	4b29      	ldr	r3, [pc, #164]	; (800037c <main+0x220>)
 80002d6:	789b      	ldrb	r3, [r3, #2]
 80002d8:	461a      	mov	r2, r3
 80002da:	4b28      	ldr	r3, [pc, #160]	; (800037c <main+0x220>)
 80002dc:	78db      	ldrb	r3, [r3, #3]
 80002de:	4619      	mov	r1, r3
 80002e0:	4b26      	ldr	r3, [pc, #152]	; (800037c <main+0x220>)
 80002e2:	791b      	ldrb	r3, [r3, #4]
 80002e4:	9302      	str	r3, [sp, #8]
 80002e6:	9101      	str	r1, [sp, #4]
 80002e8:	9200      	str	r2, [sp, #0]
 80002ea:	4623      	mov	r3, r4
 80002ec:	4602      	mov	r2, r0
 80002ee:	4925      	ldr	r1, [pc, #148]	; (8000384 <main+0x228>)
 80002f0:	481a      	ldr	r0, [pc, #104]	; (800035c <main+0x200>)
 80002f2:	f002 ffa7 	bl	8003244 <siprintf>
	  HAL_UART_Transmit(&huart2, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 80002f6:	4819      	ldr	r0, [pc, #100]	; (800035c <main+0x200>)
 80002f8:	f7ff ff28 	bl	800014c <strlen>
 80002fc:	4603      	mov	r3, r0
 80002fe:	b29a      	uxth	r2, r3
 8000300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000304:	4915      	ldr	r1, [pc, #84]	; (800035c <main+0x200>)
 8000306:	4817      	ldr	r0, [pc, #92]	; (8000364 <main+0x208>)
 8000308:	f002 fdff 	bl	8002f0a <HAL_UART_Transmit>

	  NRF24_Read_Buf (RX_ADDR_P2, buffer, TX_ADR_WIDTH);
 800030c:	2205      	movs	r2, #5
 800030e:	491b      	ldr	r1, [pc, #108]	; (800037c <main+0x220>)
 8000310:	200c      	movs	r0, #12
 8000312:	f000 fa93 	bl	800083c <NRF24_Read_Buf>
	  sprintf (UART_msg_TX,"RX2_ADDR: 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X\r\n", buffer[0], buffer[1], buffer[2], buffer[3], buffer[4]);
 8000316:	4b19      	ldr	r3, [pc, #100]	; (800037c <main+0x220>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	4618      	mov	r0, r3
 800031c:	4b17      	ldr	r3, [pc, #92]	; (800037c <main+0x220>)
 800031e:	785b      	ldrb	r3, [r3, #1]
 8000320:	461c      	mov	r4, r3
 8000322:	4b16      	ldr	r3, [pc, #88]	; (800037c <main+0x220>)
 8000324:	789b      	ldrb	r3, [r3, #2]
 8000326:	461a      	mov	r2, r3
 8000328:	4b14      	ldr	r3, [pc, #80]	; (800037c <main+0x220>)
 800032a:	78db      	ldrb	r3, [r3, #3]
 800032c:	4619      	mov	r1, r3
 800032e:	4b13      	ldr	r3, [pc, #76]	; (800037c <main+0x220>)
 8000330:	791b      	ldrb	r3, [r3, #4]
 8000332:	9302      	str	r3, [sp, #8]
 8000334:	9101      	str	r1, [sp, #4]
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	4623      	mov	r3, r4
 800033a:	4602      	mov	r2, r0
 800033c:	4912      	ldr	r1, [pc, #72]	; (8000388 <main+0x22c>)
 800033e:	4807      	ldr	r0, [pc, #28]	; (800035c <main+0x200>)
 8000340:	f002 ff80 	bl	8003244 <siprintf>
	  HAL_UART_Transmit(&huart2, (unsigned char*)UART_msg_TX, strlen(UART_msg_TX), 0x1000);
 8000344:	4805      	ldr	r0, [pc, #20]	; (800035c <main+0x200>)
 8000346:	f7ff ff01 	bl	800014c <strlen>
 800034a:	4603      	mov	r3, r0
 800034c:	b29a      	uxth	r2, r3
 800034e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000352:	4902      	ldr	r1, [pc, #8]	; (800035c <main+0x200>)
 8000354:	4803      	ldr	r0, [pc, #12]	; (8000364 <main+0x208>)
 8000356:	f002 fdd8 	bl	8002f0a <HAL_UART_Transmit>
  {
 800035a:	e721      	b.n	80001a0 <main+0x44>
 800035c:	200000b4 	.word	0x200000b4
 8000360:	08003a80 	.word	0x08003a80
 8000364:	2000019c 	.word	0x2000019c
 8000368:	08003a88 	.word	0x08003a88
 800036c:	08003a9c 	.word	0x08003a9c
 8000370:	08003aac 	.word	0x08003aac
 8000374:	08003ac0 	.word	0x08003ac0
 8000378:	08003ad4 	.word	0x08003ad4
 800037c:	2000009c 	.word	0x2000009c
 8000380:	08003ae8 	.word	0x08003ae8
 8000384:	08003b1c 	.word	0x08003b1c
 8000388:	08003b50 	.word	0x08003b50

0800038c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b090      	sub	sp, #64	; 0x40
 8000390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000392:	f107 0318 	add.w	r3, r7, #24
 8000396:	2228      	movs	r2, #40	; 0x28
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f002 ff4a 	bl	8003234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
 80003ac:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003ae:	2301      	movs	r3, #1
 80003b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003bc:	2301      	movs	r3, #1
 80003be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c0:	2302      	movs	r3, #2
 80003c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80003ca:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80003ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d0:	f107 0318 	add.w	r3, r7, #24
 80003d4:	4618      	mov	r0, r3
 80003d6:	f000 ffa7 	bl	8001328 <HAL_RCC_OscConfig>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003e0:	f000 fb20 	bl	8000a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e4:	230f      	movs	r3, #15
 80003e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e8:	2302      	movs	r3, #2
 80003ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80003ec:	2380      	movs	r3, #128	; 0x80
 80003ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80003f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2102      	movs	r1, #2
 8000400:	4618      	mov	r0, r3
 8000402:	f001 fa11 	bl	8001828 <HAL_RCC_ClockConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800040c:	f000 fb0a 	bl	8000a24 <Error_Handler>
  }
}
 8000410:	bf00      	nop
 8000412:	3740      	adds	r7, #64	; 0x40
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800041c:	4b17      	ldr	r3, [pc, #92]	; (800047c <MX_SPI1_Init+0x64>)
 800041e:	4a18      	ldr	r2, [pc, #96]	; (8000480 <MX_SPI1_Init+0x68>)
 8000420:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000422:	4b16      	ldr	r3, [pc, #88]	; (800047c <MX_SPI1_Init+0x64>)
 8000424:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000428:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800042a:	4b14      	ldr	r3, [pc, #80]	; (800047c <MX_SPI1_Init+0x64>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000430:	4b12      	ldr	r3, [pc, #72]	; (800047c <MX_SPI1_Init+0x64>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000436:	4b11      	ldr	r3, [pc, #68]	; (800047c <MX_SPI1_Init+0x64>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800043c:	4b0f      	ldr	r3, [pc, #60]	; (800047c <MX_SPI1_Init+0x64>)
 800043e:	2200      	movs	r2, #0
 8000440:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <MX_SPI1_Init+0x64>)
 8000444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000448:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <MX_SPI1_Init+0x64>)
 800044c:	2210      	movs	r2, #16
 800044e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000450:	4b0a      	ldr	r3, [pc, #40]	; (800047c <MX_SPI1_Init+0x64>)
 8000452:	2200      	movs	r2, #0
 8000454:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000456:	4b09      	ldr	r3, [pc, #36]	; (800047c <MX_SPI1_Init+0x64>)
 8000458:	2200      	movs	r2, #0
 800045a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800045c:	4b07      	ldr	r3, [pc, #28]	; (800047c <MX_SPI1_Init+0x64>)
 800045e:	2200      	movs	r2, #0
 8000460:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000462:	4b06      	ldr	r3, [pc, #24]	; (800047c <MX_SPI1_Init+0x64>)
 8000464:	220a      	movs	r2, #10
 8000466:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000468:	4804      	ldr	r0, [pc, #16]	; (800047c <MX_SPI1_Init+0x64>)
 800046a:	f001 fb79 	bl	8001b60 <HAL_SPI_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000474:	f000 fad6 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000144 	.word	0x20000144
 8000480:	40013000 	.word	0x40013000

08000484 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800048a:	f107 0308 	add.w	r3, r7, #8
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000498:	463b      	mov	r3, r7
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004a0:	4b1c      	ldr	r3, [pc, #112]	; (8000514 <MX_TIM3_Init+0x90>)
 80004a2:	4a1d      	ldr	r2, [pc, #116]	; (8000518 <MX_TIM3_Init+0x94>)
 80004a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 80004a6:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <MX_TIM3_Init+0x90>)
 80004a8:	221f      	movs	r2, #31
 80004aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ac:	4b19      	ldr	r3, [pc, #100]	; (8000514 <MX_TIM3_Init+0x90>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 80004b2:	4b18      	ldr	r3, [pc, #96]	; (8000514 <MX_TIM3_Init+0x90>)
 80004b4:	2209      	movs	r2, #9
 80004b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b8:	4b16      	ldr	r3, [pc, #88]	; (8000514 <MX_TIM3_Init+0x90>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004be:	4b15      	ldr	r3, [pc, #84]	; (8000514 <MX_TIM3_Init+0x90>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004c4:	4813      	ldr	r0, [pc, #76]	; (8000514 <MX_TIM3_Init+0x90>)
 80004c6:	f002 f8b7 	bl	8002638 <HAL_TIM_Base_Init>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80004d0:	f000 faa8 	bl	8000a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004da:	f107 0308 	add.w	r3, r7, #8
 80004de:	4619      	mov	r1, r3
 80004e0:	480c      	ldr	r0, [pc, #48]	; (8000514 <MX_TIM3_Init+0x90>)
 80004e2:	f002 fa81 	bl	80029e8 <HAL_TIM_ConfigClockSource>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80004ec:	f000 fa9a 	bl	8000a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f0:	2300      	movs	r3, #0
 80004f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004f8:	463b      	mov	r3, r7
 80004fa:	4619      	mov	r1, r3
 80004fc:	4805      	ldr	r0, [pc, #20]	; (8000514 <MX_TIM3_Init+0x90>)
 80004fe:	f002 fc47 	bl	8002d90 <HAL_TIMEx_MasterConfigSynchronization>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000508:	f000 fa8c 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800050c:	bf00      	nop
 800050e:	3718      	adds	r7, #24
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	200000fc 	.word	0x200000fc
 8000518:	40000400 	.word	0x40000400

0800051c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_USART2_UART_Init+0x4c>)
 8000522:	4a12      	ldr	r2, [pc, #72]	; (800056c <MX_USART2_UART_Init+0x50>)
 8000524:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000526:	4b10      	ldr	r3, [pc, #64]	; (8000568 <MX_USART2_UART_Init+0x4c>)
 8000528:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800052c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <MX_USART2_UART_Init+0x4c>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_USART2_UART_Init+0x4c>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <MX_USART2_UART_Init+0x4c>)
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_USART2_UART_Init+0x4c>)
 8000542:	220c      	movs	r2, #12
 8000544:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <MX_USART2_UART_Init+0x4c>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MX_USART2_UART_Init+0x4c>)
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <MX_USART2_UART_Init+0x4c>)
 8000554:	f002 fc8c 	bl	8002e70 <HAL_UART_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800055e:	f000 fa61 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	2000019c 	.word	0x2000019c
 800056c:	40004400 	.word	0x40004400

08000570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 0310 	add.w	r3, r7, #16
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000584:	4b3d      	ldr	r3, [pc, #244]	; (800067c <MX_GPIO_Init+0x10c>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a3c      	ldr	r2, [pc, #240]	; (800067c <MX_GPIO_Init+0x10c>)
 800058a:	f043 0310 	orr.w	r3, r3, #16
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b3a      	ldr	r3, [pc, #232]	; (800067c <MX_GPIO_Init+0x10c>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0310 	and.w	r3, r3, #16
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800059c:	4b37      	ldr	r3, [pc, #220]	; (800067c <MX_GPIO_Init+0x10c>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a36      	ldr	r2, [pc, #216]	; (800067c <MX_GPIO_Init+0x10c>)
 80005a2:	f043 0320 	orr.w	r3, r3, #32
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b34      	ldr	r3, [pc, #208]	; (800067c <MX_GPIO_Init+0x10c>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0320 	and.w	r3, r3, #32
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	4b31      	ldr	r3, [pc, #196]	; (800067c <MX_GPIO_Init+0x10c>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a30      	ldr	r2, [pc, #192]	; (800067c <MX_GPIO_Init+0x10c>)
 80005ba:	f043 0304 	orr.w	r3, r3, #4
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b2e      	ldr	r3, [pc, #184]	; (800067c <MX_GPIO_Init+0x10c>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0304 	and.w	r3, r3, #4
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005cc:	4b2b      	ldr	r3, [pc, #172]	; (800067c <MX_GPIO_Init+0x10c>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a2a      	ldr	r2, [pc, #168]	; (800067c <MX_GPIO_Init+0x10c>)
 80005d2:	f043 0308 	orr.w	r3, r3, #8
 80005d6:	6193      	str	r3, [r2, #24]
 80005d8:	4b28      	ldr	r3, [pc, #160]	; (800067c <MX_GPIO_Init+0x10c>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f003 0308 	and.w	r3, r3, #8
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ea:	4825      	ldr	r0, [pc, #148]	; (8000680 <MX_GPIO_Init+0x110>)
 80005ec:	f000 fe84 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2110      	movs	r1, #16
 80005f4:	4823      	ldr	r0, [pc, #140]	; (8000684 <MX_GPIO_Init+0x114>)
 80005f6:	f000 fe7f 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L01_CE_GPIO_Port, L01_CE_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2101      	movs	r1, #1
 80005fe:	4822      	ldr	r0, [pc, #136]	; (8000688 <MX_GPIO_Init+0x118>)
 8000600:	f000 fe7a 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000604:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000608:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060a:	2301      	movs	r3, #1
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	2302      	movs	r3, #2
 8000614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000616:	f107 0310 	add.w	r3, r7, #16
 800061a:	4619      	mov	r1, r3
 800061c:	4818      	ldr	r0, [pc, #96]	; (8000680 <MX_GPIO_Init+0x110>)
 800061e:	f000 fd11 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000622:	2310      	movs	r3, #16
 8000624:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	2301      	movs	r3, #1
 8000628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2302      	movs	r3, #2
 8000630:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000632:	f107 0310 	add.w	r3, r7, #16
 8000636:	4619      	mov	r1, r3
 8000638:	4812      	ldr	r0, [pc, #72]	; (8000684 <MX_GPIO_Init+0x114>)
 800063a:	f000 fd03 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : L01_CE_Pin */
  GPIO_InitStruct.Pin = L01_CE_Pin;
 800063e:	2301      	movs	r3, #1
 8000640:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2302      	movs	r3, #2
 800064c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L01_CE_GPIO_Port, &GPIO_InitStruct);
 800064e:	f107 0310 	add.w	r3, r7, #16
 8000652:	4619      	mov	r1, r3
 8000654:	480c      	ldr	r0, [pc, #48]	; (8000688 <MX_GPIO_Init+0x118>)
 8000656:	f000 fcf5 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : L01_IRQ_Pin */
  GPIO_InitStruct.Pin = L01_IRQ_Pin;
 800065a:	2302      	movs	r3, #2
 800065c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L01_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000666:	f107 0310 	add.w	r3, r7, #16
 800066a:	4619      	mov	r1, r3
 800066c:	4806      	ldr	r0, [pc, #24]	; (8000688 <MX_GPIO_Init+0x118>)
 800066e:	f000 fce9 	bl	8001044 <HAL_GPIO_Init>

}
 8000672:	bf00      	nop
 8000674:	3720      	adds	r7, #32
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40021000 	.word	0x40021000
 8000680:	40011000 	.word	0x40011000
 8000684:	40010800 	.word	0x40010800
 8000688:	40010c00 	.word	0x40010c00

0800068c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//------------------------------------------------------------------------------------------------------------------------------------//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	if(htim==&htim3)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a09      	ldr	r2, [pc, #36]	; (80006bc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d109      	bne.n	80006b0 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		if (delay)
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d005      	beq.n	80006b0 <HAL_TIM_PeriodElapsedCallback+0x24>
			delay--; //уменьшаем задержку раз в 1 мкс
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	3b01      	subs	r3, #1
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80006ae:	801a      	strh	r2, [r3, #0]
	}
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	200000fc 	.word	0x200000fc
 80006c0:	200000b0 	.word	0x200000b0

080006c4 <DelayMicro>:
//------------------------------------------------------------------------------------------------------------------------------------//
void DelayMicro (__IO uint16_t delay_us) // IO=volatile,  указание компилятору, что эту переменную не трогать в процессе оптимизации кода
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start_IT(&htim3);
 80006ce:	480c      	ldr	r0, [pc, #48]	; (8000700 <DelayMicro+0x3c>)
 80006d0:	f002 f802 	bl	80026d8 <HAL_TIM_Base_Start_IT>
	delay = delay_us/10; //задержка раз в 1 мкс
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <DelayMicro+0x40>)
 80006da:	fba2 2303 	umull	r2, r3, r2, r3
 80006de:	08db      	lsrs	r3, r3, #3
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <DelayMicro+0x44>)
 80006e4:	801a      	strh	r2, [r3, #0]
	while (delay) {};
 80006e6:	bf00      	nop
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <DelayMicro+0x44>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1fb      	bne.n	80006e8 <DelayMicro+0x24>
	HAL_TIM_Base_Stop_IT(&htim3);
 80006f0:	4803      	ldr	r0, [pc, #12]	; (8000700 <DelayMicro+0x3c>)
 80006f2:	f002 f843 	bl	800277c <HAL_TIM_Base_Stop_IT>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200000fc 	.word	0x200000fc
 8000704:	cccccccd 	.word	0xcccccccd
 8000708:	200000b0 	.word	0x200000b0

0800070c <NRF24_ReadReg>:

//------------------------------------------------------------------------------------------------------------------------------------//
uint8_t NRF24_ReadReg(uint8_t address)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af02      	add	r7, sp, #8
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
  uint8_t data = 0; //считанные данные
 8000716:	2300      	movs	r3, #0
 8000718:	73fb      	strb	r3, [r7, #15]
  uint8_t cmd = 0; //передадим любой байт
 800071a:	2300      	movs	r3, #0
 800071c:	73bb      	strb	r3, [r7, #14]
  address |= R_REGISTER; //включим бит чтения в адрес
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000722:	2200      	movs	r2, #0
 8000724:	2110      	movs	r1, #16
 8000726:	4813      	ldr	r0, [pc, #76]	; (8000774 <NRF24_ReadReg+0x68>)
 8000728:	f000 fde6 	bl	80012f8 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, &address, &data, 1, 1000);
 800072c:	f107 020f 	add.w	r2, r7, #15
 8000730:	1df9      	adds	r1, r7, #7
 8000732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	2301      	movs	r3, #1
 800073a:	480f      	ldr	r0, [pc, #60]	; (8000778 <NRF24_ReadReg+0x6c>)
 800073c:	f001 fce1 	bl	8002102 <HAL_SPI_TransmitReceive>
  if (address != STATUS)//если адрес равен адрес регистра статус то и возвращаем его состояние
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2b07      	cmp	r3, #7
 8000744:	d00c      	beq.n	8000760 <NRF24_ReadReg+0x54>
  {
    cmd=0xFF;
 8000746:	23ff      	movs	r3, #255	; 0xff
 8000748:	73bb      	strb	r3, [r7, #14]
    HAL_SPI_TransmitReceive(&hspi1, &cmd, &data, 1, 1000);
 800074a:	f107 020f 	add.w	r2, r7, #15
 800074e:	f107 010e 	add.w	r1, r7, #14
 8000752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2301      	movs	r3, #1
 800075a:	4807      	ldr	r0, [pc, #28]	; (8000778 <NRF24_ReadReg+0x6c>)
 800075c:	f001 fcd1 	bl	8002102 <HAL_SPI_TransmitReceive>
  }
  CS_OFF;
 8000760:	2201      	movs	r2, #1
 8000762:	2110      	movs	r1, #16
 8000764:	4803      	ldr	r0, [pc, #12]	; (8000774 <NRF24_ReadReg+0x68>)
 8000766:	f000 fdc7 	bl	80012f8 <HAL_GPIO_WritePin>
  return data;
 800076a:	7bfb      	ldrb	r3, [r7, #15]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40010800 	.word	0x40010800
 8000778:	20000144 	.word	0x20000144

0800077c <NRF24_WriteReg>:

//------------------------------------------------------------------------------------------------------------------------------------//
void NRF24_WriteReg(uint8_t address, uint8_t data)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	460a      	mov	r2, r1
 8000786:	71fb      	strb	r3, [r7, #7]
 8000788:	4613      	mov	r3, r2
 800078a:	71bb      	strb	r3, [r7, #6]
  address |= W_REGISTER;//включим бит записи в адрес
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	f043 0320 	orr.w	r3, r3, #32
 8000792:	b2db      	uxtb	r3, r3
 8000794:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 8000796:	2200      	movs	r2, #0
 8000798:	2110      	movs	r1, #16
 800079a:	480d      	ldr	r0, [pc, #52]	; (80007d0 <NRF24_WriteReg+0x54>)
 800079c:	f000 fdac 	bl	80012f8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &address, 1, 1000);//отправим адрес в шину
 80007a0:	1df9      	adds	r1, r7, #7
 80007a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a6:	2201      	movs	r2, #1
 80007a8:	480a      	ldr	r0, [pc, #40]	; (80007d4 <NRF24_WriteReg+0x58>)
 80007aa:	f001 fa5d 	bl	8001c68 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &data, 1, 1000);//отправим данные в шину
 80007ae:	1db9      	adds	r1, r7, #6
 80007b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b4:	2201      	movs	r2, #1
 80007b6:	4807      	ldr	r0, [pc, #28]	; (80007d4 <NRF24_WriteReg+0x58>)
 80007b8:	f001 fa56 	bl	8001c68 <HAL_SPI_Transmit>
  CS_OFF;
 80007bc:	2201      	movs	r2, #1
 80007be:	2110      	movs	r1, #16
 80007c0:	4803      	ldr	r0, [pc, #12]	; (80007d0 <NRF24_WriteReg+0x54>)
 80007c2:	f000 fd99 	bl	80012f8 <HAL_GPIO_WritePin>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40010800 	.word	0x40010800
 80007d4:	20000144 	.word	0x20000144

080007d8 <NRF24_Write_Buf>:

//------------------------------------------------------------------------------------------------------------------------------------//
void NRF24_Write_Buf(uint8_t address, uint8_t *pBuf, uint8_t bytes)

{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	71fb      	strb	r3, [r7, #7]
 80007e4:	4613      	mov	r3, r2
 80007e6:	71bb      	strb	r3, [r7, #6]

	address |= W_REGISTER;//включим бит записи в адрес
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	f043 0320 	orr.w	r3, r3, #32
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80007f2:	2200      	movs	r2, #0
 80007f4:	2110      	movs	r1, #16
 80007f6:	480f      	ldr	r0, [pc, #60]	; (8000834 <NRF24_Write_Buf+0x5c>)
 80007f8:	f000 fd7e 	bl	80012f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &address, 1, 1000);//отправим адрес в шину
 80007fc:	1df9      	adds	r1, r7, #7
 80007fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000802:	2201      	movs	r2, #1
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <NRF24_Write_Buf+0x60>)
 8000806:	f001 fa2f 	bl	8001c68 <HAL_SPI_Transmit>
	DelayMicro(1);
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff ff5a 	bl	80006c4 <DelayMicro>
	HAL_SPI_Transmit(&hspi1, pBuf, bytes, 1000);//отправим данные в буфер
 8000810:	79bb      	ldrb	r3, [r7, #6]
 8000812:	b29a      	uxth	r2, r3
 8000814:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000818:	6839      	ldr	r1, [r7, #0]
 800081a:	4807      	ldr	r0, [pc, #28]	; (8000838 <NRF24_Write_Buf+0x60>)
 800081c:	f001 fa24 	bl	8001c68 <HAL_SPI_Transmit>
	CS_OFF;
 8000820:	2201      	movs	r2, #1
 8000822:	2110      	movs	r1, #16
 8000824:	4803      	ldr	r0, [pc, #12]	; (8000834 <NRF24_Write_Buf+0x5c>)
 8000826:	f000 fd67 	bl	80012f8 <HAL_GPIO_WritePin>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40010800 	.word	0x40010800
 8000838:	20000144 	.word	0x20000144

0800083c <NRF24_Read_Buf>:

//------------------------------------------------------------------------------------------------------------------------------------//
void NRF24_Read_Buf (uint8_t address, uint8_t *pBuf, uint8_t bytes)

{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	6039      	str	r1, [r7, #0]
 8000846:	71fb      	strb	r3, [r7, #7]
 8000848:	4613      	mov	r3, r2
 800084a:	71bb      	strb	r3, [r7, #6]
  CS_ON;
 800084c:	2200      	movs	r2, #0
 800084e:	2110      	movs	r1, #16
 8000850:	480d      	ldr	r0, [pc, #52]	; (8000888 <NRF24_Read_Buf+0x4c>)
 8000852:	f000 fd51 	bl	80012f8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &address, 1, 1000);//отправим адрес в шину
 8000856:	1df9      	adds	r1, r7, #7
 8000858:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085c:	2201      	movs	r2, #1
 800085e:	480b      	ldr	r0, [pc, #44]	; (800088c <NRF24_Read_Buf+0x50>)
 8000860:	f001 fa02 	bl	8001c68 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, pBuf, bytes, 1000);//получим данные в буфер
 8000864:	79bb      	ldrb	r3, [r7, #6]
 8000866:	b29a      	uxth	r2, r3
 8000868:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086c:	6839      	ldr	r1, [r7, #0]
 800086e:	4807      	ldr	r0, [pc, #28]	; (800088c <NRF24_Read_Buf+0x50>)
 8000870:	f001 fb36 	bl	8001ee0 <HAL_SPI_Receive>
  CS_OFF;
 8000874:	2201      	movs	r2, #1
 8000876:	2110      	movs	r1, #16
 8000878:	4803      	ldr	r0, [pc, #12]	; (8000888 <NRF24_Read_Buf+0x4c>)
 800087a:	f000 fd3d 	bl	80012f8 <HAL_GPIO_WritePin>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40010800 	.word	0x40010800
 800088c:	20000144 	.word	0x20000144

08000890 <NRF24_command>:

//------------------------------------------------------------------------------------------------------------------------------------//
void NRF24_command (uint8_t cmd)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
  CS_ON;
 800089a:	2200      	movs	r2, #0
 800089c:	2110      	movs	r1, #16
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <NRF24_command+0x3c>)
 80008a0:	f000 fd2a 	bl	80012f8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &cmd, 1, 1000);//отправим команду
 80008a4:	1df9      	adds	r1, r7, #7
 80008a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008aa:	2201      	movs	r2, #1
 80008ac:	4808      	ldr	r0, [pc, #32]	; (80008d0 <NRF24_command+0x40>)
 80008ae:	f001 f9db 	bl	8001c68 <HAL_SPI_Transmit>
  DelayMicro (10);
 80008b2:	200a      	movs	r0, #10
 80008b4:	f7ff ff06 	bl	80006c4 <DelayMicro>
  CS_OFF;
 80008b8:	2201      	movs	r2, #1
 80008ba:	2110      	movs	r1, #16
 80008bc:	4803      	ldr	r0, [pc, #12]	; (80008cc <NRF24_command+0x3c>)
 80008be:	f000 fd1b 	bl	80012f8 <HAL_GPIO_WritePin>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40010800 	.word	0x40010800
 80008d0:	20000144 	.word	0x20000144

080008d4 <NRF24_activate>:

//------------------------------------------------------------------------------------------------------------------------------------//
void NRF24_activate ()

{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
	uint8_t activate = 0x50; //команда активирует команды R_RX_PL_WID, W_ACK_PAYLOAD и W_TX_PAYLOAD_NOACK
 80008da:	2350      	movs	r3, #80	; 0x50
 80008dc:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0x73;
 80008de:	2373      	movs	r3, #115	; 0x73
 80008e0:	71bb      	strb	r3, [r7, #6]
	CS_ON;
 80008e2:	2200      	movs	r2, #0
 80008e4:	2110      	movs	r1, #16
 80008e6:	480e      	ldr	r0, [pc, #56]	; (8000920 <NRF24_activate+0x4c>)
 80008e8:	f000 fd06 	bl	80012f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &activate, 1, 1000);//отправим команду activate
 80008ec:	1df9      	adds	r1, r7, #7
 80008ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f2:	2201      	movs	r2, #1
 80008f4:	480b      	ldr	r0, [pc, #44]	; (8000924 <NRF24_activate+0x50>)
 80008f6:	f001 f9b7 	bl	8001c68 <HAL_SPI_Transmit>
	DelayMicro (10);
 80008fa:	200a      	movs	r0, #10
 80008fc:	f7ff fee2 	bl	80006c4 <DelayMicro>
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);//отправим 0x73 (стр. 46)
 8000900:	1db9      	adds	r1, r7, #6
 8000902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000906:	2201      	movs	r2, #1
 8000908:	4806      	ldr	r0, [pc, #24]	; (8000924 <NRF24_activate+0x50>)
 800090a:	f001 f9ad 	bl	8001c68 <HAL_SPI_Transmit>
	CS_OFF;
 800090e:	2201      	movs	r2, #1
 8000910:	2110      	movs	r1, #16
 8000912:	4803      	ldr	r0, [pc, #12]	; (8000920 <NRF24_activate+0x4c>)
 8000914:	f000 fcf0 	bl	80012f8 <HAL_GPIO_WritePin>
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40010800 	.word	0x40010800
 8000924:	20000144 	.word	0x20000144

08000928 <NRF24L01_RX_Mode>:

//------------------------------------------------ф-я для включения режима приёма--------------------------------------------------//

void NRF24L01_RX_Mode(void)

{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  uint8_t regval=0;
 800092e:	2300      	movs	r3, #0
 8000930:	71fb      	strb	r3, [r7, #7]
  regval = NRF24_ReadReg (CONFIG); //считаем текущее значение регистра CONFIG
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff feea 	bl	800070c <NRF24_ReadReg>
 8000938:	4603      	mov	r3, r0
 800093a:	71fb      	strb	r3, [r7, #7]
  regval |= (1<<PWR_UP)|(1<<PRIM_RX); //разбудим модуль и переведём его в режим приёмника, включив биты PWR_UP и PRIM_RX
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	f043 0303 	orr.w	r3, r3, #3
 8000942:	71fb      	strb	r3, [r7, #7]
  NRF24_WriteReg(CONFIG,regval);
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	4619      	mov	r1, r3
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff ff17 	bl	800077c <NRF24_WriteReg>
  CE_SET;
 800094e:	2201      	movs	r2, #1
 8000950:	2101      	movs	r1, #1
 8000952:	4808      	ldr	r0, [pc, #32]	; (8000974 <NRF24L01_RX_Mode+0x4c>)
 8000954:	f000 fcd0 	bl	80012f8 <HAL_GPIO_WritePin>
  DelayMicro(150); //Задержка минимум 130 мкс
 8000958:	2096      	movs	r0, #150	; 0x96
 800095a:	f7ff feb3 	bl	80006c4 <DelayMicro>
  NRF24_command (FLUSH_RX); //очистки буферов FIFO приёма
 800095e:	20e2      	movs	r0, #226	; 0xe2
 8000960:	f7ff ff96 	bl	8000890 <NRF24_command>
  NRF24_command (FLUSH_TX); //очистки буферов FIFO передачи
 8000964:	20e1      	movs	r0, #225	; 0xe1
 8000966:	f7ff ff93 	bl	8000890 <NRF24_command>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40010c00 	.word	0x40010c00

08000978 <NRF24_ini>:

//---------------------------------------------------ф-я инициализация NRF----------------------------------------------------//
void NRF24_ini()

{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	CE_RESET; //отключим модуль (standby mode). все записи в регистры настроек производятся в этом режиме
 800097c:	2200      	movs	r2, #0
 800097e:	2101      	movs	r1, #1
 8000980:	4825      	ldr	r0, [pc, #148]	; (8000a18 <NRF24_ini+0xa0>)
 8000982:	f000 fcb9 	bl	80012f8 <HAL_GPIO_WritePin>
	DelayMicro (5000);
 8000986:	f241 3088 	movw	r0, #5000	; 0x1388
 800098a:	f7ff fe9b 	bl	80006c4 <DelayMicro>
	NRF24_WriteReg (STATUS, 0x0A); // 0b00001010 включим передатчик, включеним использование контрольной суммы (CRC = 1 байт)
 800098e:	210a      	movs	r1, #10
 8000990:	2007      	movs	r0, #7
 8000992:	f7ff fef3 	bl	800077c <NRF24_WriteReg>
	DelayMicro (5000);
 8000996:	f241 3088 	movw	r0, #5000	; 0x1388
 800099a:	f7ff fe93 	bl	80006c4 <DelayMicro>
	NRF24_WriteReg (EN_AA, 0x04); // включам автоподтверждение для 2 канала обмена
 800099e:	2104      	movs	r1, #4
 80009a0:	2001      	movs	r0, #1
 80009a2:	f7ff feeb 	bl	800077c <NRF24_WriteReg>
	NRF24_WriteReg (EN_RXADDR, 0x04); // включим испольхование 2 канала обмена
 80009a6:	2104      	movs	r1, #4
 80009a8:	2002      	movs	r0, #2
 80009aa:	f7ff fee7 	bl	800077c <NRF24_WriteReg>
	NRF24_WriteReg (SETUP_AW, 0x03); // устанавливаем величину адреса - 5 байта
 80009ae:	2103      	movs	r1, #3
 80009b0:	2003      	movs	r0, #3
 80009b2:	f7ff fee3 	bl	800077c <NRF24_WriteReg>
	NRF24_WriteReg (SETUP_RETR, 0x2E); //устанавливаем задержку = 750 uс и 14 повторов при неудачной отправке
 80009b6:	212e      	movs	r1, #46	; 0x2e
 80009b8:	2004      	movs	r0, #4
 80009ba:	f7ff fedf 	bl	800077c <NRF24_WriteReg>

	NRF24_activate (); //отправим команду ACTIVATE, за которой отправим значение 0x73. Активирует команды R_RX_PL_WID, W_ACK_PAYLOAD и W_TX_PAYLOAD_NOACK
 80009be:	f7ff ff89 	bl	80008d4 <NRF24_activate>

	NRF24_WriteReg(FEATURE, 0x0); //0 - установка по умолчанию
 80009c2:	2100      	movs	r1, #0
 80009c4:	201d      	movs	r0, #29
 80009c6:	f7ff fed9 	bl	800077c <NRF24_WriteReg>
	NRF24_WriteReg(DYNPD, 0); //0 - установка по умолчанию
 80009ca:	2100      	movs	r1, #0
 80009cc:	201c      	movs	r0, #28
 80009ce:	f7ff fed5 	bl	800077c <NRF24_WriteReg>
	NRF24_WriteReg(STATUS, 0x70); //сбросим все флаги прерываний записью '1'
 80009d2:	2170      	movs	r1, #112	; 0x70
 80009d4:	2007      	movs	r0, #7
 80009d6:	f7ff fed1 	bl	800077c <NRF24_WriteReg>
	NRF24_WriteReg(RF_CH, 76); // частота 2476 MHz
 80009da:	214c      	movs	r1, #76	; 0x4c
 80009dc:	2005      	movs	r0, #5
 80009de:	f7ff fecd 	bl	800077c <NRF24_WriteReg>
	NRF24_WriteReg(RF_SETUP, 0x06); //мощность передачи: 0dBm, скорость передачи:1Mbps
 80009e2:	2106      	movs	r1, #6
 80009e4:	2006      	movs	r0, #6
 80009e6:	f7ff fec9 	bl	800077c <NRF24_WriteReg>
	NRF24_Write_Buf (TX_ADDR, P1_ADDRESS, TX_ADR_WIDTH); //установим адрес передатчика
 80009ea:	2205      	movs	r2, #5
 80009ec:	490b      	ldr	r1, [pc, #44]	; (8000a1c <NRF24_ini+0xa4>)
 80009ee:	2010      	movs	r0, #16
 80009f0:	f7ff fef2 	bl	80007d8 <NRF24_Write_Buf>
	NRF24_Write_Buf (RX_ADDR_P1, P1_ADDRESS, TX_ADR_WIDTH); //установим адрес получения данных (длиной TX_ADR_WIDTH байт)  для 1 канала
 80009f4:	2205      	movs	r2, #5
 80009f6:	4909      	ldr	r1, [pc, #36]	; (8000a1c <NRF24_ini+0xa4>)
 80009f8:	200b      	movs	r0, #11
 80009fa:	f7ff feed 	bl	80007d8 <NRF24_Write_Buf>
	NRF24_Write_Buf (RX_ADDR_P2, P2_ADDRESS, TX_ADR_WIDTH); //установим адрес получения данных (длиной TX_ADR_WIDTH байт)  для 2 канала
 80009fe:	2205      	movs	r2, #5
 8000a00:	4907      	ldr	r1, [pc, #28]	; (8000a20 <NRF24_ini+0xa8>)
 8000a02:	200c      	movs	r0, #12
 8000a04:	f7ff fee8 	bl	80007d8 <NRF24_Write_Buf>
	NRF24_WriteReg(RX_PW_P2, TX_PLOAD_WIDTH); //установим количество байт в пакете для 2 канала
 8000a08:	2102      	movs	r1, #2
 8000a0a:	2013      	movs	r0, #19
 8000a0c:	f7ff feb6 	bl	800077c <NRF24_WriteReg>

	NRF24L01_RX_Mode(); //уходим в режим приёмника
 8000a10:	f7ff ff8a 	bl	8000928 <NRF24L01_RX_Mode>
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40010c00 	.word	0x40010c00
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	20000008 	.word	0x20000008

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6193      	str	r3, [r2, #24]
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a58:	61d3      	str	r3, [r2, #28]
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_MspInit+0x60>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <HAL_MspInit+0x60>)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	bf00      	nop
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40010000 	.word	0x40010000

08000a94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <HAL_SPI_MspInit+0x88>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d12f      	bne.n	8000b14 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <HAL_SPI_MspInit+0x8c>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a19      	ldr	r2, [pc, #100]	; (8000b20 <HAL_SPI_MspInit+0x8c>)
 8000aba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <HAL_SPI_MspInit+0x8c>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <HAL_SPI_MspInit+0x8c>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <HAL_SPI_MspInit+0x8c>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <HAL_SPI_MspInit+0x8c>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ae4:	23a0      	movs	r3, #160	; 0xa0
 8000ae6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	4619      	mov	r1, r3
 8000af6:	480b      	ldr	r0, [pc, #44]	; (8000b24 <HAL_SPI_MspInit+0x90>)
 8000af8:	f000 faa4 	bl	8001044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000afc:	2340      	movs	r3, #64	; 0x40
 8000afe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <HAL_SPI_MspInit+0x90>)
 8000b10:	f000 fa98 	bl	8001044 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b14:	bf00      	nop
 8000b16:	3720      	adds	r7, #32
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40013000 	.word	0x40013000
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40010800 	.word	0x40010800

08000b28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <HAL_TIM_Base_MspInit+0x44>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d113      	bne.n	8000b62 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <HAL_TIM_Base_MspInit+0x48>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	4a0c      	ldr	r2, [pc, #48]	; (8000b70 <HAL_TIM_Base_MspInit+0x48>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	61d3      	str	r3, [r2, #28]
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <HAL_TIM_Base_MspInit+0x48>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	201d      	movs	r0, #29
 8000b58:	f000 fa3d 	bl	8000fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b5c:	201d      	movs	r0, #29
 8000b5e:	f000 fa56 	bl	800100e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40000400 	.word	0x40000400
 8000b70:	40021000 	.word	0x40021000

08000b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <HAL_UART_MspInit+0x88>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d12f      	bne.n	8000bf4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <HAL_UART_MspInit+0x8c>)
 8000b96:	69db      	ldr	r3, [r3, #28]
 8000b98:	4a19      	ldr	r2, [pc, #100]	; (8000c00 <HAL_UART_MspInit+0x8c>)
 8000b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9e:	61d3      	str	r3, [r2, #28]
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <HAL_UART_MspInit+0x8c>)
 8000ba2:	69db      	ldr	r3, [r3, #28]
 8000ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <HAL_UART_MspInit+0x8c>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <HAL_UART_MspInit+0x8c>)
 8000bb2:	f043 0304 	orr.w	r3, r3, #4
 8000bb6:	6193      	str	r3, [r2, #24]
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <HAL_UART_MspInit+0x8c>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	f003 0304 	and.w	r3, r3, #4
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480b      	ldr	r0, [pc, #44]	; (8000c04 <HAL_UART_MspInit+0x90>)
 8000bd8:	f000 fa34 	bl	8001044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bdc:	2308      	movs	r3, #8
 8000bde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	4619      	mov	r1, r3
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <HAL_UART_MspInit+0x90>)
 8000bf0:	f000 fa28 	bl	8001044 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bf4:	bf00      	nop
 8000bf6:	3720      	adds	r7, #32
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40004400 	.word	0x40004400
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40010800 	.word	0x40010800

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <HardFault_Handler+0x4>

08000c1a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <MemManage_Handler+0x4>

08000c20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <BusFault_Handler+0x4>

08000c26 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <UsageFault_Handler+0x4>

08000c2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c54:	f000 f8aa 	bl	8000dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <TIM3_IRQHandler+0x10>)
 8000c62:	f001 fdb9 	bl	80027d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200000fc 	.word	0x200000fc

08000c70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <_sbrk+0x50>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <_sbrk+0x16>
		heap_end = &end;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <_sbrk+0x50>)
 8000c82:	4a10      	ldr	r2, [pc, #64]	; (8000cc4 <_sbrk+0x54>)
 8000c84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <_sbrk+0x50>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <_sbrk+0x50>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4413      	add	r3, r2
 8000c94:	466a      	mov	r2, sp
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d907      	bls.n	8000caa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c9a:	f002 faa1 	bl	80031e0 <__errno>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	230c      	movs	r3, #12
 8000ca2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca8:	e006      	b.n	8000cb8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <_sbrk+0x50>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4a03      	ldr	r2, [pc, #12]	; (8000cc0 <_sbrk+0x50>)
 8000cb4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200000f0 	.word	0x200000f0
 8000cc4:	200001e8 	.word	0x200001e8

08000cc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000cd4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000cd6:	e003      	b.n	8000ce0 <LoopCopyDataInit>

08000cd8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000cda:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000cdc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000cde:	3104      	adds	r1, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ce0:	480a      	ldr	r0, [pc, #40]	; (8000d0c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ce4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ce6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ce8:	d3f6      	bcc.n	8000cd8 <CopyDataInit>
  ldr r2, =_sbss
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000cec:	e002      	b.n	8000cf4 <LoopFillZerobss>

08000cee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000cf0:	f842 3b04 	str.w	r3, [r2], #4

08000cf4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000cf6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000cf8:	d3f9      	bcc.n	8000cee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cfa:	f7ff ffe5 	bl	8000cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f002 fa75 	bl	80031ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d02:	f7ff fa2b 	bl	800015c <main>
  bx lr
 8000d06:	4770      	bx	lr
  ldr r3, =_sidata
 8000d08:	08003bec 	.word	0x08003bec
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d10:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8000d14:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8000d18:	200001e4 	.word	0x200001e4

08000d1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d1c:	e7fe      	b.n	8000d1c <ADC1_2_IRQHandler>
	...

08000d20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <HAL_Init+0x28>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <HAL_Init+0x28>)
 8000d2a:	f043 0310 	orr.w	r3, r3, #16
 8000d2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d30:	2003      	movs	r0, #3
 8000d32:	f000 f945 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f000 f808 	bl	8000d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3c:	f7ff fe78 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40022000 	.word	0x40022000

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_InitTick+0x54>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_InitTick+0x58>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f95d 	bl	800102a <HAL_SYSTICK_Config>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00e      	b.n	8000d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	d80a      	bhi.n	8000d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d80:	2200      	movs	r2, #0
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f000 f925 	bl	8000fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d8c:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <HAL_InitTick+0x5c>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e000      	b.n	8000d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000010 	.word	0x20000010
 8000da4:	20000018 	.word	0x20000018
 8000da8:	20000014 	.word	0x20000014

08000dac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <HAL_IncTick+0x1c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <HAL_IncTick+0x20>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a03      	ldr	r2, [pc, #12]	; (8000dcc <HAL_IncTick+0x20>)
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	20000018 	.word	0x20000018
 8000dcc:	200001dc 	.word	0x200001dc

08000dd0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b02      	ldr	r3, [pc, #8]	; (8000de0 <HAL_GetTick+0x10>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr
 8000de0:	200001dc 	.word	0x200001dc

08000de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dec:	f7ff fff0 	bl	8000dd0 <HAL_GetTick>
 8000df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dfc:	d005      	beq.n	8000e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_Delay+0x40>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	461a      	mov	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4413      	add	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e0a:	bf00      	nop
 8000e0c:	f7ff ffe0 	bl	8000dd0 <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d8f7      	bhi.n	8000e0c <HAL_Delay+0x28>
  {
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000018 	.word	0x20000018

08000e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e44:	4013      	ands	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5a:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	60d3      	str	r3, [r2, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <__NVIC_GetPriorityGrouping+0x18>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	f003 0307 	and.w	r3, r3, #7
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	db0b      	blt.n	8000eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f003 021f 	and.w	r2, r3, #31
 8000ea4:	4906      	ldr	r1, [pc, #24]	; (8000ec0 <__NVIC_EnableIRQ+0x34>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	095b      	lsrs	r3, r3, #5
 8000eac:	2001      	movs	r0, #1
 8000eae:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	e000e100 	.word	0xe000e100

08000ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0a      	blt.n	8000eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	490c      	ldr	r1, [pc, #48]	; (8000f10 <__NVIC_SetPriority+0x4c>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eec:	e00a      	b.n	8000f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4908      	ldr	r1, [pc, #32]	; (8000f14 <__NVIC_SetPriority+0x50>)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	3b04      	subs	r3, #4
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	761a      	strb	r2, [r3, #24]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000e100 	.word	0xe000e100
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	; 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	bf28      	it	cs
 8000f36:	2304      	movcs	r3, #4
 8000f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d902      	bls.n	8000f48 <NVIC_EncodePriority+0x30>
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3b03      	subs	r3, #3
 8000f46:	e000      	b.n	8000f4a <NVIC_EncodePriority+0x32>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43da      	mvns	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43d9      	mvns	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	4313      	orrs	r3, r2
         );
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3724      	adds	r7, #36	; 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f8c:	d301      	bcc.n	8000f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00f      	b.n	8000fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <SysTick_Config+0x40>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f7ff ff90 	bl	8000ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <SysTick_Config+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <SysTick_Config+0x40>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff2d 	bl	8000e28 <__NVIC_SetPriorityGrouping>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe8:	f7ff ff42 	bl	8000e70 <__NVIC_GetPriorityGrouping>
 8000fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff ff90 	bl	8000f18 <NVIC_EncodePriority>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff5f 	bl	8000ec4 <__NVIC_SetPriority>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff35 	bl	8000e8c <__NVIC_EnableIRQ>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffa2 	bl	8000f7c <SysTick_Config>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b480      	push	{r7}
 8001046:	b08b      	sub	sp, #44	; 0x2c
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001056:	e127      	b.n	80012a8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001058:	2201      	movs	r2, #1
 800105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	69fa      	ldr	r2, [r7, #28]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	429a      	cmp	r2, r3
 8001072:	f040 8116 	bne.w	80012a2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b12      	cmp	r3, #18
 800107c:	d034      	beq.n	80010e8 <HAL_GPIO_Init+0xa4>
 800107e:	2b12      	cmp	r3, #18
 8001080:	d80d      	bhi.n	800109e <HAL_GPIO_Init+0x5a>
 8001082:	2b02      	cmp	r3, #2
 8001084:	d02b      	beq.n	80010de <HAL_GPIO_Init+0x9a>
 8001086:	2b02      	cmp	r3, #2
 8001088:	d804      	bhi.n	8001094 <HAL_GPIO_Init+0x50>
 800108a:	2b00      	cmp	r3, #0
 800108c:	d031      	beq.n	80010f2 <HAL_GPIO_Init+0xae>
 800108e:	2b01      	cmp	r3, #1
 8001090:	d01c      	beq.n	80010cc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001092:	e048      	b.n	8001126 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001094:	2b03      	cmp	r3, #3
 8001096:	d043      	beq.n	8001120 <HAL_GPIO_Init+0xdc>
 8001098:	2b11      	cmp	r3, #17
 800109a:	d01b      	beq.n	80010d4 <HAL_GPIO_Init+0x90>
          break;
 800109c:	e043      	b.n	8001126 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800109e:	4a89      	ldr	r2, [pc, #548]	; (80012c4 <HAL_GPIO_Init+0x280>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d026      	beq.n	80010f2 <HAL_GPIO_Init+0xae>
 80010a4:	4a87      	ldr	r2, [pc, #540]	; (80012c4 <HAL_GPIO_Init+0x280>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d806      	bhi.n	80010b8 <HAL_GPIO_Init+0x74>
 80010aa:	4a87      	ldr	r2, [pc, #540]	; (80012c8 <HAL_GPIO_Init+0x284>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d020      	beq.n	80010f2 <HAL_GPIO_Init+0xae>
 80010b0:	4a86      	ldr	r2, [pc, #536]	; (80012cc <HAL_GPIO_Init+0x288>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d01d      	beq.n	80010f2 <HAL_GPIO_Init+0xae>
          break;
 80010b6:	e036      	b.n	8001126 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010b8:	4a85      	ldr	r2, [pc, #532]	; (80012d0 <HAL_GPIO_Init+0x28c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d019      	beq.n	80010f2 <HAL_GPIO_Init+0xae>
 80010be:	4a85      	ldr	r2, [pc, #532]	; (80012d4 <HAL_GPIO_Init+0x290>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d016      	beq.n	80010f2 <HAL_GPIO_Init+0xae>
 80010c4:	4a84      	ldr	r2, [pc, #528]	; (80012d8 <HAL_GPIO_Init+0x294>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d013      	beq.n	80010f2 <HAL_GPIO_Init+0xae>
          break;
 80010ca:	e02c      	b.n	8001126 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	623b      	str	r3, [r7, #32]
          break;
 80010d2:	e028      	b.n	8001126 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	3304      	adds	r3, #4
 80010da:	623b      	str	r3, [r7, #32]
          break;
 80010dc:	e023      	b.n	8001126 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	3308      	adds	r3, #8
 80010e4:	623b      	str	r3, [r7, #32]
          break;
 80010e6:	e01e      	b.n	8001126 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	330c      	adds	r3, #12
 80010ee:	623b      	str	r3, [r7, #32]
          break;
 80010f0:	e019      	b.n	8001126 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d102      	bne.n	8001100 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010fa:	2304      	movs	r3, #4
 80010fc:	623b      	str	r3, [r7, #32]
          break;
 80010fe:	e012      	b.n	8001126 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d105      	bne.n	8001114 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001108:	2308      	movs	r3, #8
 800110a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69fa      	ldr	r2, [r7, #28]
 8001110:	611a      	str	r2, [r3, #16]
          break;
 8001112:	e008      	b.n	8001126 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001114:	2308      	movs	r3, #8
 8001116:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69fa      	ldr	r2, [r7, #28]
 800111c:	615a      	str	r2, [r3, #20]
          break;
 800111e:	e002      	b.n	8001126 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001120:	2300      	movs	r3, #0
 8001122:	623b      	str	r3, [r7, #32]
          break;
 8001124:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	2bff      	cmp	r3, #255	; 0xff
 800112a:	d801      	bhi.n	8001130 <HAL_GPIO_Init+0xec>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	e001      	b.n	8001134 <HAL_GPIO_Init+0xf0>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3304      	adds	r3, #4
 8001134:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	2bff      	cmp	r3, #255	; 0xff
 800113a:	d802      	bhi.n	8001142 <HAL_GPIO_Init+0xfe>
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	e002      	b.n	8001148 <HAL_GPIO_Init+0x104>
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	3b08      	subs	r3, #8
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	210f      	movs	r1, #15
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	401a      	ands	r2, r3
 800115a:	6a39      	ldr	r1, [r7, #32]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	431a      	orrs	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 8096 	beq.w	80012a2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001176:	4b59      	ldr	r3, [pc, #356]	; (80012dc <HAL_GPIO_Init+0x298>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	4a58      	ldr	r2, [pc, #352]	; (80012dc <HAL_GPIO_Init+0x298>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6193      	str	r3, [r2, #24]
 8001182:	4b56      	ldr	r3, [pc, #344]	; (80012dc <HAL_GPIO_Init+0x298>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800118e:	4a54      	ldr	r2, [pc, #336]	; (80012e0 <HAL_GPIO_Init+0x29c>)
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3302      	adds	r3, #2
 8001196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	220f      	movs	r2, #15
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	68fa      	ldr	r2, [r7, #12]
 80011ae:	4013      	ands	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4b      	ldr	r2, [pc, #300]	; (80012e4 <HAL_GPIO_Init+0x2a0>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d013      	beq.n	80011e2 <HAL_GPIO_Init+0x19e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4a      	ldr	r2, [pc, #296]	; (80012e8 <HAL_GPIO_Init+0x2a4>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d00d      	beq.n	80011de <HAL_GPIO_Init+0x19a>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a49      	ldr	r2, [pc, #292]	; (80012ec <HAL_GPIO_Init+0x2a8>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d007      	beq.n	80011da <HAL_GPIO_Init+0x196>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a48      	ldr	r2, [pc, #288]	; (80012f0 <HAL_GPIO_Init+0x2ac>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d101      	bne.n	80011d6 <HAL_GPIO_Init+0x192>
 80011d2:	2303      	movs	r3, #3
 80011d4:	e006      	b.n	80011e4 <HAL_GPIO_Init+0x1a0>
 80011d6:	2304      	movs	r3, #4
 80011d8:	e004      	b.n	80011e4 <HAL_GPIO_Init+0x1a0>
 80011da:	2302      	movs	r3, #2
 80011dc:	e002      	b.n	80011e4 <HAL_GPIO_Init+0x1a0>
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <HAL_GPIO_Init+0x1a0>
 80011e2:	2300      	movs	r3, #0
 80011e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e6:	f002 0203 	and.w	r2, r2, #3
 80011ea:	0092      	lsls	r2, r2, #2
 80011ec:	4093      	lsls	r3, r2
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011f4:	493a      	ldr	r1, [pc, #232]	; (80012e0 <HAL_GPIO_Init+0x29c>)
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	089b      	lsrs	r3, r3, #2
 80011fa:	3302      	adds	r3, #2
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d006      	beq.n	800121c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800120e:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <HAL_GPIO_Init+0x2b0>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4938      	ldr	r1, [pc, #224]	; (80012f4 <HAL_GPIO_Init+0x2b0>)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	600b      	str	r3, [r1, #0]
 800121a:	e006      	b.n	800122a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800121c:	4b35      	ldr	r3, [pc, #212]	; (80012f4 <HAL_GPIO_Init+0x2b0>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	43db      	mvns	r3, r3
 8001224:	4933      	ldr	r1, [pc, #204]	; (80012f4 <HAL_GPIO_Init+0x2b0>)
 8001226:	4013      	ands	r3, r2
 8001228:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d006      	beq.n	8001244 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001236:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <HAL_GPIO_Init+0x2b0>)
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	492e      	ldr	r1, [pc, #184]	; (80012f4 <HAL_GPIO_Init+0x2b0>)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	604b      	str	r3, [r1, #4]
 8001242:	e006      	b.n	8001252 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001244:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <HAL_GPIO_Init+0x2b0>)
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	43db      	mvns	r3, r3
 800124c:	4929      	ldr	r1, [pc, #164]	; (80012f4 <HAL_GPIO_Init+0x2b0>)
 800124e:	4013      	ands	r3, r2
 8001250:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d006      	beq.n	800126c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800125e:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <HAL_GPIO_Init+0x2b0>)
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	4924      	ldr	r1, [pc, #144]	; (80012f4 <HAL_GPIO_Init+0x2b0>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	608b      	str	r3, [r1, #8]
 800126a:	e006      	b.n	800127a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800126c:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <HAL_GPIO_Init+0x2b0>)
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	43db      	mvns	r3, r3
 8001274:	491f      	ldr	r1, [pc, #124]	; (80012f4 <HAL_GPIO_Init+0x2b0>)
 8001276:	4013      	ands	r3, r2
 8001278:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d006      	beq.n	8001294 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001286:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <HAL_GPIO_Init+0x2b0>)
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	491a      	ldr	r1, [pc, #104]	; (80012f4 <HAL_GPIO_Init+0x2b0>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	60cb      	str	r3, [r1, #12]
 8001292:	e006      	b.n	80012a2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <HAL_GPIO_Init+0x2b0>)
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	43db      	mvns	r3, r3
 800129c:	4915      	ldr	r1, [pc, #84]	; (80012f4 <HAL_GPIO_Init+0x2b0>)
 800129e:	4013      	ands	r3, r2
 80012a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	3301      	adds	r3, #1
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	fa22 f303 	lsr.w	r3, r2, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f47f aed0 	bne.w	8001058 <HAL_GPIO_Init+0x14>
  }
}
 80012b8:	bf00      	nop
 80012ba:	372c      	adds	r7, #44	; 0x2c
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	10210000 	.word	0x10210000
 80012c8:	10110000 	.word	0x10110000
 80012cc:	10120000 	.word	0x10120000
 80012d0:	10310000 	.word	0x10310000
 80012d4:	10320000 	.word	0x10320000
 80012d8:	10220000 	.word	0x10220000
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010000 	.word	0x40010000
 80012e4:	40010800 	.word	0x40010800
 80012e8:	40010c00 	.word	0x40010c00
 80012ec:	40011000 	.word	0x40011000
 80012f0:	40011400 	.word	0x40011400
 80012f4:	40010400 	.word	0x40010400

080012f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
 8001304:	4613      	mov	r3, r2
 8001306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001308:	787b      	ldrb	r3, [r7, #1]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001314:	e003      	b.n	800131e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	041a      	lsls	r2, r3, #16
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	611a      	str	r2, [r3, #16]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e26c      	b.n	8001814 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 8087 	beq.w	8001456 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001348:	4b92      	ldr	r3, [pc, #584]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 030c 	and.w	r3, r3, #12
 8001350:	2b04      	cmp	r3, #4
 8001352:	d00c      	beq.n	800136e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001354:	4b8f      	ldr	r3, [pc, #572]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 030c 	and.w	r3, r3, #12
 800135c:	2b08      	cmp	r3, #8
 800135e:	d112      	bne.n	8001386 <HAL_RCC_OscConfig+0x5e>
 8001360:	4b8c      	ldr	r3, [pc, #560]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136c:	d10b      	bne.n	8001386 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136e:	4b89      	ldr	r3, [pc, #548]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d06c      	beq.n	8001454 <HAL_RCC_OscConfig+0x12c>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d168      	bne.n	8001454 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e246      	b.n	8001814 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800138e:	d106      	bne.n	800139e <HAL_RCC_OscConfig+0x76>
 8001390:	4b80      	ldr	r3, [pc, #512]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a7f      	ldr	r2, [pc, #508]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	e02e      	b.n	80013fc <HAL_RCC_OscConfig+0xd4>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10c      	bne.n	80013c0 <HAL_RCC_OscConfig+0x98>
 80013a6:	4b7b      	ldr	r3, [pc, #492]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a7a      	ldr	r2, [pc, #488]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	4b78      	ldr	r3, [pc, #480]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a77      	ldr	r2, [pc, #476]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	e01d      	b.n	80013fc <HAL_RCC_OscConfig+0xd4>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c8:	d10c      	bne.n	80013e4 <HAL_RCC_OscConfig+0xbc>
 80013ca:	4b72      	ldr	r3, [pc, #456]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a71      	ldr	r2, [pc, #452]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	4b6f      	ldr	r3, [pc, #444]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a6e      	ldr	r2, [pc, #440]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	e00b      	b.n	80013fc <HAL_RCC_OscConfig+0xd4>
 80013e4:	4b6b      	ldr	r3, [pc, #428]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a6a      	ldr	r2, [pc, #424]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b68      	ldr	r3, [pc, #416]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a67      	ldr	r2, [pc, #412]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d013      	beq.n	800142c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff fce4 	bl	8000dd0 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800140c:	f7ff fce0 	bl	8000dd0 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b64      	cmp	r3, #100	; 0x64
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e1fa      	b.n	8001814 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141e:	4b5d      	ldr	r3, [pc, #372]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0xe4>
 800142a:	e014      	b.n	8001456 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fcd0 	bl	8000dd0 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001434:	f7ff fccc 	bl	8000dd0 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	; 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e1e6      	b.n	8001814 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001446:	4b53      	ldr	r3, [pc, #332]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x10c>
 8001452:	e000      	b.n	8001456 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d063      	beq.n	800152a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001462:	4b4c      	ldr	r3, [pc, #304]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00b      	beq.n	8001486 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800146e:	4b49      	ldr	r3, [pc, #292]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	2b08      	cmp	r3, #8
 8001478:	d11c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x18c>
 800147a:	4b46      	ldr	r3, [pc, #280]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d116      	bne.n	80014b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001486:	4b43      	ldr	r3, [pc, #268]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d005      	beq.n	800149e <HAL_RCC_OscConfig+0x176>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d001      	beq.n	800149e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e1ba      	b.n	8001814 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149e:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4939      	ldr	r1, [pc, #228]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b2:	e03a      	b.n	800152a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d020      	beq.n	80014fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014bc:	4b36      	ldr	r3, [pc, #216]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 80014be:	2201      	movs	r2, #1
 80014c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c2:	f7ff fc85 	bl	8000dd0 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ca:	f7ff fc81 	bl	8000dd0 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e19b      	b.n	8001814 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014dc:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e8:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	695b      	ldr	r3, [r3, #20]
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4927      	ldr	r1, [pc, #156]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	600b      	str	r3, [r1, #0]
 80014fc:	e015      	b.n	800152a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fe:	4b26      	ldr	r3, [pc, #152]	; (8001598 <HAL_RCC_OscConfig+0x270>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fc64 	bl	8000dd0 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800150c:	f7ff fc60 	bl	8000dd0 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e17a      	b.n	8001814 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151e:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d03a      	beq.n	80015ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d019      	beq.n	8001572 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800153e:	4b17      	ldr	r3, [pc, #92]	; (800159c <HAL_RCC_OscConfig+0x274>)
 8001540:	2201      	movs	r2, #1
 8001542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001544:	f7ff fc44 	bl	8000dd0 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800154c:	f7ff fc40 	bl	8000dd0 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e15a      	b.n	8001814 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <HAL_RCC_OscConfig+0x26c>)
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800156a:	2001      	movs	r0, #1
 800156c:	f000 fada 	bl	8001b24 <RCC_Delay>
 8001570:	e01c      	b.n	80015ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_RCC_OscConfig+0x274>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001578:	f7ff fc2a 	bl	8000dd0 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800157e:	e00f      	b.n	80015a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001580:	f7ff fc26 	bl	8000dd0 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d908      	bls.n	80015a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e140      	b.n	8001814 <HAL_RCC_OscConfig+0x4ec>
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000
 8001598:	42420000 	.word	0x42420000
 800159c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a0:	4b9e      	ldr	r3, [pc, #632]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 80015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1e9      	bne.n	8001580 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80a6 	beq.w	8001706 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015be:	4b97      	ldr	r3, [pc, #604]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10d      	bne.n	80015e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b94      	ldr	r3, [pc, #592]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a93      	ldr	r2, [pc, #588]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b91      	ldr	r3, [pc, #580]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015e2:	2301      	movs	r3, #1
 80015e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e6:	4b8e      	ldr	r3, [pc, #568]	; (8001820 <HAL_RCC_OscConfig+0x4f8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d118      	bne.n	8001624 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015f2:	4b8b      	ldr	r3, [pc, #556]	; (8001820 <HAL_RCC_OscConfig+0x4f8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a8a      	ldr	r2, [pc, #552]	; (8001820 <HAL_RCC_OscConfig+0x4f8>)
 80015f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fe:	f7ff fbe7 	bl	8000dd0 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001606:	f7ff fbe3 	bl	8000dd0 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b64      	cmp	r3, #100	; 0x64
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e0fd      	b.n	8001814 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001618:	4b81      	ldr	r3, [pc, #516]	; (8001820 <HAL_RCC_OscConfig+0x4f8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d106      	bne.n	800163a <HAL_RCC_OscConfig+0x312>
 800162c:	4b7b      	ldr	r3, [pc, #492]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	4a7a      	ldr	r2, [pc, #488]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6213      	str	r3, [r2, #32]
 8001638:	e02d      	b.n	8001696 <HAL_RCC_OscConfig+0x36e>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0x334>
 8001642:	4b76      	ldr	r3, [pc, #472]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	4a75      	ldr	r2, [pc, #468]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 8001648:	f023 0301 	bic.w	r3, r3, #1
 800164c:	6213      	str	r3, [r2, #32]
 800164e:	4b73      	ldr	r3, [pc, #460]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4a72      	ldr	r2, [pc, #456]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 8001654:	f023 0304 	bic.w	r3, r3, #4
 8001658:	6213      	str	r3, [r2, #32]
 800165a:	e01c      	b.n	8001696 <HAL_RCC_OscConfig+0x36e>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	2b05      	cmp	r3, #5
 8001662:	d10c      	bne.n	800167e <HAL_RCC_OscConfig+0x356>
 8001664:	4b6d      	ldr	r3, [pc, #436]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4a6c      	ldr	r2, [pc, #432]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 800166a:	f043 0304 	orr.w	r3, r3, #4
 800166e:	6213      	str	r3, [r2, #32]
 8001670:	4b6a      	ldr	r3, [pc, #424]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	4a69      	ldr	r2, [pc, #420]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6213      	str	r3, [r2, #32]
 800167c:	e00b      	b.n	8001696 <HAL_RCC_OscConfig+0x36e>
 800167e:	4b67      	ldr	r3, [pc, #412]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	4a66      	ldr	r2, [pc, #408]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	6213      	str	r3, [r2, #32]
 800168a:	4b64      	ldr	r3, [pc, #400]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4a63      	ldr	r2, [pc, #396]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 8001690:	f023 0304 	bic.w	r3, r3, #4
 8001694:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d015      	beq.n	80016ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169e:	f7ff fb97 	bl	8000dd0 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a4:	e00a      	b.n	80016bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f7ff fb93 	bl	8000dd0 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e0ab      	b.n	8001814 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016bc:	4b57      	ldr	r3, [pc, #348]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0ee      	beq.n	80016a6 <HAL_RCC_OscConfig+0x37e>
 80016c8:	e014      	b.n	80016f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ca:	f7ff fb81 	bl	8000dd0 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d0:	e00a      	b.n	80016e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d2:	f7ff fb7d 	bl	8000dd0 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e095      	b.n	8001814 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e8:	4b4c      	ldr	r3, [pc, #304]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1ee      	bne.n	80016d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016f4:	7dfb      	ldrb	r3, [r7, #23]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d105      	bne.n	8001706 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016fa:	4b48      	ldr	r3, [pc, #288]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	4a47      	ldr	r2, [pc, #284]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 8001700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001704:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 8081 	beq.w	8001812 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001710:	4b42      	ldr	r3, [pc, #264]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 030c 	and.w	r3, r3, #12
 8001718:	2b08      	cmp	r3, #8
 800171a:	d061      	beq.n	80017e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d146      	bne.n	80017b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001724:	4b3f      	ldr	r3, [pc, #252]	; (8001824 <HAL_RCC_OscConfig+0x4fc>)
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172a:	f7ff fb51 	bl	8000dd0 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001732:	f7ff fb4d 	bl	8000dd0 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e067      	b.n	8001814 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001744:	4b35      	ldr	r3, [pc, #212]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f0      	bne.n	8001732 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001758:	d108      	bne.n	800176c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800175a:	4b30      	ldr	r3, [pc, #192]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	492d      	ldr	r1, [pc, #180]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 8001768:	4313      	orrs	r3, r2
 800176a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800176c:	4b2b      	ldr	r3, [pc, #172]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a19      	ldr	r1, [r3, #32]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177c:	430b      	orrs	r3, r1
 800177e:	4927      	ldr	r1, [pc, #156]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <HAL_RCC_OscConfig+0x4fc>)
 8001786:	2201      	movs	r2, #1
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178a:	f7ff fb21 	bl	8000dd0 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001792:	f7ff fb1d 	bl	8000dd0 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e037      	b.n	8001814 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017a4:	4b1d      	ldr	r3, [pc, #116]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f0      	beq.n	8001792 <HAL_RCC_OscConfig+0x46a>
 80017b0:	e02f      	b.n	8001812 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b2:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <HAL_RCC_OscConfig+0x4fc>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7ff fb0a 	bl	8000dd0 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c0:	f7ff fb06 	bl	8000dd0 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e020      	b.n	8001814 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d2:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x498>
 80017de:	e018      	b.n	8001812 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e013      	b.n	8001814 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_RCC_OscConfig+0x4f4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d106      	bne.n	800180e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180a:	429a      	cmp	r2, r3
 800180c:	d001      	beq.n	8001812 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40021000 	.word	0x40021000
 8001820:	40007000 	.word	0x40007000
 8001824:	42420060 	.word	0x42420060

08001828 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0d0      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800183c:	4b6a      	ldr	r3, [pc, #424]	; (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d910      	bls.n	800186c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b67      	ldr	r3, [pc, #412]	; (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 0207 	bic.w	r2, r3, #7
 8001852:	4965      	ldr	r1, [pc, #404]	; (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	4313      	orrs	r3, r2
 8001858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b63      	ldr	r3, [pc, #396]	; (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0b8      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d020      	beq.n	80018ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001884:	4b59      	ldr	r3, [pc, #356]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	4a58      	ldr	r2, [pc, #352]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 800188a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800188e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800189c:	4b53      	ldr	r3, [pc, #332]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	4a52      	ldr	r2, [pc, #328]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a8:	4b50      	ldr	r3, [pc, #320]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	494d      	ldr	r1, [pc, #308]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d040      	beq.n	8001948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d107      	bne.n	80018de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ce:	4b47      	ldr	r3, [pc, #284]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d115      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e07f      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e6:	4b41      	ldr	r3, [pc, #260]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d109      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e073      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f6:	4b3d      	ldr	r3, [pc, #244]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e06b      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001906:	4b39      	ldr	r3, [pc, #228]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f023 0203 	bic.w	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4936      	ldr	r1, [pc, #216]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001918:	f7ff fa5a 	bl	8000dd0 <HAL_GetTick>
 800191c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191e:	e00a      	b.n	8001936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001920:	f7ff fa56 	bl	8000dd0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f241 3288 	movw	r2, #5000	; 0x1388
 800192e:	4293      	cmp	r3, r2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e053      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001936:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 020c 	and.w	r2, r3, #12
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	429a      	cmp	r2, r3
 8001946:	d1eb      	bne.n	8001920 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001948:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d210      	bcs.n	8001978 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 0207 	bic.w	r2, r3, #7
 800195e:	4922      	ldr	r1, [pc, #136]	; (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	4313      	orrs	r3, r2
 8001964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001966:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d001      	beq.n	8001978 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e032      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d008      	beq.n	8001996 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	4916      	ldr	r1, [pc, #88]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	4313      	orrs	r3, r2
 8001994:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d009      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	490e      	ldr	r1, [pc, #56]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019b6:	f000 f821 	bl	80019fc <HAL_RCC_GetSysClockFreq>
 80019ba:	4601      	mov	r1, r0
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	091b      	lsrs	r3, r3, #4
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 80019c8:	5cd3      	ldrb	r3, [r2, r3]
 80019ca:	fa21 f303 	lsr.w	r3, r1, r3
 80019ce:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <HAL_RCC_ClockConfig+0x1cc>)
 80019d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_RCC_ClockConfig+0x1d0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff f9b8 	bl	8000d4c <HAL_InitTick>

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40022000 	.word	0x40022000
 80019ec:	40021000 	.word	0x40021000
 80019f0:	08003b98 	.word	0x08003b98
 80019f4:	20000010 	.word	0x20000010
 80019f8:	20000014 	.word	0x20000014

080019fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019fc:	b490      	push	{r4, r7}
 80019fe:	b08a      	sub	sp, #40	; 0x28
 8001a00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a02:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a04:	1d3c      	adds	r4, r7, #4
 8001a06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a0c:	4b28      	ldr	r3, [pc, #160]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
 8001a16:	2300      	movs	r3, #0
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a26:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	d002      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x40>
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d003      	beq.n	8001a42 <HAL_RCC_GetSysClockFreq+0x46>
 8001a3a:	e02d      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a3e:	623b      	str	r3, [r7, #32]
      break;
 8001a40:	e02d      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	0c9b      	lsrs	r3, r3, #18
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a4e:	4413      	add	r3, r2
 8001a50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a54:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d013      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	0c5b      	lsrs	r3, r3, #17
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a6e:	4413      	add	r3, r2
 8001a70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	4a0f      	ldr	r2, [pc, #60]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a7a:	fb02 f203 	mul.w	r2, r2, r3
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
 8001a86:	e004      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	4a0c      	ldr	r2, [pc, #48]	; (8001abc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a8c:	fb02 f303 	mul.w	r3, r2, r3
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	623b      	str	r3, [r7, #32]
      break;
 8001a96:	e002      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a9a:	623b      	str	r3, [r7, #32]
      break;
 8001a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3728      	adds	r7, #40	; 0x28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc90      	pop	{r4, r7}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	08003b84 	.word	0x08003b84
 8001ab0:	08003b94 	.word	0x08003b94
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	007a1200 	.word	0x007a1200
 8001abc:	003d0900 	.word	0x003d0900

08001ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac4:	4b02      	ldr	r3, [pc, #8]	; (8001ad0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	20000010 	.word	0x20000010

08001ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ad8:	f7ff fff2 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001adc:	4601      	mov	r1, r0
 8001ade:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	0a1b      	lsrs	r3, r3, #8
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	4a03      	ldr	r2, [pc, #12]	; (8001af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aea:	5cd3      	ldrb	r3, [r2, r3]
 8001aec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40021000 	.word	0x40021000
 8001af8:	08003ba8 	.word	0x08003ba8

08001afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b00:	f7ff ffde 	bl	8001ac0 <HAL_RCC_GetHCLKFreq>
 8001b04:	4601      	mov	r1, r0
 8001b06:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	0adb      	lsrs	r3, r3, #11
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	4a03      	ldr	r2, [pc, #12]	; (8001b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b12:	5cd3      	ldrb	r3, [r2, r3]
 8001b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	08003ba8 	.word	0x08003ba8

08001b24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <RCC_Delay+0x34>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <RCC_Delay+0x38>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	0a5b      	lsrs	r3, r3, #9
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	fb02 f303 	mul.w	r3, r2, r3
 8001b3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b40:	bf00      	nop
  }
  while (Delay --);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1e5a      	subs	r2, r3, #1
 8001b46:	60fa      	str	r2, [r7, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f9      	bne.n	8001b40 <RCC_Delay+0x1c>
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000010 	.word	0x20000010
 8001b5c:	10624dd3 	.word	0x10624dd3

08001b60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e076      	b.n	8001c60 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d108      	bne.n	8001b8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b82:	d009      	beq.n	8001b98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
 8001b8a:	e005      	b.n	8001b98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d106      	bne.n	8001bb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7fe ff6e 	bl	8000a94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1c:	ea42 0103 	orr.w	r1, r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	0c1a      	lsrs	r2, r3, #16
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f002 0204 	and.w	r2, r2, #4
 8001c3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	69da      	ldr	r2, [r3, #28]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	4613      	mov	r3, r2
 8001c76:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d101      	bne.n	8001c8a <HAL_SPI_Transmit+0x22>
 8001c86:	2302      	movs	r3, #2
 8001c88:	e126      	b.n	8001ed8 <HAL_SPI_Transmit+0x270>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c92:	f7ff f89d 	bl	8000dd0 <HAL_GetTick>
 8001c96:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d002      	beq.n	8001cae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001cac:	e10b      	b.n	8001ec6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <HAL_SPI_Transmit+0x52>
 8001cb4:	88fb      	ldrh	r3, [r7, #6]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d102      	bne.n	8001cc0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001cbe:	e102      	b.n	8001ec6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	88fa      	ldrh	r2, [r7, #6]
 8001cd8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	88fa      	ldrh	r2, [r7, #6]
 8001cde:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d06:	d10f      	bne.n	8001d28 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d26:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d32:	2b40      	cmp	r3, #64	; 0x40
 8001d34:	d007      	beq.n	8001d46 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d4e:	d14b      	bne.n	8001de8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <HAL_SPI_Transmit+0xf6>
 8001d58:	8afb      	ldrh	r3, [r7, #22]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d13e      	bne.n	8001ddc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	881a      	ldrh	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	1c9a      	adds	r2, r3, #2
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d82:	e02b      	b.n	8001ddc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d112      	bne.n	8001db8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	881a      	ldrh	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	1c9a      	adds	r2, r3, #2
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	86da      	strh	r2, [r3, #54]	; 0x36
 8001db6:	e011      	b.n	8001ddc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001db8:	f7ff f80a 	bl	8000dd0 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d803      	bhi.n	8001dd0 <HAL_SPI_Transmit+0x168>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dce:	d102      	bne.n	8001dd6 <HAL_SPI_Transmit+0x16e>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d102      	bne.n	8001ddc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001dda:	e074      	b.n	8001ec6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1ce      	bne.n	8001d84 <HAL_SPI_Transmit+0x11c>
 8001de6:	e04c      	b.n	8001e82 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <HAL_SPI_Transmit+0x18e>
 8001df0:	8afb      	ldrh	r3, [r7, #22]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d140      	bne.n	8001e78 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	330c      	adds	r3, #12
 8001e00:	7812      	ldrb	r2, [r2, #0]
 8001e02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	3b01      	subs	r3, #1
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e1c:	e02c      	b.n	8001e78 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d113      	bne.n	8001e54 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	330c      	adds	r3, #12
 8001e36:	7812      	ldrb	r2, [r2, #0]
 8001e38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e52:	e011      	b.n	8001e78 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e54:	f7fe ffbc 	bl	8000dd0 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d803      	bhi.n	8001e6c <HAL_SPI_Transmit+0x204>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6a:	d102      	bne.n	8001e72 <HAL_SPI_Transmit+0x20a>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d102      	bne.n	8001e78 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e76:	e026      	b.n	8001ec6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1cd      	bne.n	8001e1e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	6839      	ldr	r1, [r7, #0]
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 fbb8 	bl	80025fc <SPI_EndRxTxTransaction>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2220      	movs	r2, #32
 8001e96:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10a      	bne.n	8001eb6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d002      	beq.n	8001ec4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	77fb      	strb	r3, [r7, #31]
 8001ec2:	e000      	b.n	8001ec6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001ec4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ed6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3720      	adds	r7, #32
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	4613      	mov	r3, r2
 8001eee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001efc:	d112      	bne.n	8001f24 <HAL_SPI_Receive+0x44>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10e      	bne.n	8001f24 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2204      	movs	r2, #4
 8001f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001f0e:	88fa      	ldrh	r2, [r7, #6]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	4613      	mov	r3, r2
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f8f1 	bl	8002102 <HAL_SPI_TransmitReceive>
 8001f20:	4603      	mov	r3, r0
 8001f22:	e0ea      	b.n	80020fa <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_SPI_Receive+0x52>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e0e3      	b.n	80020fa <HAL_SPI_Receive+0x21a>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f3a:	f7fe ff49 	bl	8000dd0 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d002      	beq.n	8001f52 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001f50:	e0ca      	b.n	80020e8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <HAL_SPI_Receive+0x7e>
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d102      	bne.n	8001f64 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001f62:	e0c1      	b.n	80020e8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2204      	movs	r2, #4
 8001f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	88fa      	ldrh	r2, [r7, #6]
 8001f7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	88fa      	ldrh	r2, [r7, #6]
 8001f82:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001faa:	d10f      	bne.n	8001fcc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd6:	2b40      	cmp	r3, #64	; 0x40
 8001fd8:	d007      	beq.n	8001fea <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fe8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d162      	bne.n	80020b8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001ff2:	e02e      	b.n	8002052 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d115      	bne.n	800202e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f103 020c 	add.w	r2, r3, #12
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200e:	7812      	ldrb	r2, [r2, #0]
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002022:	b29b      	uxth	r3, r3
 8002024:	3b01      	subs	r3, #1
 8002026:	b29a      	uxth	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800202c:	e011      	b.n	8002052 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800202e:	f7fe fecf 	bl	8000dd0 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d803      	bhi.n	8002046 <HAL_SPI_Receive+0x166>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002044:	d102      	bne.n	800204c <HAL_SPI_Receive+0x16c>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002050:	e04a      	b.n	80020e8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002056:	b29b      	uxth	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1cb      	bne.n	8001ff4 <HAL_SPI_Receive+0x114>
 800205c:	e031      	b.n	80020c2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d113      	bne.n	8002094 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002076:	b292      	uxth	r2, r2
 8002078:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207e:	1c9a      	adds	r2, r3, #2
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002088:	b29b      	uxth	r3, r3
 800208a:	3b01      	subs	r3, #1
 800208c:	b29a      	uxth	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002092:	e011      	b.n	80020b8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002094:	f7fe fe9c 	bl	8000dd0 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d803      	bhi.n	80020ac <HAL_SPI_Receive+0x1cc>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020aa:	d102      	bne.n	80020b2 <HAL_SPI_Receive+0x1d2>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d102      	bne.n	80020b8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80020b6:	e017      	b.n	80020e8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020bc:	b29b      	uxth	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1cd      	bne.n	800205e <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	6839      	ldr	r1, [r7, #0]
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 fa46 	bl	8002558 <SPI_EndRxTransaction>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2220      	movs	r2, #32
 80020d6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d002      	beq.n	80020e6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	75fb      	strb	r3, [r7, #23]
 80020e4:	e000      	b.n	80020e8 <HAL_SPI_Receive+0x208>
  }

error :
 80020e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b08c      	sub	sp, #48	; 0x30
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
 800210e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002110:	2301      	movs	r3, #1
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002120:	2b01      	cmp	r3, #1
 8002122:	d101      	bne.n	8002128 <HAL_SPI_TransmitReceive+0x26>
 8002124:	2302      	movs	r3, #2
 8002126:	e18a      	b.n	800243e <HAL_SPI_TransmitReceive+0x33c>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002130:	f7fe fe4e 	bl	8000dd0 <HAL_GetTick>
 8002134:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800213c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002146:	887b      	ldrh	r3, [r7, #2]
 8002148:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800214a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800214e:	2b01      	cmp	r3, #1
 8002150:	d00f      	beq.n	8002172 <HAL_SPI_TransmitReceive+0x70>
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002158:	d107      	bne.n	800216a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d103      	bne.n	800216a <HAL_SPI_TransmitReceive+0x68>
 8002162:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002166:	2b04      	cmp	r3, #4
 8002168:	d003      	beq.n	8002172 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800216a:	2302      	movs	r3, #2
 800216c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002170:	e15b      	b.n	800242a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_SPI_TransmitReceive+0x82>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <HAL_SPI_TransmitReceive+0x82>
 800217e:	887b      	ldrh	r3, [r7, #2]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d103      	bne.n	800218c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800218a:	e14e      	b.n	800242a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b04      	cmp	r3, #4
 8002196:	d003      	beq.n	80021a0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2205      	movs	r2, #5
 800219c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	887a      	ldrh	r2, [r7, #2]
 80021b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	887a      	ldrh	r2, [r7, #2]
 80021b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	887a      	ldrh	r2, [r7, #2]
 80021c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e0:	2b40      	cmp	r3, #64	; 0x40
 80021e2:	d007      	beq.n	80021f4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021fc:	d178      	bne.n	80022f0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <HAL_SPI_TransmitReceive+0x10a>
 8002206:	8b7b      	ldrh	r3, [r7, #26]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d166      	bne.n	80022da <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	881a      	ldrh	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	1c9a      	adds	r2, r3, #2
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002226:	b29b      	uxth	r3, r3
 8002228:	3b01      	subs	r3, #1
 800222a:	b29a      	uxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002230:	e053      	b.n	80022da <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b02      	cmp	r3, #2
 800223e:	d11b      	bne.n	8002278 <HAL_SPI_TransmitReceive+0x176>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d016      	beq.n	8002278 <HAL_SPI_TransmitReceive+0x176>
 800224a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224c:	2b01      	cmp	r3, #1
 800224e:	d113      	bne.n	8002278 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	881a      	ldrh	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	1c9a      	adds	r2, r3, #2
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800226a:	b29b      	uxth	r3, r3
 800226c:	3b01      	subs	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b01      	cmp	r3, #1
 8002284:	d119      	bne.n	80022ba <HAL_SPI_TransmitReceive+0x1b8>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800228a:	b29b      	uxth	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d014      	beq.n	80022ba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229a:	b292      	uxth	r2, r2
 800229c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a2:	1c9a      	adds	r2, r3, #2
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022b6:	2301      	movs	r3, #1
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80022ba:	f7fe fd89 	bl	8000dd0 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d807      	bhi.n	80022da <HAL_SPI_TransmitReceive+0x1d8>
 80022ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d0:	d003      	beq.n	80022da <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80022d8:	e0a7      	b.n	800242a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022de:	b29b      	uxth	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1a6      	bne.n	8002232 <HAL_SPI_TransmitReceive+0x130>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1a1      	bne.n	8002232 <HAL_SPI_TransmitReceive+0x130>
 80022ee:	e07c      	b.n	80023ea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <HAL_SPI_TransmitReceive+0x1fc>
 80022f8:	8b7b      	ldrh	r3, [r7, #26]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d16b      	bne.n	80023d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	330c      	adds	r3, #12
 8002308:	7812      	ldrb	r2, [r2, #0]
 800230a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800231a:	b29b      	uxth	r3, r3
 800231c:	3b01      	subs	r3, #1
 800231e:	b29a      	uxth	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002324:	e057      	b.n	80023d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b02      	cmp	r3, #2
 8002332:	d11c      	bne.n	800236e <HAL_SPI_TransmitReceive+0x26c>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002338:	b29b      	uxth	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d017      	beq.n	800236e <HAL_SPI_TransmitReceive+0x26c>
 800233e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002340:	2b01      	cmp	r3, #1
 8002342:	d114      	bne.n	800236e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	330c      	adds	r3, #12
 800234e:	7812      	ldrb	r2, [r2, #0]
 8002350:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002360:	b29b      	uxth	r3, r3
 8002362:	3b01      	subs	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b01      	cmp	r3, #1
 800237a:	d119      	bne.n	80023b0 <HAL_SPI_TransmitReceive+0x2ae>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002380:	b29b      	uxth	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d014      	beq.n	80023b0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023ac:	2301      	movs	r3, #1
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023b0:	f7fe fd0e 	bl	8000dd0 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023bc:	429a      	cmp	r2, r3
 80023be:	d803      	bhi.n	80023c8 <HAL_SPI_TransmitReceive+0x2c6>
 80023c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c6:	d102      	bne.n	80023ce <HAL_SPI_TransmitReceive+0x2cc>
 80023c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d103      	bne.n	80023d6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80023d4:	e029      	b.n	800242a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1a2      	bne.n	8002326 <HAL_SPI_TransmitReceive+0x224>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d19d      	bne.n	8002326 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f904 	bl	80025fc <SPI_EndRxTxTransaction>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d006      	beq.n	8002408 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2220      	movs	r2, #32
 8002404:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002406:	e010      	b.n	800242a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10b      	bne.n	8002428 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	e000      	b.n	800242a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002428:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800243a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800243e:	4618      	mov	r0, r3
 8002440:	3730      	adds	r7, #48	; 0x30
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	4613      	mov	r3, r2
 8002456:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002458:	f7fe fcba 	bl	8000dd0 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	4413      	add	r3, r2
 8002466:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002468:	f7fe fcb2 	bl	8000dd0 <HAL_GetTick>
 800246c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800246e:	4b39      	ldr	r3, [pc, #228]	; (8002554 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	015b      	lsls	r3, r3, #5
 8002474:	0d1b      	lsrs	r3, r3, #20
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	fb02 f303 	mul.w	r3, r2, r3
 800247c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800247e:	e054      	b.n	800252a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002486:	d050      	beq.n	800252a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002488:	f7fe fca2 	bl	8000dd0 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	429a      	cmp	r2, r3
 8002496:	d902      	bls.n	800249e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d13d      	bne.n	800251a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024b6:	d111      	bne.n	80024dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024c0:	d004      	beq.n	80024cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ca:	d107      	bne.n	80024dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024e4:	d10f      	bne.n	8002506 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002504:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e017      	b.n	800254a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	3b01      	subs	r3, #1
 8002528:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	4013      	ands	r3, r2
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	429a      	cmp	r2, r3
 8002538:	bf0c      	ite	eq
 800253a:	2301      	moveq	r3, #1
 800253c:	2300      	movne	r3, #0
 800253e:	b2db      	uxtb	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	429a      	cmp	r2, r3
 8002546:	d19b      	bne.n	8002480 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3720      	adds	r7, #32
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000010 	.word	0x20000010

08002558 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af02      	add	r7, sp, #8
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800256c:	d111      	bne.n	8002592 <SPI_EndRxTransaction+0x3a>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002576:	d004      	beq.n	8002582 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002580:	d107      	bne.n	8002592 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002590:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800259a:	d117      	bne.n	80025cc <SPI_EndRxTransaction+0x74>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a4:	d112      	bne.n	80025cc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2200      	movs	r2, #0
 80025ae:	2101      	movs	r1, #1
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f7ff ff49 	bl	8002448 <SPI_WaitFlagStateUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d01a      	beq.n	80025f2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c0:	f043 0220 	orr.w	r2, r3, #32
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e013      	b.n	80025f4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2200      	movs	r2, #0
 80025d4:	2180      	movs	r1, #128	; 0x80
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f7ff ff36 	bl	8002448 <SPI_WaitFlagStateUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d007      	beq.n	80025f2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e6:	f043 0220 	orr.w	r2, r3, #32
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e000      	b.n	80025f4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af02      	add	r7, sp, #8
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2200      	movs	r2, #0
 8002610:	2180      	movs	r1, #128	; 0x80
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f7ff ff18 	bl	8002448 <SPI_WaitFlagStateUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d007      	beq.n	800262e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	f043 0220 	orr.w	r2, r3, #32
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e000      	b.n	8002630 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e041      	b.n	80026ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7fe fa62 	bl	8000b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3304      	adds	r3, #4
 8002674:	4619      	mov	r1, r3
 8002676:	4610      	mov	r0, r2
 8002678:	f000 fa92 	bl	8002ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d001      	beq.n	80026f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e03a      	b.n	8002766 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a18      	ldr	r2, [pc, #96]	; (8002770 <HAL_TIM_Base_Start_IT+0x98>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00e      	beq.n	8002730 <HAL_TIM_Base_Start_IT+0x58>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271a:	d009      	beq.n	8002730 <HAL_TIM_Base_Start_IT+0x58>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a14      	ldr	r2, [pc, #80]	; (8002774 <HAL_TIM_Base_Start_IT+0x9c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d004      	beq.n	8002730 <HAL_TIM_Base_Start_IT+0x58>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a13      	ldr	r2, [pc, #76]	; (8002778 <HAL_TIM_Base_Start_IT+0xa0>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d111      	bne.n	8002754 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b06      	cmp	r3, #6
 8002740:	d010      	beq.n	8002764 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0201 	orr.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002752:	e007      	b.n	8002764 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr
 8002770:	40012c00 	.word	0x40012c00
 8002774:	40000400 	.word	0x40000400
 8002778:	40000800 	.word	0x40000800

0800277c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6a1a      	ldr	r2, [r3, #32]
 800279a:	f241 1311 	movw	r3, #4369	; 0x1111
 800279e:	4013      	ands	r3, r2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10f      	bne.n	80027c4 <HAL_TIM_Base_Stop_IT+0x48>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6a1a      	ldr	r2, [r3, #32]
 80027aa:	f240 4344 	movw	r3, #1092	; 0x444
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d107      	bne.n	80027c4 <HAL_TIM_Base_Stop_IT+0x48>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0201 	bic.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d122      	bne.n	8002834 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d11b      	bne.n	8002834 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f06f 0202 	mvn.w	r2, #2
 8002804:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f9a4 	bl	8002b68 <HAL_TIM_IC_CaptureCallback>
 8002820:	e005      	b.n	800282e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f997 	bl	8002b56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f9a6 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f003 0304 	and.w	r3, r3, #4
 800283e:	2b04      	cmp	r3, #4
 8002840:	d122      	bne.n	8002888 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b04      	cmp	r3, #4
 800284e:	d11b      	bne.n	8002888 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f06f 0204 	mvn.w	r2, #4
 8002858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2202      	movs	r2, #2
 800285e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f97a 	bl	8002b68 <HAL_TIM_IC_CaptureCallback>
 8002874:	e005      	b.n	8002882 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f96d 	bl	8002b56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f97c 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b08      	cmp	r3, #8
 8002894:	d122      	bne.n	80028dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d11b      	bne.n	80028dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0208 	mvn.w	r2, #8
 80028ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2204      	movs	r2, #4
 80028b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f950 	bl	8002b68 <HAL_TIM_IC_CaptureCallback>
 80028c8:	e005      	b.n	80028d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f943 	bl	8002b56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f952 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	2b10      	cmp	r3, #16
 80028e8:	d122      	bne.n	8002930 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b10      	cmp	r3, #16
 80028f6:	d11b      	bne.n	8002930 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0210 	mvn.w	r2, #16
 8002900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2208      	movs	r2, #8
 8002906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f926 	bl	8002b68 <HAL_TIM_IC_CaptureCallback>
 800291c:	e005      	b.n	800292a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f919 	bl	8002b56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f928 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b01      	cmp	r3, #1
 800293c:	d10e      	bne.n	800295c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b01      	cmp	r3, #1
 800294a:	d107      	bne.n	800295c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f06f 0201 	mvn.w	r2, #1
 8002954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fd fe98 	bl	800068c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002966:	2b80      	cmp	r3, #128	; 0x80
 8002968:	d10e      	bne.n	8002988 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002974:	2b80      	cmp	r3, #128	; 0x80
 8002976:	d107      	bne.n	8002988 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 fa6b 	bl	8002e5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002992:	2b40      	cmp	r3, #64	; 0x40
 8002994:	d10e      	bne.n	80029b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a0:	2b40      	cmp	r3, #64	; 0x40
 80029a2:	d107      	bne.n	80029b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f8ec 	bl	8002b8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b20      	cmp	r3, #32
 80029c0:	d10e      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d107      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f06f 0220 	mvn.w	r2, #32
 80029d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fa36 	bl	8002e4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_TIM_ConfigClockSource+0x18>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e0a6      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x166>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b40      	cmp	r3, #64	; 0x40
 8002a36:	d067      	beq.n	8002b08 <HAL_TIM_ConfigClockSource+0x120>
 8002a38:	2b40      	cmp	r3, #64	; 0x40
 8002a3a:	d80b      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x6c>
 8002a3c:	2b10      	cmp	r3, #16
 8002a3e:	d073      	beq.n	8002b28 <HAL_TIM_ConfigClockSource+0x140>
 8002a40:	2b10      	cmp	r3, #16
 8002a42:	d802      	bhi.n	8002a4a <HAL_TIM_ConfigClockSource+0x62>
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d06f      	beq.n	8002b28 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a48:	e078      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	d06c      	beq.n	8002b28 <HAL_TIM_ConfigClockSource+0x140>
 8002a4e:	2b30      	cmp	r3, #48	; 0x30
 8002a50:	d06a      	beq.n	8002b28 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002a52:	e073      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a54:	2b70      	cmp	r3, #112	; 0x70
 8002a56:	d00d      	beq.n	8002a74 <HAL_TIM_ConfigClockSource+0x8c>
 8002a58:	2b70      	cmp	r3, #112	; 0x70
 8002a5a:	d804      	bhi.n	8002a66 <HAL_TIM_ConfigClockSource+0x7e>
 8002a5c:	2b50      	cmp	r3, #80	; 0x50
 8002a5e:	d033      	beq.n	8002ac8 <HAL_TIM_ConfigClockSource+0xe0>
 8002a60:	2b60      	cmp	r3, #96	; 0x60
 8002a62:	d041      	beq.n	8002ae8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002a64:	e06a      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a6a:	d066      	beq.n	8002b3a <HAL_TIM_ConfigClockSource+0x152>
 8002a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a70:	d017      	beq.n	8002aa2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002a72:	e063      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6899      	ldr	r1, [r3, #8]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f000 f965 	bl	8002d52 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a96:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	609a      	str	r2, [r3, #8]
      break;
 8002aa0:	e04c      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	6899      	ldr	r1, [r3, #8]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f000 f94e 	bl	8002d52 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ac4:	609a      	str	r2, [r3, #8]
      break;
 8002ac6:	e039      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f000 f8c5 	bl	8002c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2150      	movs	r1, #80	; 0x50
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 f91c 	bl	8002d1e <TIM_ITRx_SetConfig>
      break;
 8002ae6:	e029      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	6859      	ldr	r1, [r3, #4]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	461a      	mov	r2, r3
 8002af6:	f000 f8e3 	bl	8002cc0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2160      	movs	r1, #96	; 0x60
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 f90c 	bl	8002d1e <TIM_ITRx_SetConfig>
      break;
 8002b06:	e019      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	461a      	mov	r2, r3
 8002b16:	f000 f8a5 	bl	8002c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2140      	movs	r1, #64	; 0x40
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 f8fc 	bl	8002d1e <TIM_ITRx_SetConfig>
      break;
 8002b26:	e009      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4619      	mov	r1, r3
 8002b32:	4610      	mov	r0, r2
 8002b34:	f000 f8f3 	bl	8002d1e <TIM_ITRx_SetConfig>
        break;
 8002b38:	e000      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002b3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr

08002b7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr
	...

08002ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a29      	ldr	r2, [pc, #164]	; (8002c58 <TIM_Base_SetConfig+0xb8>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00b      	beq.n	8002bd0 <TIM_Base_SetConfig+0x30>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bbe:	d007      	beq.n	8002bd0 <TIM_Base_SetConfig+0x30>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a26      	ldr	r2, [pc, #152]	; (8002c5c <TIM_Base_SetConfig+0xbc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d003      	beq.n	8002bd0 <TIM_Base_SetConfig+0x30>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a25      	ldr	r2, [pc, #148]	; (8002c60 <TIM_Base_SetConfig+0xc0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d108      	bne.n	8002be2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a1c      	ldr	r2, [pc, #112]	; (8002c58 <TIM_Base_SetConfig+0xb8>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00b      	beq.n	8002c02 <TIM_Base_SetConfig+0x62>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf0:	d007      	beq.n	8002c02 <TIM_Base_SetConfig+0x62>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a19      	ldr	r2, [pc, #100]	; (8002c5c <TIM_Base_SetConfig+0xbc>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d003      	beq.n	8002c02 <TIM_Base_SetConfig+0x62>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a18      	ldr	r2, [pc, #96]	; (8002c60 <TIM_Base_SetConfig+0xc0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d108      	bne.n	8002c14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a07      	ldr	r2, [pc, #28]	; (8002c58 <TIM_Base_SetConfig+0xb8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d103      	bne.n	8002c48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	615a      	str	r2, [r3, #20]
}
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	40012c00 	.word	0x40012c00
 8002c5c:	40000400 	.word	0x40000400
 8002c60:	40000800 	.word	0x40000800

08002c64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	f023 0201 	bic.w	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f023 030a 	bic.w	r3, r3, #10
 8002ca0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	621a      	str	r2, [r3, #32]
}
 8002cb6:	bf00      	nop
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	f023 0210 	bic.w	r2, r3, #16
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	031b      	lsls	r3, r3, #12
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cfc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	621a      	str	r2, [r3, #32]
}
 8002d14:	bf00      	nop
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b085      	sub	sp, #20
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f043 0307 	orr.w	r3, r3, #7
 8002d40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	609a      	str	r2, [r3, #8]
}
 8002d48:	bf00      	nop
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b087      	sub	sp, #28
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	021a      	lsls	r2, r3, #8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	431a      	orrs	r2, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	609a      	str	r2, [r3, #8]
}
 8002d86:	bf00      	nop
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e046      	b.n	8002e36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a16      	ldr	r2, [pc, #88]	; (8002e40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00e      	beq.n	8002e0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df4:	d009      	beq.n	8002e0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a12      	ldr	r2, [pc, #72]	; (8002e44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d004      	beq.n	8002e0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a10      	ldr	r2, [pc, #64]	; (8002e48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d10c      	bne.n	8002e24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr
 8002e40:	40012c00 	.word	0x40012c00
 8002e44:	40000400 	.word	0x40000400
 8002e48:	40000800 	.word	0x40000800

08002e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e03f      	b.n	8002f02 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fd fe6c 	bl	8000b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2224      	movs	r2, #36	; 0x24
 8002ea0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f905 	bl	80030c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	691a      	ldr	r2, [r3, #16]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ec8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ed8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ee8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b08a      	sub	sp, #40	; 0x28
 8002f0e:	af02      	add	r7, sp, #8
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	603b      	str	r3, [r7, #0]
 8002f16:	4613      	mov	r3, r2
 8002f18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b20      	cmp	r3, #32
 8002f28:	d17c      	bne.n	8003024 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <HAL_UART_Transmit+0x2c>
 8002f30:	88fb      	ldrh	r3, [r7, #6]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e075      	b.n	8003026 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_UART_Transmit+0x3e>
 8002f44:	2302      	movs	r3, #2
 8002f46:	e06e      	b.n	8003026 <HAL_UART_Transmit+0x11c>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2221      	movs	r2, #33	; 0x21
 8002f5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002f5e:	f7fd ff37 	bl	8000dd0 <HAL_GetTick>
 8002f62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	88fa      	ldrh	r2, [r7, #6]
 8002f68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	88fa      	ldrh	r2, [r7, #6]
 8002f6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f78:	d108      	bne.n	8002f8c <HAL_UART_Transmit+0x82>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d104      	bne.n	8002f8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	61bb      	str	r3, [r7, #24]
 8002f8a:	e003      	b.n	8002f94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002f9c:	e02a      	b.n	8002ff4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2180      	movs	r1, #128	; 0x80
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f840 	bl	800302e <UART_WaitOnFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e036      	b.n	8003026 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	61bb      	str	r3, [r7, #24]
 8002fd4:	e007      	b.n	8002fe6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	781a      	ldrb	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1cf      	bne.n	8002f9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2200      	movs	r2, #0
 8003006:	2140      	movs	r1, #64	; 0x40
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 f810 	bl	800302e <UART_WaitOnFlagUntilTimeout>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e006      	b.n	8003026 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	e000      	b.n	8003026 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003024:	2302      	movs	r3, #2
  }
}
 8003026:	4618      	mov	r0, r3
 8003028:	3720      	adds	r7, #32
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	60f8      	str	r0, [r7, #12]
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	603b      	str	r3, [r7, #0]
 800303a:	4613      	mov	r3, r2
 800303c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800303e:	e02c      	b.n	800309a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003046:	d028      	beq.n	800309a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d007      	beq.n	800305e <UART_WaitOnFlagUntilTimeout+0x30>
 800304e:	f7fd febf 	bl	8000dd0 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	429a      	cmp	r2, r3
 800305c:	d21d      	bcs.n	800309a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800306c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0201 	bic.w	r2, r2, #1
 800307c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2220      	movs	r2, #32
 8003082:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e00f      	b.n	80030ba <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4013      	ands	r3, r2
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	bf0c      	ite	eq
 80030aa:	2301      	moveq	r3, #1
 80030ac:	2300      	movne	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	461a      	mov	r2, r3
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d0c3      	beq.n	8003040 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030fe:	f023 030c 	bic.w	r3, r3, #12
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6812      	ldr	r2, [r2, #0]
 8003106:	68b9      	ldr	r1, [r7, #8]
 8003108:	430b      	orrs	r3, r1
 800310a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a2c      	ldr	r2, [pc, #176]	; (80031d8 <UART_SetConfig+0x114>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d103      	bne.n	8003134 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800312c:	f7fe fce6 	bl	8001afc <HAL_RCC_GetPCLK2Freq>
 8003130:	60f8      	str	r0, [r7, #12]
 8003132:	e002      	b.n	800313a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003134:	f7fe fcce 	bl	8001ad4 <HAL_RCC_GetPCLK1Freq>
 8003138:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	009a      	lsls	r2, r3, #2
 8003144:	441a      	add	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003150:	4a22      	ldr	r2, [pc, #136]	; (80031dc <UART_SetConfig+0x118>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	0119      	lsls	r1, r3, #4
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	009a      	lsls	r2, r3, #2
 8003164:	441a      	add	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003170:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <UART_SetConfig+0x118>)
 8003172:	fba3 0302 	umull	r0, r3, r3, r2
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	2064      	movs	r0, #100	; 0x64
 800317a:	fb00 f303 	mul.w	r3, r0, r3
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	3332      	adds	r3, #50	; 0x32
 8003184:	4a15      	ldr	r2, [pc, #84]	; (80031dc <UART_SetConfig+0x118>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003190:	4419      	add	r1, r3
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	009a      	lsls	r2, r3, #2
 800319c:	441a      	add	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <UART_SetConfig+0x118>)
 80031aa:	fba3 0302 	umull	r0, r3, r3, r2
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	2064      	movs	r0, #100	; 0x64
 80031b2:	fb00 f303 	mul.w	r3, r0, r3
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	3332      	adds	r3, #50	; 0x32
 80031bc:	4a07      	ldr	r2, [pc, #28]	; (80031dc <UART_SetConfig+0x118>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	f003 020f 	and.w	r2, r3, #15
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	440a      	add	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031d0:	bf00      	nop
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40013800 	.word	0x40013800
 80031dc:	51eb851f 	.word	0x51eb851f

080031e0 <__errno>:
 80031e0:	4b01      	ldr	r3, [pc, #4]	; (80031e8 <__errno+0x8>)
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	2000001c 	.word	0x2000001c

080031ec <__libc_init_array>:
 80031ec:	b570      	push	{r4, r5, r6, lr}
 80031ee:	2500      	movs	r5, #0
 80031f0:	4e0c      	ldr	r6, [pc, #48]	; (8003224 <__libc_init_array+0x38>)
 80031f2:	4c0d      	ldr	r4, [pc, #52]	; (8003228 <__libc_init_array+0x3c>)
 80031f4:	1ba4      	subs	r4, r4, r6
 80031f6:	10a4      	asrs	r4, r4, #2
 80031f8:	42a5      	cmp	r5, r4
 80031fa:	d109      	bne.n	8003210 <__libc_init_array+0x24>
 80031fc:	f000 fc34 	bl	8003a68 <_init>
 8003200:	2500      	movs	r5, #0
 8003202:	4e0a      	ldr	r6, [pc, #40]	; (800322c <__libc_init_array+0x40>)
 8003204:	4c0a      	ldr	r4, [pc, #40]	; (8003230 <__libc_init_array+0x44>)
 8003206:	1ba4      	subs	r4, r4, r6
 8003208:	10a4      	asrs	r4, r4, #2
 800320a:	42a5      	cmp	r5, r4
 800320c:	d105      	bne.n	800321a <__libc_init_array+0x2e>
 800320e:	bd70      	pop	{r4, r5, r6, pc}
 8003210:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003214:	4798      	blx	r3
 8003216:	3501      	adds	r5, #1
 8003218:	e7ee      	b.n	80031f8 <__libc_init_array+0xc>
 800321a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800321e:	4798      	blx	r3
 8003220:	3501      	adds	r5, #1
 8003222:	e7f2      	b.n	800320a <__libc_init_array+0x1e>
 8003224:	08003be4 	.word	0x08003be4
 8003228:	08003be4 	.word	0x08003be4
 800322c:	08003be4 	.word	0x08003be4
 8003230:	08003be8 	.word	0x08003be8

08003234 <memset>:
 8003234:	4603      	mov	r3, r0
 8003236:	4402      	add	r2, r0
 8003238:	4293      	cmp	r3, r2
 800323a:	d100      	bne.n	800323e <memset+0xa>
 800323c:	4770      	bx	lr
 800323e:	f803 1b01 	strb.w	r1, [r3], #1
 8003242:	e7f9      	b.n	8003238 <memset+0x4>

08003244 <siprintf>:
 8003244:	b40e      	push	{r1, r2, r3}
 8003246:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800324a:	b500      	push	{lr}
 800324c:	b09c      	sub	sp, #112	; 0x70
 800324e:	ab1d      	add	r3, sp, #116	; 0x74
 8003250:	9002      	str	r0, [sp, #8]
 8003252:	9006      	str	r0, [sp, #24]
 8003254:	9107      	str	r1, [sp, #28]
 8003256:	9104      	str	r1, [sp, #16]
 8003258:	4808      	ldr	r0, [pc, #32]	; (800327c <siprintf+0x38>)
 800325a:	4909      	ldr	r1, [pc, #36]	; (8003280 <siprintf+0x3c>)
 800325c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003260:	9105      	str	r1, [sp, #20]
 8003262:	6800      	ldr	r0, [r0, #0]
 8003264:	a902      	add	r1, sp, #8
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	f000 f866 	bl	8003338 <_svfiprintf_r>
 800326c:	2200      	movs	r2, #0
 800326e:	9b02      	ldr	r3, [sp, #8]
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	b01c      	add	sp, #112	; 0x70
 8003274:	f85d eb04 	ldr.w	lr, [sp], #4
 8003278:	b003      	add	sp, #12
 800327a:	4770      	bx	lr
 800327c:	2000001c 	.word	0x2000001c
 8003280:	ffff0208 	.word	0xffff0208

08003284 <__ssputs_r>:
 8003284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003288:	688e      	ldr	r6, [r1, #8]
 800328a:	4682      	mov	sl, r0
 800328c:	429e      	cmp	r6, r3
 800328e:	460c      	mov	r4, r1
 8003290:	4690      	mov	r8, r2
 8003292:	4699      	mov	r9, r3
 8003294:	d837      	bhi.n	8003306 <__ssputs_r+0x82>
 8003296:	898a      	ldrh	r2, [r1, #12]
 8003298:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800329c:	d031      	beq.n	8003302 <__ssputs_r+0x7e>
 800329e:	2302      	movs	r3, #2
 80032a0:	6825      	ldr	r5, [r4, #0]
 80032a2:	6909      	ldr	r1, [r1, #16]
 80032a4:	1a6f      	subs	r7, r5, r1
 80032a6:	6965      	ldr	r5, [r4, #20]
 80032a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80032b0:	f109 0301 	add.w	r3, r9, #1
 80032b4:	443b      	add	r3, r7
 80032b6:	429d      	cmp	r5, r3
 80032b8:	bf38      	it	cc
 80032ba:	461d      	movcc	r5, r3
 80032bc:	0553      	lsls	r3, r2, #21
 80032be:	d530      	bpl.n	8003322 <__ssputs_r+0x9e>
 80032c0:	4629      	mov	r1, r5
 80032c2:	f000 fb37 	bl	8003934 <_malloc_r>
 80032c6:	4606      	mov	r6, r0
 80032c8:	b950      	cbnz	r0, 80032e0 <__ssputs_r+0x5c>
 80032ca:	230c      	movs	r3, #12
 80032cc:	f04f 30ff 	mov.w	r0, #4294967295
 80032d0:	f8ca 3000 	str.w	r3, [sl]
 80032d4:	89a3      	ldrh	r3, [r4, #12]
 80032d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032da:	81a3      	strh	r3, [r4, #12]
 80032dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032e0:	463a      	mov	r2, r7
 80032e2:	6921      	ldr	r1, [r4, #16]
 80032e4:	f000 fab6 	bl	8003854 <memcpy>
 80032e8:	89a3      	ldrh	r3, [r4, #12]
 80032ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032f2:	81a3      	strh	r3, [r4, #12]
 80032f4:	6126      	str	r6, [r4, #16]
 80032f6:	443e      	add	r6, r7
 80032f8:	6026      	str	r6, [r4, #0]
 80032fa:	464e      	mov	r6, r9
 80032fc:	6165      	str	r5, [r4, #20]
 80032fe:	1bed      	subs	r5, r5, r7
 8003300:	60a5      	str	r5, [r4, #8]
 8003302:	454e      	cmp	r6, r9
 8003304:	d900      	bls.n	8003308 <__ssputs_r+0x84>
 8003306:	464e      	mov	r6, r9
 8003308:	4632      	mov	r2, r6
 800330a:	4641      	mov	r1, r8
 800330c:	6820      	ldr	r0, [r4, #0]
 800330e:	f000 faac 	bl	800386a <memmove>
 8003312:	68a3      	ldr	r3, [r4, #8]
 8003314:	2000      	movs	r0, #0
 8003316:	1b9b      	subs	r3, r3, r6
 8003318:	60a3      	str	r3, [r4, #8]
 800331a:	6823      	ldr	r3, [r4, #0]
 800331c:	441e      	add	r6, r3
 800331e:	6026      	str	r6, [r4, #0]
 8003320:	e7dc      	b.n	80032dc <__ssputs_r+0x58>
 8003322:	462a      	mov	r2, r5
 8003324:	f000 fb60 	bl	80039e8 <_realloc_r>
 8003328:	4606      	mov	r6, r0
 800332a:	2800      	cmp	r0, #0
 800332c:	d1e2      	bne.n	80032f4 <__ssputs_r+0x70>
 800332e:	6921      	ldr	r1, [r4, #16]
 8003330:	4650      	mov	r0, sl
 8003332:	f000 fab3 	bl	800389c <_free_r>
 8003336:	e7c8      	b.n	80032ca <__ssputs_r+0x46>

08003338 <_svfiprintf_r>:
 8003338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800333c:	461d      	mov	r5, r3
 800333e:	898b      	ldrh	r3, [r1, #12]
 8003340:	b09d      	sub	sp, #116	; 0x74
 8003342:	061f      	lsls	r7, r3, #24
 8003344:	4680      	mov	r8, r0
 8003346:	460c      	mov	r4, r1
 8003348:	4616      	mov	r6, r2
 800334a:	d50f      	bpl.n	800336c <_svfiprintf_r+0x34>
 800334c:	690b      	ldr	r3, [r1, #16]
 800334e:	b96b      	cbnz	r3, 800336c <_svfiprintf_r+0x34>
 8003350:	2140      	movs	r1, #64	; 0x40
 8003352:	f000 faef 	bl	8003934 <_malloc_r>
 8003356:	6020      	str	r0, [r4, #0]
 8003358:	6120      	str	r0, [r4, #16]
 800335a:	b928      	cbnz	r0, 8003368 <_svfiprintf_r+0x30>
 800335c:	230c      	movs	r3, #12
 800335e:	f8c8 3000 	str.w	r3, [r8]
 8003362:	f04f 30ff 	mov.w	r0, #4294967295
 8003366:	e0c8      	b.n	80034fa <_svfiprintf_r+0x1c2>
 8003368:	2340      	movs	r3, #64	; 0x40
 800336a:	6163      	str	r3, [r4, #20]
 800336c:	2300      	movs	r3, #0
 800336e:	9309      	str	r3, [sp, #36]	; 0x24
 8003370:	2320      	movs	r3, #32
 8003372:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003376:	2330      	movs	r3, #48	; 0x30
 8003378:	f04f 0b01 	mov.w	fp, #1
 800337c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003380:	9503      	str	r5, [sp, #12]
 8003382:	4637      	mov	r7, r6
 8003384:	463d      	mov	r5, r7
 8003386:	f815 3b01 	ldrb.w	r3, [r5], #1
 800338a:	b10b      	cbz	r3, 8003390 <_svfiprintf_r+0x58>
 800338c:	2b25      	cmp	r3, #37	; 0x25
 800338e:	d13e      	bne.n	800340e <_svfiprintf_r+0xd6>
 8003390:	ebb7 0a06 	subs.w	sl, r7, r6
 8003394:	d00b      	beq.n	80033ae <_svfiprintf_r+0x76>
 8003396:	4653      	mov	r3, sl
 8003398:	4632      	mov	r2, r6
 800339a:	4621      	mov	r1, r4
 800339c:	4640      	mov	r0, r8
 800339e:	f7ff ff71 	bl	8003284 <__ssputs_r>
 80033a2:	3001      	adds	r0, #1
 80033a4:	f000 80a4 	beq.w	80034f0 <_svfiprintf_r+0x1b8>
 80033a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033aa:	4453      	add	r3, sl
 80033ac:	9309      	str	r3, [sp, #36]	; 0x24
 80033ae:	783b      	ldrb	r3, [r7, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 809d 	beq.w	80034f0 <_svfiprintf_r+0x1b8>
 80033b6:	2300      	movs	r3, #0
 80033b8:	f04f 32ff 	mov.w	r2, #4294967295
 80033bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033c0:	9304      	str	r3, [sp, #16]
 80033c2:	9307      	str	r3, [sp, #28]
 80033c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033c8:	931a      	str	r3, [sp, #104]	; 0x68
 80033ca:	462f      	mov	r7, r5
 80033cc:	2205      	movs	r2, #5
 80033ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80033d2:	4850      	ldr	r0, [pc, #320]	; (8003514 <_svfiprintf_r+0x1dc>)
 80033d4:	f000 fa30 	bl	8003838 <memchr>
 80033d8:	9b04      	ldr	r3, [sp, #16]
 80033da:	b9d0      	cbnz	r0, 8003412 <_svfiprintf_r+0xda>
 80033dc:	06d9      	lsls	r1, r3, #27
 80033de:	bf44      	itt	mi
 80033e0:	2220      	movmi	r2, #32
 80033e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033e6:	071a      	lsls	r2, r3, #28
 80033e8:	bf44      	itt	mi
 80033ea:	222b      	movmi	r2, #43	; 0x2b
 80033ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033f0:	782a      	ldrb	r2, [r5, #0]
 80033f2:	2a2a      	cmp	r2, #42	; 0x2a
 80033f4:	d015      	beq.n	8003422 <_svfiprintf_r+0xea>
 80033f6:	462f      	mov	r7, r5
 80033f8:	2000      	movs	r0, #0
 80033fa:	250a      	movs	r5, #10
 80033fc:	9a07      	ldr	r2, [sp, #28]
 80033fe:	4639      	mov	r1, r7
 8003400:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003404:	3b30      	subs	r3, #48	; 0x30
 8003406:	2b09      	cmp	r3, #9
 8003408:	d94d      	bls.n	80034a6 <_svfiprintf_r+0x16e>
 800340a:	b1b8      	cbz	r0, 800343c <_svfiprintf_r+0x104>
 800340c:	e00f      	b.n	800342e <_svfiprintf_r+0xf6>
 800340e:	462f      	mov	r7, r5
 8003410:	e7b8      	b.n	8003384 <_svfiprintf_r+0x4c>
 8003412:	4a40      	ldr	r2, [pc, #256]	; (8003514 <_svfiprintf_r+0x1dc>)
 8003414:	463d      	mov	r5, r7
 8003416:	1a80      	subs	r0, r0, r2
 8003418:	fa0b f000 	lsl.w	r0, fp, r0
 800341c:	4318      	orrs	r0, r3
 800341e:	9004      	str	r0, [sp, #16]
 8003420:	e7d3      	b.n	80033ca <_svfiprintf_r+0x92>
 8003422:	9a03      	ldr	r2, [sp, #12]
 8003424:	1d11      	adds	r1, r2, #4
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	9103      	str	r1, [sp, #12]
 800342a:	2a00      	cmp	r2, #0
 800342c:	db01      	blt.n	8003432 <_svfiprintf_r+0xfa>
 800342e:	9207      	str	r2, [sp, #28]
 8003430:	e004      	b.n	800343c <_svfiprintf_r+0x104>
 8003432:	4252      	negs	r2, r2
 8003434:	f043 0302 	orr.w	r3, r3, #2
 8003438:	9207      	str	r2, [sp, #28]
 800343a:	9304      	str	r3, [sp, #16]
 800343c:	783b      	ldrb	r3, [r7, #0]
 800343e:	2b2e      	cmp	r3, #46	; 0x2e
 8003440:	d10c      	bne.n	800345c <_svfiprintf_r+0x124>
 8003442:	787b      	ldrb	r3, [r7, #1]
 8003444:	2b2a      	cmp	r3, #42	; 0x2a
 8003446:	d133      	bne.n	80034b0 <_svfiprintf_r+0x178>
 8003448:	9b03      	ldr	r3, [sp, #12]
 800344a:	3702      	adds	r7, #2
 800344c:	1d1a      	adds	r2, r3, #4
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	9203      	str	r2, [sp, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	bfb8      	it	lt
 8003456:	f04f 33ff 	movlt.w	r3, #4294967295
 800345a:	9305      	str	r3, [sp, #20]
 800345c:	4d2e      	ldr	r5, [pc, #184]	; (8003518 <_svfiprintf_r+0x1e0>)
 800345e:	2203      	movs	r2, #3
 8003460:	7839      	ldrb	r1, [r7, #0]
 8003462:	4628      	mov	r0, r5
 8003464:	f000 f9e8 	bl	8003838 <memchr>
 8003468:	b138      	cbz	r0, 800347a <_svfiprintf_r+0x142>
 800346a:	2340      	movs	r3, #64	; 0x40
 800346c:	1b40      	subs	r0, r0, r5
 800346e:	fa03 f000 	lsl.w	r0, r3, r0
 8003472:	9b04      	ldr	r3, [sp, #16]
 8003474:	3701      	adds	r7, #1
 8003476:	4303      	orrs	r3, r0
 8003478:	9304      	str	r3, [sp, #16]
 800347a:	7839      	ldrb	r1, [r7, #0]
 800347c:	2206      	movs	r2, #6
 800347e:	4827      	ldr	r0, [pc, #156]	; (800351c <_svfiprintf_r+0x1e4>)
 8003480:	1c7e      	adds	r6, r7, #1
 8003482:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003486:	f000 f9d7 	bl	8003838 <memchr>
 800348a:	2800      	cmp	r0, #0
 800348c:	d038      	beq.n	8003500 <_svfiprintf_r+0x1c8>
 800348e:	4b24      	ldr	r3, [pc, #144]	; (8003520 <_svfiprintf_r+0x1e8>)
 8003490:	bb13      	cbnz	r3, 80034d8 <_svfiprintf_r+0x1a0>
 8003492:	9b03      	ldr	r3, [sp, #12]
 8003494:	3307      	adds	r3, #7
 8003496:	f023 0307 	bic.w	r3, r3, #7
 800349a:	3308      	adds	r3, #8
 800349c:	9303      	str	r3, [sp, #12]
 800349e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034a0:	444b      	add	r3, r9
 80034a2:	9309      	str	r3, [sp, #36]	; 0x24
 80034a4:	e76d      	b.n	8003382 <_svfiprintf_r+0x4a>
 80034a6:	fb05 3202 	mla	r2, r5, r2, r3
 80034aa:	2001      	movs	r0, #1
 80034ac:	460f      	mov	r7, r1
 80034ae:	e7a6      	b.n	80033fe <_svfiprintf_r+0xc6>
 80034b0:	2300      	movs	r3, #0
 80034b2:	250a      	movs	r5, #10
 80034b4:	4619      	mov	r1, r3
 80034b6:	3701      	adds	r7, #1
 80034b8:	9305      	str	r3, [sp, #20]
 80034ba:	4638      	mov	r0, r7
 80034bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034c0:	3a30      	subs	r2, #48	; 0x30
 80034c2:	2a09      	cmp	r2, #9
 80034c4:	d903      	bls.n	80034ce <_svfiprintf_r+0x196>
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0c8      	beq.n	800345c <_svfiprintf_r+0x124>
 80034ca:	9105      	str	r1, [sp, #20]
 80034cc:	e7c6      	b.n	800345c <_svfiprintf_r+0x124>
 80034ce:	fb05 2101 	mla	r1, r5, r1, r2
 80034d2:	2301      	movs	r3, #1
 80034d4:	4607      	mov	r7, r0
 80034d6:	e7f0      	b.n	80034ba <_svfiprintf_r+0x182>
 80034d8:	ab03      	add	r3, sp, #12
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	4622      	mov	r2, r4
 80034de:	4b11      	ldr	r3, [pc, #68]	; (8003524 <_svfiprintf_r+0x1ec>)
 80034e0:	a904      	add	r1, sp, #16
 80034e2:	4640      	mov	r0, r8
 80034e4:	f3af 8000 	nop.w
 80034e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80034ec:	4681      	mov	r9, r0
 80034ee:	d1d6      	bne.n	800349e <_svfiprintf_r+0x166>
 80034f0:	89a3      	ldrh	r3, [r4, #12]
 80034f2:	065b      	lsls	r3, r3, #25
 80034f4:	f53f af35 	bmi.w	8003362 <_svfiprintf_r+0x2a>
 80034f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034fa:	b01d      	add	sp, #116	; 0x74
 80034fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003500:	ab03      	add	r3, sp, #12
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	4622      	mov	r2, r4
 8003506:	4b07      	ldr	r3, [pc, #28]	; (8003524 <_svfiprintf_r+0x1ec>)
 8003508:	a904      	add	r1, sp, #16
 800350a:	4640      	mov	r0, r8
 800350c:	f000 f882 	bl	8003614 <_printf_i>
 8003510:	e7ea      	b.n	80034e8 <_svfiprintf_r+0x1b0>
 8003512:	bf00      	nop
 8003514:	08003bb0 	.word	0x08003bb0
 8003518:	08003bb6 	.word	0x08003bb6
 800351c:	08003bba 	.word	0x08003bba
 8003520:	00000000 	.word	0x00000000
 8003524:	08003285 	.word	0x08003285

08003528 <_printf_common>:
 8003528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800352c:	4691      	mov	r9, r2
 800352e:	461f      	mov	r7, r3
 8003530:	688a      	ldr	r2, [r1, #8]
 8003532:	690b      	ldr	r3, [r1, #16]
 8003534:	4606      	mov	r6, r0
 8003536:	4293      	cmp	r3, r2
 8003538:	bfb8      	it	lt
 800353a:	4613      	movlt	r3, r2
 800353c:	f8c9 3000 	str.w	r3, [r9]
 8003540:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003544:	460c      	mov	r4, r1
 8003546:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800354a:	b112      	cbz	r2, 8003552 <_printf_common+0x2a>
 800354c:	3301      	adds	r3, #1
 800354e:	f8c9 3000 	str.w	r3, [r9]
 8003552:	6823      	ldr	r3, [r4, #0]
 8003554:	0699      	lsls	r1, r3, #26
 8003556:	bf42      	ittt	mi
 8003558:	f8d9 3000 	ldrmi.w	r3, [r9]
 800355c:	3302      	addmi	r3, #2
 800355e:	f8c9 3000 	strmi.w	r3, [r9]
 8003562:	6825      	ldr	r5, [r4, #0]
 8003564:	f015 0506 	ands.w	r5, r5, #6
 8003568:	d107      	bne.n	800357a <_printf_common+0x52>
 800356a:	f104 0a19 	add.w	sl, r4, #25
 800356e:	68e3      	ldr	r3, [r4, #12]
 8003570:	f8d9 2000 	ldr.w	r2, [r9]
 8003574:	1a9b      	subs	r3, r3, r2
 8003576:	42ab      	cmp	r3, r5
 8003578:	dc29      	bgt.n	80035ce <_printf_common+0xa6>
 800357a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800357e:	6822      	ldr	r2, [r4, #0]
 8003580:	3300      	adds	r3, #0
 8003582:	bf18      	it	ne
 8003584:	2301      	movne	r3, #1
 8003586:	0692      	lsls	r2, r2, #26
 8003588:	d42e      	bmi.n	80035e8 <_printf_common+0xc0>
 800358a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800358e:	4639      	mov	r1, r7
 8003590:	4630      	mov	r0, r6
 8003592:	47c0      	blx	r8
 8003594:	3001      	adds	r0, #1
 8003596:	d021      	beq.n	80035dc <_printf_common+0xb4>
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	68e5      	ldr	r5, [r4, #12]
 800359c:	f003 0306 	and.w	r3, r3, #6
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	bf18      	it	ne
 80035a4:	2500      	movne	r5, #0
 80035a6:	f8d9 2000 	ldr.w	r2, [r9]
 80035aa:	f04f 0900 	mov.w	r9, #0
 80035ae:	bf08      	it	eq
 80035b0:	1aad      	subeq	r5, r5, r2
 80035b2:	68a3      	ldr	r3, [r4, #8]
 80035b4:	6922      	ldr	r2, [r4, #16]
 80035b6:	bf08      	it	eq
 80035b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035bc:	4293      	cmp	r3, r2
 80035be:	bfc4      	itt	gt
 80035c0:	1a9b      	subgt	r3, r3, r2
 80035c2:	18ed      	addgt	r5, r5, r3
 80035c4:	341a      	adds	r4, #26
 80035c6:	454d      	cmp	r5, r9
 80035c8:	d11a      	bne.n	8003600 <_printf_common+0xd8>
 80035ca:	2000      	movs	r0, #0
 80035cc:	e008      	b.n	80035e0 <_printf_common+0xb8>
 80035ce:	2301      	movs	r3, #1
 80035d0:	4652      	mov	r2, sl
 80035d2:	4639      	mov	r1, r7
 80035d4:	4630      	mov	r0, r6
 80035d6:	47c0      	blx	r8
 80035d8:	3001      	adds	r0, #1
 80035da:	d103      	bne.n	80035e4 <_printf_common+0xbc>
 80035dc:	f04f 30ff 	mov.w	r0, #4294967295
 80035e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e4:	3501      	adds	r5, #1
 80035e6:	e7c2      	b.n	800356e <_printf_common+0x46>
 80035e8:	2030      	movs	r0, #48	; 0x30
 80035ea:	18e1      	adds	r1, r4, r3
 80035ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035f6:	4422      	add	r2, r4
 80035f8:	3302      	adds	r3, #2
 80035fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035fe:	e7c4      	b.n	800358a <_printf_common+0x62>
 8003600:	2301      	movs	r3, #1
 8003602:	4622      	mov	r2, r4
 8003604:	4639      	mov	r1, r7
 8003606:	4630      	mov	r0, r6
 8003608:	47c0      	blx	r8
 800360a:	3001      	adds	r0, #1
 800360c:	d0e6      	beq.n	80035dc <_printf_common+0xb4>
 800360e:	f109 0901 	add.w	r9, r9, #1
 8003612:	e7d8      	b.n	80035c6 <_printf_common+0x9e>

08003614 <_printf_i>:
 8003614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003618:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800361c:	460c      	mov	r4, r1
 800361e:	7e09      	ldrb	r1, [r1, #24]
 8003620:	b085      	sub	sp, #20
 8003622:	296e      	cmp	r1, #110	; 0x6e
 8003624:	4617      	mov	r7, r2
 8003626:	4606      	mov	r6, r0
 8003628:	4698      	mov	r8, r3
 800362a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800362c:	f000 80b3 	beq.w	8003796 <_printf_i+0x182>
 8003630:	d822      	bhi.n	8003678 <_printf_i+0x64>
 8003632:	2963      	cmp	r1, #99	; 0x63
 8003634:	d036      	beq.n	80036a4 <_printf_i+0x90>
 8003636:	d80a      	bhi.n	800364e <_printf_i+0x3a>
 8003638:	2900      	cmp	r1, #0
 800363a:	f000 80b9 	beq.w	80037b0 <_printf_i+0x19c>
 800363e:	2958      	cmp	r1, #88	; 0x58
 8003640:	f000 8083 	beq.w	800374a <_printf_i+0x136>
 8003644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003648:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800364c:	e032      	b.n	80036b4 <_printf_i+0xa0>
 800364e:	2964      	cmp	r1, #100	; 0x64
 8003650:	d001      	beq.n	8003656 <_printf_i+0x42>
 8003652:	2969      	cmp	r1, #105	; 0x69
 8003654:	d1f6      	bne.n	8003644 <_printf_i+0x30>
 8003656:	6820      	ldr	r0, [r4, #0]
 8003658:	6813      	ldr	r3, [r2, #0]
 800365a:	0605      	lsls	r5, r0, #24
 800365c:	f103 0104 	add.w	r1, r3, #4
 8003660:	d52a      	bpl.n	80036b8 <_printf_i+0xa4>
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6011      	str	r1, [r2, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	da03      	bge.n	8003672 <_printf_i+0x5e>
 800366a:	222d      	movs	r2, #45	; 0x2d
 800366c:	425b      	negs	r3, r3
 800366e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003672:	486f      	ldr	r0, [pc, #444]	; (8003830 <_printf_i+0x21c>)
 8003674:	220a      	movs	r2, #10
 8003676:	e039      	b.n	80036ec <_printf_i+0xd8>
 8003678:	2973      	cmp	r1, #115	; 0x73
 800367a:	f000 809d 	beq.w	80037b8 <_printf_i+0x1a4>
 800367e:	d808      	bhi.n	8003692 <_printf_i+0x7e>
 8003680:	296f      	cmp	r1, #111	; 0x6f
 8003682:	d020      	beq.n	80036c6 <_printf_i+0xb2>
 8003684:	2970      	cmp	r1, #112	; 0x70
 8003686:	d1dd      	bne.n	8003644 <_printf_i+0x30>
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	f043 0320 	orr.w	r3, r3, #32
 800368e:	6023      	str	r3, [r4, #0]
 8003690:	e003      	b.n	800369a <_printf_i+0x86>
 8003692:	2975      	cmp	r1, #117	; 0x75
 8003694:	d017      	beq.n	80036c6 <_printf_i+0xb2>
 8003696:	2978      	cmp	r1, #120	; 0x78
 8003698:	d1d4      	bne.n	8003644 <_printf_i+0x30>
 800369a:	2378      	movs	r3, #120	; 0x78
 800369c:	4865      	ldr	r0, [pc, #404]	; (8003834 <_printf_i+0x220>)
 800369e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036a2:	e055      	b.n	8003750 <_printf_i+0x13c>
 80036a4:	6813      	ldr	r3, [r2, #0]
 80036a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036aa:	1d19      	adds	r1, r3, #4
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6011      	str	r1, [r2, #0]
 80036b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036b4:	2301      	movs	r3, #1
 80036b6:	e08c      	b.n	80037d2 <_printf_i+0x1be>
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036be:	6011      	str	r1, [r2, #0]
 80036c0:	bf18      	it	ne
 80036c2:	b21b      	sxthne	r3, r3
 80036c4:	e7cf      	b.n	8003666 <_printf_i+0x52>
 80036c6:	6813      	ldr	r3, [r2, #0]
 80036c8:	6825      	ldr	r5, [r4, #0]
 80036ca:	1d18      	adds	r0, r3, #4
 80036cc:	6010      	str	r0, [r2, #0]
 80036ce:	0628      	lsls	r0, r5, #24
 80036d0:	d501      	bpl.n	80036d6 <_printf_i+0xc2>
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	e002      	b.n	80036dc <_printf_i+0xc8>
 80036d6:	0668      	lsls	r0, r5, #25
 80036d8:	d5fb      	bpl.n	80036d2 <_printf_i+0xbe>
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	296f      	cmp	r1, #111	; 0x6f
 80036de:	bf14      	ite	ne
 80036e0:	220a      	movne	r2, #10
 80036e2:	2208      	moveq	r2, #8
 80036e4:	4852      	ldr	r0, [pc, #328]	; (8003830 <_printf_i+0x21c>)
 80036e6:	2100      	movs	r1, #0
 80036e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036ec:	6865      	ldr	r5, [r4, #4]
 80036ee:	2d00      	cmp	r5, #0
 80036f0:	60a5      	str	r5, [r4, #8]
 80036f2:	f2c0 8095 	blt.w	8003820 <_printf_i+0x20c>
 80036f6:	6821      	ldr	r1, [r4, #0]
 80036f8:	f021 0104 	bic.w	r1, r1, #4
 80036fc:	6021      	str	r1, [r4, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d13d      	bne.n	800377e <_printf_i+0x16a>
 8003702:	2d00      	cmp	r5, #0
 8003704:	f040 808e 	bne.w	8003824 <_printf_i+0x210>
 8003708:	4665      	mov	r5, ip
 800370a:	2a08      	cmp	r2, #8
 800370c:	d10b      	bne.n	8003726 <_printf_i+0x112>
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	07db      	lsls	r3, r3, #31
 8003712:	d508      	bpl.n	8003726 <_printf_i+0x112>
 8003714:	6923      	ldr	r3, [r4, #16]
 8003716:	6862      	ldr	r2, [r4, #4]
 8003718:	429a      	cmp	r2, r3
 800371a:	bfde      	ittt	le
 800371c:	2330      	movle	r3, #48	; 0x30
 800371e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003722:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003726:	ebac 0305 	sub.w	r3, ip, r5
 800372a:	6123      	str	r3, [r4, #16]
 800372c:	f8cd 8000 	str.w	r8, [sp]
 8003730:	463b      	mov	r3, r7
 8003732:	aa03      	add	r2, sp, #12
 8003734:	4621      	mov	r1, r4
 8003736:	4630      	mov	r0, r6
 8003738:	f7ff fef6 	bl	8003528 <_printf_common>
 800373c:	3001      	adds	r0, #1
 800373e:	d14d      	bne.n	80037dc <_printf_i+0x1c8>
 8003740:	f04f 30ff 	mov.w	r0, #4294967295
 8003744:	b005      	add	sp, #20
 8003746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800374a:	4839      	ldr	r0, [pc, #228]	; (8003830 <_printf_i+0x21c>)
 800374c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003750:	6813      	ldr	r3, [r2, #0]
 8003752:	6821      	ldr	r1, [r4, #0]
 8003754:	1d1d      	adds	r5, r3, #4
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6015      	str	r5, [r2, #0]
 800375a:	060a      	lsls	r2, r1, #24
 800375c:	d50b      	bpl.n	8003776 <_printf_i+0x162>
 800375e:	07ca      	lsls	r2, r1, #31
 8003760:	bf44      	itt	mi
 8003762:	f041 0120 	orrmi.w	r1, r1, #32
 8003766:	6021      	strmi	r1, [r4, #0]
 8003768:	b91b      	cbnz	r3, 8003772 <_printf_i+0x15e>
 800376a:	6822      	ldr	r2, [r4, #0]
 800376c:	f022 0220 	bic.w	r2, r2, #32
 8003770:	6022      	str	r2, [r4, #0]
 8003772:	2210      	movs	r2, #16
 8003774:	e7b7      	b.n	80036e6 <_printf_i+0xd2>
 8003776:	064d      	lsls	r5, r1, #25
 8003778:	bf48      	it	mi
 800377a:	b29b      	uxthmi	r3, r3
 800377c:	e7ef      	b.n	800375e <_printf_i+0x14a>
 800377e:	4665      	mov	r5, ip
 8003780:	fbb3 f1f2 	udiv	r1, r3, r2
 8003784:	fb02 3311 	mls	r3, r2, r1, r3
 8003788:	5cc3      	ldrb	r3, [r0, r3]
 800378a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800378e:	460b      	mov	r3, r1
 8003790:	2900      	cmp	r1, #0
 8003792:	d1f5      	bne.n	8003780 <_printf_i+0x16c>
 8003794:	e7b9      	b.n	800370a <_printf_i+0xf6>
 8003796:	6813      	ldr	r3, [r2, #0]
 8003798:	6825      	ldr	r5, [r4, #0]
 800379a:	1d18      	adds	r0, r3, #4
 800379c:	6961      	ldr	r1, [r4, #20]
 800379e:	6010      	str	r0, [r2, #0]
 80037a0:	0628      	lsls	r0, r5, #24
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	d501      	bpl.n	80037aa <_printf_i+0x196>
 80037a6:	6019      	str	r1, [r3, #0]
 80037a8:	e002      	b.n	80037b0 <_printf_i+0x19c>
 80037aa:	066a      	lsls	r2, r5, #25
 80037ac:	d5fb      	bpl.n	80037a6 <_printf_i+0x192>
 80037ae:	8019      	strh	r1, [r3, #0]
 80037b0:	2300      	movs	r3, #0
 80037b2:	4665      	mov	r5, ip
 80037b4:	6123      	str	r3, [r4, #16]
 80037b6:	e7b9      	b.n	800372c <_printf_i+0x118>
 80037b8:	6813      	ldr	r3, [r2, #0]
 80037ba:	1d19      	adds	r1, r3, #4
 80037bc:	6011      	str	r1, [r2, #0]
 80037be:	681d      	ldr	r5, [r3, #0]
 80037c0:	6862      	ldr	r2, [r4, #4]
 80037c2:	2100      	movs	r1, #0
 80037c4:	4628      	mov	r0, r5
 80037c6:	f000 f837 	bl	8003838 <memchr>
 80037ca:	b108      	cbz	r0, 80037d0 <_printf_i+0x1bc>
 80037cc:	1b40      	subs	r0, r0, r5
 80037ce:	6060      	str	r0, [r4, #4]
 80037d0:	6863      	ldr	r3, [r4, #4]
 80037d2:	6123      	str	r3, [r4, #16]
 80037d4:	2300      	movs	r3, #0
 80037d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037da:	e7a7      	b.n	800372c <_printf_i+0x118>
 80037dc:	6923      	ldr	r3, [r4, #16]
 80037de:	462a      	mov	r2, r5
 80037e0:	4639      	mov	r1, r7
 80037e2:	4630      	mov	r0, r6
 80037e4:	47c0      	blx	r8
 80037e6:	3001      	adds	r0, #1
 80037e8:	d0aa      	beq.n	8003740 <_printf_i+0x12c>
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	079b      	lsls	r3, r3, #30
 80037ee:	d413      	bmi.n	8003818 <_printf_i+0x204>
 80037f0:	68e0      	ldr	r0, [r4, #12]
 80037f2:	9b03      	ldr	r3, [sp, #12]
 80037f4:	4298      	cmp	r0, r3
 80037f6:	bfb8      	it	lt
 80037f8:	4618      	movlt	r0, r3
 80037fa:	e7a3      	b.n	8003744 <_printf_i+0x130>
 80037fc:	2301      	movs	r3, #1
 80037fe:	464a      	mov	r2, r9
 8003800:	4639      	mov	r1, r7
 8003802:	4630      	mov	r0, r6
 8003804:	47c0      	blx	r8
 8003806:	3001      	adds	r0, #1
 8003808:	d09a      	beq.n	8003740 <_printf_i+0x12c>
 800380a:	3501      	adds	r5, #1
 800380c:	68e3      	ldr	r3, [r4, #12]
 800380e:	9a03      	ldr	r2, [sp, #12]
 8003810:	1a9b      	subs	r3, r3, r2
 8003812:	42ab      	cmp	r3, r5
 8003814:	dcf2      	bgt.n	80037fc <_printf_i+0x1e8>
 8003816:	e7eb      	b.n	80037f0 <_printf_i+0x1dc>
 8003818:	2500      	movs	r5, #0
 800381a:	f104 0919 	add.w	r9, r4, #25
 800381e:	e7f5      	b.n	800380c <_printf_i+0x1f8>
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1ac      	bne.n	800377e <_printf_i+0x16a>
 8003824:	7803      	ldrb	r3, [r0, #0]
 8003826:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800382a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800382e:	e76c      	b.n	800370a <_printf_i+0xf6>
 8003830:	08003bc1 	.word	0x08003bc1
 8003834:	08003bd2 	.word	0x08003bd2

08003838 <memchr>:
 8003838:	b510      	push	{r4, lr}
 800383a:	b2c9      	uxtb	r1, r1
 800383c:	4402      	add	r2, r0
 800383e:	4290      	cmp	r0, r2
 8003840:	4603      	mov	r3, r0
 8003842:	d101      	bne.n	8003848 <memchr+0x10>
 8003844:	2300      	movs	r3, #0
 8003846:	e003      	b.n	8003850 <memchr+0x18>
 8003848:	781c      	ldrb	r4, [r3, #0]
 800384a:	3001      	adds	r0, #1
 800384c:	428c      	cmp	r4, r1
 800384e:	d1f6      	bne.n	800383e <memchr+0x6>
 8003850:	4618      	mov	r0, r3
 8003852:	bd10      	pop	{r4, pc}

08003854 <memcpy>:
 8003854:	b510      	push	{r4, lr}
 8003856:	1e43      	subs	r3, r0, #1
 8003858:	440a      	add	r2, r1
 800385a:	4291      	cmp	r1, r2
 800385c:	d100      	bne.n	8003860 <memcpy+0xc>
 800385e:	bd10      	pop	{r4, pc}
 8003860:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003864:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003868:	e7f7      	b.n	800385a <memcpy+0x6>

0800386a <memmove>:
 800386a:	4288      	cmp	r0, r1
 800386c:	b510      	push	{r4, lr}
 800386e:	eb01 0302 	add.w	r3, r1, r2
 8003872:	d807      	bhi.n	8003884 <memmove+0x1a>
 8003874:	1e42      	subs	r2, r0, #1
 8003876:	4299      	cmp	r1, r3
 8003878:	d00a      	beq.n	8003890 <memmove+0x26>
 800387a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800387e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003882:	e7f8      	b.n	8003876 <memmove+0xc>
 8003884:	4283      	cmp	r3, r0
 8003886:	d9f5      	bls.n	8003874 <memmove+0xa>
 8003888:	1881      	adds	r1, r0, r2
 800388a:	1ad2      	subs	r2, r2, r3
 800388c:	42d3      	cmn	r3, r2
 800388e:	d100      	bne.n	8003892 <memmove+0x28>
 8003890:	bd10      	pop	{r4, pc}
 8003892:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003896:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800389a:	e7f7      	b.n	800388c <memmove+0x22>

0800389c <_free_r>:
 800389c:	b538      	push	{r3, r4, r5, lr}
 800389e:	4605      	mov	r5, r0
 80038a0:	2900      	cmp	r1, #0
 80038a2:	d043      	beq.n	800392c <_free_r+0x90>
 80038a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038a8:	1f0c      	subs	r4, r1, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	bfb8      	it	lt
 80038ae:	18e4      	addlt	r4, r4, r3
 80038b0:	f000 f8d0 	bl	8003a54 <__malloc_lock>
 80038b4:	4a1e      	ldr	r2, [pc, #120]	; (8003930 <_free_r+0x94>)
 80038b6:	6813      	ldr	r3, [r2, #0]
 80038b8:	4610      	mov	r0, r2
 80038ba:	b933      	cbnz	r3, 80038ca <_free_r+0x2e>
 80038bc:	6063      	str	r3, [r4, #4]
 80038be:	6014      	str	r4, [r2, #0]
 80038c0:	4628      	mov	r0, r5
 80038c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038c6:	f000 b8c6 	b.w	8003a56 <__malloc_unlock>
 80038ca:	42a3      	cmp	r3, r4
 80038cc:	d90b      	bls.n	80038e6 <_free_r+0x4a>
 80038ce:	6821      	ldr	r1, [r4, #0]
 80038d0:	1862      	adds	r2, r4, r1
 80038d2:	4293      	cmp	r3, r2
 80038d4:	bf01      	itttt	eq
 80038d6:	681a      	ldreq	r2, [r3, #0]
 80038d8:	685b      	ldreq	r3, [r3, #4]
 80038da:	1852      	addeq	r2, r2, r1
 80038dc:	6022      	streq	r2, [r4, #0]
 80038de:	6063      	str	r3, [r4, #4]
 80038e0:	6004      	str	r4, [r0, #0]
 80038e2:	e7ed      	b.n	80038c0 <_free_r+0x24>
 80038e4:	4613      	mov	r3, r2
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	b10a      	cbz	r2, 80038ee <_free_r+0x52>
 80038ea:	42a2      	cmp	r2, r4
 80038ec:	d9fa      	bls.n	80038e4 <_free_r+0x48>
 80038ee:	6819      	ldr	r1, [r3, #0]
 80038f0:	1858      	adds	r0, r3, r1
 80038f2:	42a0      	cmp	r0, r4
 80038f4:	d10b      	bne.n	800390e <_free_r+0x72>
 80038f6:	6820      	ldr	r0, [r4, #0]
 80038f8:	4401      	add	r1, r0
 80038fa:	1858      	adds	r0, r3, r1
 80038fc:	4282      	cmp	r2, r0
 80038fe:	6019      	str	r1, [r3, #0]
 8003900:	d1de      	bne.n	80038c0 <_free_r+0x24>
 8003902:	6810      	ldr	r0, [r2, #0]
 8003904:	6852      	ldr	r2, [r2, #4]
 8003906:	4401      	add	r1, r0
 8003908:	6019      	str	r1, [r3, #0]
 800390a:	605a      	str	r2, [r3, #4]
 800390c:	e7d8      	b.n	80038c0 <_free_r+0x24>
 800390e:	d902      	bls.n	8003916 <_free_r+0x7a>
 8003910:	230c      	movs	r3, #12
 8003912:	602b      	str	r3, [r5, #0]
 8003914:	e7d4      	b.n	80038c0 <_free_r+0x24>
 8003916:	6820      	ldr	r0, [r4, #0]
 8003918:	1821      	adds	r1, r4, r0
 800391a:	428a      	cmp	r2, r1
 800391c:	bf01      	itttt	eq
 800391e:	6811      	ldreq	r1, [r2, #0]
 8003920:	6852      	ldreq	r2, [r2, #4]
 8003922:	1809      	addeq	r1, r1, r0
 8003924:	6021      	streq	r1, [r4, #0]
 8003926:	6062      	str	r2, [r4, #4]
 8003928:	605c      	str	r4, [r3, #4]
 800392a:	e7c9      	b.n	80038c0 <_free_r+0x24>
 800392c:	bd38      	pop	{r3, r4, r5, pc}
 800392e:	bf00      	nop
 8003930:	200000f4 	.word	0x200000f4

08003934 <_malloc_r>:
 8003934:	b570      	push	{r4, r5, r6, lr}
 8003936:	1ccd      	adds	r5, r1, #3
 8003938:	f025 0503 	bic.w	r5, r5, #3
 800393c:	3508      	adds	r5, #8
 800393e:	2d0c      	cmp	r5, #12
 8003940:	bf38      	it	cc
 8003942:	250c      	movcc	r5, #12
 8003944:	2d00      	cmp	r5, #0
 8003946:	4606      	mov	r6, r0
 8003948:	db01      	blt.n	800394e <_malloc_r+0x1a>
 800394a:	42a9      	cmp	r1, r5
 800394c:	d903      	bls.n	8003956 <_malloc_r+0x22>
 800394e:	230c      	movs	r3, #12
 8003950:	6033      	str	r3, [r6, #0]
 8003952:	2000      	movs	r0, #0
 8003954:	bd70      	pop	{r4, r5, r6, pc}
 8003956:	f000 f87d 	bl	8003a54 <__malloc_lock>
 800395a:	4a21      	ldr	r2, [pc, #132]	; (80039e0 <_malloc_r+0xac>)
 800395c:	6814      	ldr	r4, [r2, #0]
 800395e:	4621      	mov	r1, r4
 8003960:	b991      	cbnz	r1, 8003988 <_malloc_r+0x54>
 8003962:	4c20      	ldr	r4, [pc, #128]	; (80039e4 <_malloc_r+0xb0>)
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	b91b      	cbnz	r3, 8003970 <_malloc_r+0x3c>
 8003968:	4630      	mov	r0, r6
 800396a:	f000 f863 	bl	8003a34 <_sbrk_r>
 800396e:	6020      	str	r0, [r4, #0]
 8003970:	4629      	mov	r1, r5
 8003972:	4630      	mov	r0, r6
 8003974:	f000 f85e 	bl	8003a34 <_sbrk_r>
 8003978:	1c43      	adds	r3, r0, #1
 800397a:	d124      	bne.n	80039c6 <_malloc_r+0x92>
 800397c:	230c      	movs	r3, #12
 800397e:	4630      	mov	r0, r6
 8003980:	6033      	str	r3, [r6, #0]
 8003982:	f000 f868 	bl	8003a56 <__malloc_unlock>
 8003986:	e7e4      	b.n	8003952 <_malloc_r+0x1e>
 8003988:	680b      	ldr	r3, [r1, #0]
 800398a:	1b5b      	subs	r3, r3, r5
 800398c:	d418      	bmi.n	80039c0 <_malloc_r+0x8c>
 800398e:	2b0b      	cmp	r3, #11
 8003990:	d90f      	bls.n	80039b2 <_malloc_r+0x7e>
 8003992:	600b      	str	r3, [r1, #0]
 8003994:	18cc      	adds	r4, r1, r3
 8003996:	50cd      	str	r5, [r1, r3]
 8003998:	4630      	mov	r0, r6
 800399a:	f000 f85c 	bl	8003a56 <__malloc_unlock>
 800399e:	f104 000b 	add.w	r0, r4, #11
 80039a2:	1d23      	adds	r3, r4, #4
 80039a4:	f020 0007 	bic.w	r0, r0, #7
 80039a8:	1ac3      	subs	r3, r0, r3
 80039aa:	d0d3      	beq.n	8003954 <_malloc_r+0x20>
 80039ac:	425a      	negs	r2, r3
 80039ae:	50e2      	str	r2, [r4, r3]
 80039b0:	e7d0      	b.n	8003954 <_malloc_r+0x20>
 80039b2:	684b      	ldr	r3, [r1, #4]
 80039b4:	428c      	cmp	r4, r1
 80039b6:	bf16      	itet	ne
 80039b8:	6063      	strne	r3, [r4, #4]
 80039ba:	6013      	streq	r3, [r2, #0]
 80039bc:	460c      	movne	r4, r1
 80039be:	e7eb      	b.n	8003998 <_malloc_r+0x64>
 80039c0:	460c      	mov	r4, r1
 80039c2:	6849      	ldr	r1, [r1, #4]
 80039c4:	e7cc      	b.n	8003960 <_malloc_r+0x2c>
 80039c6:	1cc4      	adds	r4, r0, #3
 80039c8:	f024 0403 	bic.w	r4, r4, #3
 80039cc:	42a0      	cmp	r0, r4
 80039ce:	d005      	beq.n	80039dc <_malloc_r+0xa8>
 80039d0:	1a21      	subs	r1, r4, r0
 80039d2:	4630      	mov	r0, r6
 80039d4:	f000 f82e 	bl	8003a34 <_sbrk_r>
 80039d8:	3001      	adds	r0, #1
 80039da:	d0cf      	beq.n	800397c <_malloc_r+0x48>
 80039dc:	6025      	str	r5, [r4, #0]
 80039de:	e7db      	b.n	8003998 <_malloc_r+0x64>
 80039e0:	200000f4 	.word	0x200000f4
 80039e4:	200000f8 	.word	0x200000f8

080039e8 <_realloc_r>:
 80039e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ea:	4607      	mov	r7, r0
 80039ec:	4614      	mov	r4, r2
 80039ee:	460e      	mov	r6, r1
 80039f0:	b921      	cbnz	r1, 80039fc <_realloc_r+0x14>
 80039f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80039f6:	4611      	mov	r1, r2
 80039f8:	f7ff bf9c 	b.w	8003934 <_malloc_r>
 80039fc:	b922      	cbnz	r2, 8003a08 <_realloc_r+0x20>
 80039fe:	f7ff ff4d 	bl	800389c <_free_r>
 8003a02:	4625      	mov	r5, r4
 8003a04:	4628      	mov	r0, r5
 8003a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a08:	f000 f826 	bl	8003a58 <_malloc_usable_size_r>
 8003a0c:	42a0      	cmp	r0, r4
 8003a0e:	d20f      	bcs.n	8003a30 <_realloc_r+0x48>
 8003a10:	4621      	mov	r1, r4
 8003a12:	4638      	mov	r0, r7
 8003a14:	f7ff ff8e 	bl	8003934 <_malloc_r>
 8003a18:	4605      	mov	r5, r0
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d0f2      	beq.n	8003a04 <_realloc_r+0x1c>
 8003a1e:	4631      	mov	r1, r6
 8003a20:	4622      	mov	r2, r4
 8003a22:	f7ff ff17 	bl	8003854 <memcpy>
 8003a26:	4631      	mov	r1, r6
 8003a28:	4638      	mov	r0, r7
 8003a2a:	f7ff ff37 	bl	800389c <_free_r>
 8003a2e:	e7e9      	b.n	8003a04 <_realloc_r+0x1c>
 8003a30:	4635      	mov	r5, r6
 8003a32:	e7e7      	b.n	8003a04 <_realloc_r+0x1c>

08003a34 <_sbrk_r>:
 8003a34:	b538      	push	{r3, r4, r5, lr}
 8003a36:	2300      	movs	r3, #0
 8003a38:	4c05      	ldr	r4, [pc, #20]	; (8003a50 <_sbrk_r+0x1c>)
 8003a3a:	4605      	mov	r5, r0
 8003a3c:	4608      	mov	r0, r1
 8003a3e:	6023      	str	r3, [r4, #0]
 8003a40:	f7fd f916 	bl	8000c70 <_sbrk>
 8003a44:	1c43      	adds	r3, r0, #1
 8003a46:	d102      	bne.n	8003a4e <_sbrk_r+0x1a>
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	b103      	cbz	r3, 8003a4e <_sbrk_r+0x1a>
 8003a4c:	602b      	str	r3, [r5, #0]
 8003a4e:	bd38      	pop	{r3, r4, r5, pc}
 8003a50:	200001e0 	.word	0x200001e0

08003a54 <__malloc_lock>:
 8003a54:	4770      	bx	lr

08003a56 <__malloc_unlock>:
 8003a56:	4770      	bx	lr

08003a58 <_malloc_usable_size_r>:
 8003a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a5c:	1f18      	subs	r0, r3, #4
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	bfbc      	itt	lt
 8003a62:	580b      	ldrlt	r3, [r1, r0]
 8003a64:	18c0      	addlt	r0, r0, r3
 8003a66:	4770      	bx	lr

08003a68 <_init>:
 8003a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6a:	bf00      	nop
 8003a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a6e:	bc08      	pop	{r3}
 8003a70:	469e      	mov	lr, r3
 8003a72:	4770      	bx	lr

08003a74 <_fini>:
 8003a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a76:	bf00      	nop
 8003a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7a:	bc08      	pop	{r3}
 8003a7c:	469e      	mov	lr, r3
 8003a7e:	4770      	bx	lr
